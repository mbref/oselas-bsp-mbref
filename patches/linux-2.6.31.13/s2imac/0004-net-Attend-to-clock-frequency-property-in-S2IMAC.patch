From 5e65ab913d35a9ca4321e15639860e8caa48dc88 Mon Sep 17 00:00:00 2001
Message-Id: <5e65ab913d35a9ca4321e15639860e8caa48dc88.1295945091.git.linz@li-pro.net>
In-Reply-To: <c9d83d1df30226266145878ff4433c2a01c87a52.1295945090.git.linz@li-pro.net>
References: <c9d83d1df30226266145878ff4433c2a01c87a52.1295945090.git.linz@li-pro.net>
From: Stephan Linz <linz@li-pro.net>
Date: Mon, 24 Jan 2011 20:18:35 +0100
Subject: [PATCH 4/5] net: Attend to clock-frequency property in S2IMAC

Force the S2I GigE Vision Ethernet MAC driver to
use the fdt clock-frequency property. If not set
give back an error or try to use the CPU clock
frequency property (Microblaze only).

Signed-off-by: Stephan Linz <linz@li-pro.net>
---
 drivers/net/s2imac.c |   68 +++++++++++++++++++++++++++++++++++++++-----------
 1 files changed, 53 insertions(+), 15 deletions(-)

diff --git a/drivers/net/s2imac.c b/drivers/net/s2imac.c
index 7d9e886..cf75545 100644
--- a/drivers/net/s2imac.c
+++ b/drivers/net/s2imac.c
@@ -110,6 +110,7 @@ struct net_local {
 	struct net_device *ndev;
 
 	void __iomem *base_addr;
+	unsigned int coreclk;
 
 	spinlock_t reset_lock;
 	struct sk_buff *deferred_skb;
@@ -312,7 +313,7 @@ static void phy_setup (struct net_local *lp)
 
 	out_be32 ((u32 *) MC,
 		  MDIO_ENABLE_MASK | (MDIO_CLOCK_DIV_MASK &
-				      ((62500000 / (2 * 2500000)) - 1)));
+				      ((lp->coreclk / (2 * 2500000)) - 1)));
 
 	/* wait for link up */
 	while (retries-- && ((s2imac_phy_read (lp, 1) & 0x24) != 0x24)) ;
@@ -837,20 +838,18 @@ static int __devinit s2imac_of_probe (struct of_device *ofdev,
 	struct resource r_mem;	/* IO mem resources */
 	struct net_device *ndev;
 	struct net_local *lp;
+	struct device_node *np = ofdev->node;
 	struct device *dev = &ofdev->dev;
 	const void *mac_address;
+	const unsigned int *clk;
+#ifdef CONFIG_MICROBLAZE
+	struct device_node *cpu;
+#endif
 
 	int rc = 0;
 	u32 mac_l, mac_h;
 
-	dev_info (dev, "probing \'%s\'\n", ofdev->node->name);
-
-	/* Get iospace for the device */
-	rc = of_address_to_resource (ofdev->node, 0, &r_mem);
-	if (rc) {
-		dev_err (dev, "invalid address\n");
-		return rc;
-	}
+	dev_info (dev, "probing \'%s\'\n", np->name);
 
 	/* Create an ethernet device instance */
 	ndev = alloc_etherdev (sizeof (struct net_local));
@@ -860,14 +859,52 @@ static int __devinit s2imac_of_probe (struct of_device *ofdev,
 	}
 
 	dev_set_drvdata (dev, ndev);
-	SET_NETDEV_DEV (ndev, &ofdev->dev);
-
-	ndev->mem_start = r_mem.start;
-	ndev->mem_end = r_mem.end;
+	SET_NETDEV_DEV (ndev, dev);
 
 	lp = netdev_priv (ndev);
 	lp->ndev = ndev;
 
+	/* Get clock configuration for the device */
+	clk = of_get_property (np, "clock-frequency", NULL);
+	if (!clk) {
+		dev_warn (dev, "no clock-frequency property set\n");
+		rc = -ENODEV;
+
+#ifndef CONFIG_MICROBLAZE
+
+		goto error2;
+
+#else /* is CONFIG_MICROBLAZE */
+
+		cpu = of_find_node_by_type (NULL, "cpu");
+		if (!cpu) {
+			dev_err (dev, "you don't have a cpu?\n");
+			goto error2;
+		}
+
+		clk = of_get_property (cpu, "clock-frequency", NULL);
+		if (!clk) {
+			dev_err (dev, "no CPU clock-frequency property set\n");
+			goto error2;
+		}
+
+		dev_warn (dev, "use CPU clock-frequency\n");
+		rc = 0;
+#endif
+	}
+
+	lp->coreclk = *clk;
+
+	/* Get iospace for the device */
+	rc = of_address_to_resource (np, 0, &r_mem);
+	if (rc) {
+		dev_err (dev, "invalid address\n");
+		goto error2;
+	}
+
+	ndev->mem_start = r_mem.start;
+	ndev->mem_end = r_mem.end;
+
 	if (!request_mem_region (ndev->mem_start,
 				 ndev->mem_end - ndev->mem_start + 1,
 				 DRIVER_NAME)) {
@@ -885,8 +922,9 @@ static int __devinit s2imac_of_probe (struct of_device *ofdev,
 		goto error1;
 	}
 
-	dev_info (dev, "found at 0x%p mapped to 0x%p\n",
+	dev_info (dev, "core found at 0x%p mapped to 0x%p\n",
 		  (void *)ndev->mem_start, (void *)lp->base_addr);
+	dev_info (dev, "core clock is %d Hz\n", lp->coreclk);
 
 	spin_lock_init (&lp->reset_lock);
 
@@ -895,7 +933,7 @@ static int __devinit s2imac_of_probe (struct of_device *ofdev,
 	mac_l = in_be32 ((u32 *) MAC_LOW);
 
 	if ((mac_h == 0) && (mac_l == 0)) {
-		mac_address = of_get_mac_address (ofdev->node);
+		mac_address = of_get_mac_address (np);
 		if (mac_address)
 			/* Copy the MAC address from OF node. */
 			memcpy (ndev->dev_addr, mac_address, 6);
-- 
1.6.0.4

