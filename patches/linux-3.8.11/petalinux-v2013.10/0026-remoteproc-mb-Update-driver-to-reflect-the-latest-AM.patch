From d879fd738f12a0eb82317c39bb5a1322887d7380 Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Thu, 13 Jun 2013 09:49:07 +0200
Subject: [PATCH] remoteproc: mb: Update driver to reflect the latest AMP
 configuration

New driver is used for ARM to Microblaze AMP configuration.
- Add support for loading Microblaze bootloader
- Communication via gpios and with gpio interface usage
- Create devicetree description

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 .../bindings/remoteproc/mb_remoteproc.txt          |  46 +++++
 drivers/remoteproc/Kconfig                         |   2 +
 drivers/remoteproc/mb_remoteproc.c                 | 205 ++++++++++++++++++---
 3 files changed, 231 insertions(+), 22 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/remoteproc/mb_remoteproc.txt

diff --git a/Documentation/devicetree/bindings/remoteproc/mb_remoteproc.txt b/Documentation/devicetree/bindings/remoteproc/mb_remoteproc.txt
new file mode 100644
index 0000000..ebc2b35
--- /dev/null
+++ b/Documentation/devicetree/bindings/remoteproc/mb_remoteproc.txt
@@ -0,0 +1,46 @@
+Xilinx ARM-Microblaze remoteproc driver
+
+This driver requires specific Zynq hardware design where Microblaze is added
+to the programmable logic.
+Microblaze is connected with PS block via axi bus connected to PS HP port
+to ensure access to PS DDR.
+Communication channels are done via soft GPIO IP connected to PS block
+and to Microblaze. There are also 2 gpio control signals reset and debug
+which are used for reseting Microblaze.
+
+Required properties:
+- compatible : Should be "xlnx,mb_remoteproc"
+- reg : Address and length of the ddr address space
+- bram: Phandle to bram controller which can access Microblaze BRAM
+- bram-firmware : Microblaze BRAM bootloader name
+- firmware : Default firmware name which can be override by
+	     "firmware" module parameter
+- reset : Gpio phandle which reset Microblaze remoteproc
+- debug : Gpio phandle which setup Microblaze to debug state
+- ipino : Gpio phandle for Microblaze to ARM communication
+- vring0 : Gpio phandle for ARM to Microblaze communication vring 0
+- vring1 : Gpio phandle for ARM to Microblaze communication vring 1
+
+Microblaze SoC can be also connected to the PS block via a axi bus.
+That's why there is the option to allocate interrupts for Microblaze use only.
+The driver will allocate interrupts to itself and Microblaze sw has to ensure
+that interrupts are properly enabled and handled by Microblaze interrupt
+controller.
+
+Optional properties:
+ - interrupts : Interrupt mapping for remoteproc
+ - interrupt-parent : Phandle for the interrupt controller
+
+Example:
+test_mb: mb_remoteproc-test@800000 {
+	compatible = "xlnx,mb_remoteproc";
+	reg = < 0x8000000 0x8000000 >;
+	bram = <&axi_bram_ctrl_0>;
+	bram-firmware = "mb.bin";
+	firmware = "image.elf";
+	reset = <&zynq_gpio_reset 1 0>;
+	debug = <&zynq_gpio_reset 0 0>;
+	ipino = <&zynq_gpio_vring 0 0>;
+	vring0 = <&zynq_gpio_vring 1 0>;
+	vring1 = <&zynq_gpio_vring 2 0>;
+} ;
diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index c88b8c2..823df2c 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -59,6 +59,8 @@ config MB_REMOTEPROC
 	depends on ARCH_ZYNQ
 	depends on EXPERIMENTAL
 	depends on HAS_DMA
+	select GPIO_XILINX
+	select REMOTEPROC
 	select RPMSG
 	default m
 	help
diff --git a/drivers/remoteproc/mb_remoteproc.c b/drivers/remoteproc/mb_remoteproc.c
index 8c9cedf..860847d 100644
--- a/drivers/remoteproc/mb_remoteproc.c
+++ b/drivers/remoteproc/mb_remoteproc.c
@@ -28,12 +28,17 @@
 #include <linux/remoteproc.h>
 #include <linux/interrupt.h>
 #include <linux/of_irq.h>
+#include <linux/of_gpio.h>
+#include <linux/of_platform.h>
 #include <linux/smp.h>
 #include <asm/hardware/gic.h>
 #include <asm/outercache.h>
 #include <asm/cacheflush.h>
 #include <linux/slab.h>
 #include <linux/cpu.h>
+#include <linux/gpio.h>
+#include <linux/io.h>
+#include <linux/delay.h>
 
 #include "remoteproc_internal.h"
 
@@ -45,22 +50,69 @@ struct mb_rproc_pdata {
 	struct rproc *rproc;
 	u32 mem_start;
 	u32 mem_end;
-	u32 *gpio_reset_addr;
-	u32 reset_gpio_pin;
+	int reset_gpio;
+	int mb_debug_gpio;
+	int ipi;
+	int vring0;
+	int vring1;
+	void __iomem *vbase;
+	const unsigned char *bootloader;
 };
 
+/* Store rproc for IPI handler */
+static struct platform_device *remoteprocdev;
+static struct work_struct workqueue;
+
+static void handle_event(struct work_struct *work)
+{
+	struct mb_rproc_pdata *local = platform_get_drvdata(remoteprocdev);
+
+	flush_cache_all();
+	outer_flush_range(local->mem_start, local->mem_end);
+
+	if (rproc_vq_interrupt(local->rproc, 0) == IRQ_NONE)
+		dev_info(&remoteprocdev->dev, "no message found in vqid 0\n");
+}
+
+static irqreturn_t ipi_kick(int irq, void *dev_id)
+{
+	dev_dbg(&remoteprocdev->dev, "KICK Linux because of pending message\n");
+	schedule_work(&workqueue);
+	dev_dbg(&remoteprocdev->dev, "KICK Linux handled\n");
+
+	return IRQ_HANDLED;
+}
+
 static int mb_rproc_start(struct rproc *rproc)
 {
 	struct device *dev = rproc->dev.parent;
 	struct platform_device *pdev = to_platform_device(dev);
 	struct mb_rproc_pdata *local = platform_get_drvdata(pdev);
+	const struct firmware *fw;
+	int ret;
 
 	dev_info(dev, "%s\n", __func__);
+	INIT_WORK(&workqueue, handle_event);
 
 	flush_cache_all();
 	outer_flush_range(local->mem_start, local->mem_end);
 
-	*local->gpio_reset_addr &= ~(1 << local->reset_gpio_pin);
+	remoteprocdev = pdev;
+
+	ret = request_firmware(&fw, local->bootloader, &pdev->dev);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "request_firmware failed\n");
+		return ret;
+	}
+	/* Copy bootloader to memory */
+	memcpy(local->vbase, fw->data, fw->size);
+	release_firmware(fw);
+
+	/* Just for sure synchronize memories */
+	dsb();
+
+	/* Release Microblaze from reset */
+	gpio_set_value(local->reset_gpio, 0);
 
 	return 0;
 }
@@ -69,9 +121,28 @@ static int mb_rproc_start(struct rproc *rproc)
 static void mb_rproc_kick(struct rproc *rproc, int vqid)
 {
 	struct device *dev = rproc->dev.parent;
+	struct platform_device *pdev = to_platform_device(dev);
+	struct mb_rproc_pdata *local = platform_get_drvdata(pdev);
+
+	dev_dbg(dev, "KICK Firmware to start send messages vqid %d\n", vqid);
 
-	dev_info(dev, "KICK Firmware to start send messages vqid %d\n",
-									vqid);
+	flush_cache_all();
+	outer_flush_all();
+
+	/* Send swirq to firmware */
+	gpio_set_value(local->vring0, 0);
+	gpio_set_value(local->vring1, 0);
+	dsb();
+
+	if (!vqid) {
+		udelay(500);
+		gpio_set_value(local->vring0, 1);
+		dsb();
+	} else {
+		udelay(100);
+		gpio_set_value(local->vring1, 1);
+		dsb();
+	}
 }
 
 /* power off the remote processor */
@@ -81,10 +152,21 @@ static int mb_rproc_stop(struct rproc *rproc)
 	struct platform_device *pdev = to_platform_device(dev);
 	struct mb_rproc_pdata *local = platform_get_drvdata(pdev);
 
-	dev_info(dev, "%s\n", __func__);
+	/* Setup MB to the state where all memory transactions are done */
+	gpio_set_value(local->mb_debug_gpio, 1);
+	dsb(); /* Be sure that this write has been done */
+	/*
+	 * This should be enough to ensure one CLK as
+	 * it is written in MB ref guide
+	 */
+	gpio_set_value(local->mb_debug_gpio, 0);
+
+	udelay(1000); /* Wait some time to finish all mem transactions */
 
-	*local->gpio_reset_addr |= 1 << local->reset_gpio_pin;
+	/* Add Microblaze to reset state */
+	gpio_set_value(local->reset_gpio, 1);
 
+	/* No reason to wait that operations where done */
 	return 0;
 }
 
@@ -107,7 +189,8 @@ static irqreturn_t mb_remoteproc_interrupt(int irq, void *dev_id)
 static int mb_remoteproc_probe(struct platform_device *pdev)
 {
 	const unsigned char *prop;
-	const void *of_prop;
+	struct platform_device *bram_pdev;
+	struct device_node *bram_dev;
 	struct resource *res; /* IO mem resources */
 	int ret = 0;
 	int count = 0;
@@ -164,27 +247,105 @@ static int mb_remoteproc_probe(struct platform_device *pdev)
 		dev_info(&pdev->dev, "%d: Alloc irq: %d\n", count, irq);
 	}
 
-	of_prop = of_get_property(pdev->dev.of_node, "reset-gpio", NULL);
-	if (!of_prop) {
+	/* Find out reset gpio and keep microblaze in reset */
+	local->reset_gpio = of_get_named_gpio(pdev->dev.of_node, "reset", 0);
+	if (local->reset_gpio < 0) {
+		dev_err(&pdev->dev, "reset-gpio property not found\n");
+		return local->reset_gpio;
+	}
+	ret = devm_gpio_request_one(&pdev->dev, local->reset_gpio,
+				    GPIOF_OUT_INIT_HIGH, "mb_reset");
+	if (ret) {
+		dev_err(&pdev->dev, "Please specify gpio reset addr\n");
+		return ret;
+	}
+
+	/* Find out reset gpio and keep microblaze in reset */
+	local->mb_debug_gpio = of_get_named_gpio(pdev->dev.of_node, "debug", 0);
+	if (local->mb_debug_gpio < 0) {
+		dev_err(&pdev->dev, "mb-debug-gpio property not found\n");
+		return local->mb_debug_gpio;
+	}
+	ret = devm_gpio_request_one(&pdev->dev, local->mb_debug_gpio,
+				    GPIOF_OUT_INIT_LOW, "mb_debug");
+	if (ret) {
+		dev_err(&pdev->dev, "Please specify gpio debug pin\n");
+		return ret;
+	}
+
+	/* IPI number for getting irq from firmware */
+	local->ipi = of_get_named_gpio(pdev->dev.of_node, "ipino", 0);
+	if (local->ipi < 0) {
+		dev_err(&pdev->dev, "ipi-gpio property not found\n");
+		return local->ipi;
+	}
+	ret = devm_gpio_request_one(&pdev->dev, local->ipi, GPIOF_IN, "mb_ipi");
+	if (ret) {
+		dev_err(&pdev->dev, "Please specify gpio reset addr\n");
+		return ret;
+	}
+	ret = devm_request_irq(&pdev->dev, gpio_to_irq(local->ipi),
+			       ipi_kick, IRQF_SHARED|IRQF_TRIGGER_RISING,
+			       dev_name(&pdev->dev), local);
+	if (ret) {
+		dev_err(&pdev->dev, "IRQ %d already allocated\n", local->ipi);
+		return ret;
+	}
+
+	/* Find out vring0 pin */
+	local->vring0 = of_get_named_gpio(pdev->dev.of_node, "vring0", 0);
+	if (local->vring0 < 0) {
+		dev_err(&pdev->dev, "reset-gpio property not found\n");
+		return local->vring0;
+	}
+	ret = devm_gpio_request_one(&pdev->dev, local->vring0,
+				    GPIOF_DIR_OUT, "mb_vring0");
+	if (ret) {
 		dev_err(&pdev->dev, "Please specify gpio reset addr\n");
-		return of_prop;
+		return ret;
 	}
 
-	local->gpio_reset_addr = ioremap(be32_to_cpup(of_prop), 0x1000);
-	if (!local->gpio_reset_addr) {
-		dev_err(&pdev->dev, "Reset GPIO ioremap failed\n");
-		return local->gpio_reset_addr;
+	/* Find out vring1 pin */
+	local->vring1 = of_get_named_gpio(pdev->dev.of_node, "vring1", 0);
+	if (local->vring1 < 0) {
+		dev_err(&pdev->dev, "reset-gpio property not found\n");
+		return local->vring1;
+	}
+	ret = devm_gpio_request_one(&pdev->dev, local->vring1,
+				    GPIOF_DIR_OUT, "mb_vring1");
+	if (ret) {
+		dev_err(&pdev->dev, "Please specify gpio reset addr\n");
+		return ret;
 	}
 
-	of_prop = of_get_property(pdev->dev.of_node, "reset-gpio-pin", NULL);
-	if (!of_prop) {
-		dev_err(&pdev->dev, "Please specify cpu number\n");
-		return of_prop;
+	/* Allocate bram device */
+	bram_dev = of_parse_phandle(pdev->dev.of_node, "bram", 0);
+	if (!bram_dev) {
+		dev_err(&pdev->dev, "Please specify bram connection\n");
+		return -ENODEV;
+	}
+	bram_pdev = of_find_device_by_node(bram_dev);
+	if (!bram_pdev) {
+		dev_err(&pdev->dev, "BRAM device hasn't found\n");
+		return -ENODEV;
+	}
+	res = platform_get_resource(bram_pdev, IORESOURCE_MEM, 0);
+	local->vbase = devm_ioremap_resource(&pdev->dev, res);
+	if (!local->vbase) {
+		dev_err(&pdev->dev, "BRAM devm ioremap failed\n");
+		return -ENODEV;
+	}
+
+	/* Load simple bootloader to bram */
+	local->bootloader = of_get_property(pdev->dev.of_node,
+					    "bram-firmware", NULL);
+	if (!local->bootloader) {
+		dev_err(&pdev->dev, "Please specify BRAM firmware\n");
+		return -ENODEV;
 	}
-	local->reset_gpio_pin = be32_to_cpup(of_prop);
 
-	/* Keep mb in reset */
-	*local->gpio_reset_addr |= 1 << local->reset_gpio_pin;
+	dev_info(&pdev->dev, "Using microblaze BRAM bootloader: %s\n",
+		 local->bootloader);
 
 	/* Module param firmware first */
 	if (firmware)
-- 
1.8.3.4

