From 2d2c4ba2754f5a78259fb7a2e1d159f4cd42bf55 Mon Sep 17 00:00:00 2001
From: John Linn <john.linn@xilinx.com>
Date: Thu, 17 Nov 2011 08:46:04 -0800
Subject: [PATCH] Xilinx: ARM: BSP: Updated timer to use device tree

The timer was using hard coded input frequencies and this won't
work on the real chip. It now pulls it's configuration information
from the device tree including the input clock frequency.

This change also allows some backward compatability when the
timer information is not present in the device tree and this should
be removed in the future.

The early vm settings for the timer were also removed as the driver
now uses ioremap. The device tree source and binary were updated to
match.

Conflicts:

	arch/arm/boot/dts/zynq-ep107.dts
	arch/arm/mach-zynq/timer.c
	zynq-ep107.dtb

remove dtb
---
 arch/arm/boot/dts/zynq-ep107.dts |   24 ++++++++++
 arch/arm/mach-zynq/common.c      |    5 --
 arch/arm/mach-zynq/timer.c       |   92 +++++++++++++++++++++++++++++++-------
 3 files changed, 99 insertions(+), 22 deletions(-)

diff --git a/arch/arm/boot/dts/zynq-ep107.dts b/arch/arm/boot/dts/zynq-ep107.dts
index 37ca192..8426d86 100644
--- a/arch/arm/boot/dts/zynq-ep107.dts
+++ b/arch/arm/boot/dts/zynq-ep107.dts
@@ -42,6 +42,30 @@
 			#interrupt-cells = <2>;
 		};
 
+		timer0: timer@0xf8001000 {
+			compatible = "xlnx,ps7-ttc-1.00.a";
+			reg = <0xF8001000 0x1000>;
+			interrupts = <42 0>;
+			clock-frequency = <2500000>;
+		};
+
+		slcr: slcr@f8000000 {
+			compatible = "xlnx,ps7-slcr-1.00.a";
+			reg = <0xF8000000 0x1000>;
+		};
+
+		wdt0: swdt@f8005000 {
+			device_type = "watchdog";
+			compatible = "xlnx,ps7-wdt-1.00.a";
+			reg = <0xF8005000 0x100>;
+		};
+
+		wdt1: scuwdt@f8f00620 {
+			device_type = "watchdog";
+			compatible = "xlnx,ps7-scuwdt-1.00.a";
+			reg = <0xF8F00620 0x20>;
+		};
+
 		uart0: uart@e0000000 {
 			compatible = "xlnx,xuartps";
 			reg = <0xE0000000 0x1000>;
diff --git a/arch/arm/mach-zynq/common.c b/arch/arm/mach-zynq/common.c
index ab5cfdd..a6c78e6 100644
--- a/arch/arm/mach-zynq/common.c
+++ b/arch/arm/mach-zynq/common.c
@@ -69,11 +69,6 @@ static void __init xilinx_irq_init(void)
 
 static struct map_desc io_desc[] __initdata = {
 	{
-		.virtual	= TTC0_VIRT,
-		.pfn		= __phys_to_pfn(TTC0_PHYS),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
 		.virtual	= SCU_PERIPH_VIRT,
 		.pfn		= __phys_to_pfn(SCU_PERIPH_PHYS),
 		.length		= SZ_8K,
diff --git a/arch/arm/mach-zynq/timer.c b/arch/arm/mach-zynq/timer.c
index e084f73..3ffea7f 100644
--- a/arch/arm/mach-zynq/timer.c
+++ b/arch/arm/mach-zynq/timer.c
@@ -23,6 +23,7 @@
 #include <linux/clocksource.h>
 #include <linux/clockchips.h>
 #include <linux/io.h>
+#include <linux/of.h>
 
 #include <asm/mach/time.h>
 #include <asm/smp_twd.h>
@@ -51,6 +52,7 @@
 
 #define XTTCPSS_TIMER_BASE		TTC0_BASE
 #define XTTCPCC_EVENT_TIMER_IRQ		(IRQ_TIMERCOUNTER0 + 1)
+
 /*
  * Timer Register Offset Definitions of Timer 1, Increment base address by 4
  * and use same offsets for Timer 2
@@ -67,9 +69,12 @@
 
 #define XTTCPSS_CNT_CNTRL_DISABLE_MASK	0x1
 
-/* Setup the timers to use pre-scaling */
-
-#define TIMER_RATE (PERIPHERAL_CLOCK_RATE / 32)
+/* Setup the timers to use pre-scaling, using a fixed value for now that will work
+ * across most input frequency, but it may need to be more dynamic
+ */
+#define PRESCALE_EXPONENT 	11	/* 2 ^ PRESCALE_EXPONENT = PRESCALE */
+#define PRESCALE 		2048	/* The exponent must match this */
+#define CLK_CNTRL_PRESCALE (((PRESCALE_EXPONENT - 1) << 1) | 0x1)
 
 /**
  * struct xttcpss_timer - This definition defines local timer structure
@@ -78,6 +83,7 @@
  **/
 struct xttcpss_timer {
 	void __iomem *base_addr;
+	int frequency;
 };
 
 static struct xttcpss_timer timers[2];
@@ -148,12 +154,11 @@ static void __init xttcpss_timer_hardware_init(void)
 	 * with no interrupt and it rolls over at 0xFFFF. Pre-scale
 	   it by 32 also. Let it start running now.
 	 */
-	timers[XTTCPSS_CLOCKSOURCE].base_addr = XTTCPSS_TIMER_BASE;
-
 	__raw_writel(0x0, timers[XTTCPSS_CLOCKSOURCE].base_addr +
 				XTTCPSS_IER_OFFSET);
-	__raw_writel(0x9, timers[XTTCPSS_CLOCKSOURCE].base_addr +
-				XTTCPSS_CLK_CNTRL_OFFSET);
+	__raw_writel(CLK_CNTRL_PRESCALE, 
+			timers[XTTCPSS_CLOCKSOURCE].base_addr +
+			XTTCPSS_CLK_CNTRL_OFFSET);
 	__raw_writel(0x10, timers[XTTCPSS_CLOCKSOURCE].base_addr +
 				XTTCPSS_CNT_CNTRL_OFFSET);
 
@@ -162,18 +167,13 @@ static void __init xttcpss_timer_hardware_init(void)
 	 * disabled for now.
 	 */
 
-	timers[XTTCPSS_CLOCKEVENT].base_addr = XTTCPSS_TIMER_BASE + 4;
-
 	__raw_writel(0x23, timers[XTTCPSS_CLOCKEVENT].base_addr +
 			XTTCPSS_CNT_CNTRL_OFFSET);
-	__raw_writel(0x9, timers[XTTCPSS_CLOCKEVENT].base_addr +
+	__raw_writel(CLK_CNTRL_PRESCALE, 
+			timers[XTTCPSS_CLOCKEVENT].base_addr + 
 			XTTCPSS_CLK_CNTRL_OFFSET);
 	__raw_writel(0x1, timers[XTTCPSS_CLOCKEVENT].base_addr +
 			XTTCPSS_IER_OFFSET);
-
-	/* Setup IRQ the clock event timer */
-	event_timer_irq.dev_id = &timers[XTTCPSS_CLOCKEVENT];
-	setup_irq(XTTCPCC_EVENT_TIMER_IRQ, &event_timer_irq);
 }
 
 /**
@@ -233,7 +233,7 @@ static void xttcpss_set_mode(enum clock_event_mode mode,
 
 	switch (mode) {
 	case CLOCK_EVT_MODE_PERIODIC:
-		xttcpss_set_interval(timer, TIMER_RATE / HZ);
+		xttcpss_set_interval(timer, timer->frequency / HZ);
 		break;
 	case CLOCK_EVT_MODE_ONESHOT:
 	case CLOCK_EVT_MODE_UNUSED:
@@ -273,16 +273,74 @@ static struct clock_event_device xttcpss_clockevent = {
  **/
 static void __init xttcpss_timer_init(void)
 {
+	u32 irq;
+	struct device_node *timer = NULL;
+	void *prop = NULL;
+	u32 timer_baseaddr;
+	const char * const timer_list[] = {
+		"xlnx,ps7-ttc-1.00.a",
+		NULL
+	};
+
 #ifdef CONFIG_HAVE_ARM_TWD
 	twd_base = SCU_CPU_TIMER_BASE;
 #endif
+
+	/* Get the 1st Triple Timer Counter (TTC) block from the device tree
+	 * and use it, but if missing use some defaults for now to help the 
+	 * transition, note that the event timer uses the interrupt and it's the
+	 * 2nd TTC hence the +1 for the interrupt
+	 */
+	timer = of_find_compatible_node(NULL, NULL, timer_list[0]);
+	if (timer) {
+		timer_baseaddr = be32_to_cpup(of_get_property(timer, "reg", NULL));
+		irq = be32_to_cpup(of_get_property(timer, "interrupts", NULL)) + 1;
+		prop = (void *)of_get_property(timer, "clock-frequency", NULL);
+	} else {
+		printk(KERN_ERR "Xilinx, no compatible timer found, using default\n");
+		timer_baseaddr = (u32)TTC0_BASE;
+		irq = IRQ_TIMERCOUNTER0 + 1;
+	}
+
+	/* Map the memory so it's accessible in the page table */
+
+	timer_baseaddr = (u32)ioremap(timer_baseaddr, PAGE_SIZE);
+	timers[XTTCPSS_CLOCKSOURCE].base_addr = (void __iomem *)timer_baseaddr;
+	timers[XTTCPSS_CLOCKEVENT].base_addr = (void __iomem *)timer_baseaddr + 4;
+
+	/* Setup the interrupt realizing that the 2nd timer in the TTC
+	   (used for the event sournce) interrupt number is +1 from the 1st timer
+	 */
+	event_timer_irq.dev_id = &timers[XTTCPSS_CLOCKEVENT];
+	setup_irq(irq, &event_timer_irq);
+
+	printk(KERN_INFO "%s #0 at 0x%08x, irq=%d\n",
+		timer_list[0], timer_baseaddr, irq);
+
+	/* If there is clock-frequency property than use it, otherwise use a default
+	 * that may not be the right timing, but might boot the kernel, the event 
+	 * timer is the only one that needs the frequency, but make them match
+	 */
+	if (prop)
+		timers[XTTCPSS_CLOCKEVENT].frequency = be32_to_cpup(prop) 
+								/ PRESCALE;
+	else {
+		printk(KERN_ERR "Error, no clock-frequency specified for timer\n");
+		timers[XTTCPSS_CLOCKEVENT].frequency = PERIPHERAL_CLOCK_RATE
+							 / PRESCALE;
+	}
+	timers[XTTCPSS_CLOCKSOURCE].frequency = 
+				timers[XTTCPSS_CLOCKEVENT].frequency;
+
 	xttcpss_timer_hardware_init();
-	clocksource_register_hz(&clocksource_xttcpss, TIMER_RATE);
+	clocksource_register_hz(&clocksource_xttcpss,
+				timers[XTTCPSS_CLOCKSOURCE].frequency);
 
 	/* Calculate the parameters to allow the clockevent to operate using
 	   integer math
 	*/
-	clockevents_calc_mult_shift(&xttcpss_clockevent, TIMER_RATE, 4);
+	clockevents_calc_mult_shift(&xttcpss_clockevent, 
+				timers[XTTCPSS_CLOCKEVENT].frequency, 4);
 
 	xttcpss_clockevent.max_delta_ns =
 		clockevent_delta2ns(0xfffe, &xttcpss_clockevent);
-- 
1.7.0.4

