From e345a528e978bd16fdc2f600cf15c87a5774a508 Mon Sep 17 00:00:00 2001
From: John Williams <john.williams@petalogix.com>
Date: Mon, 14 Mar 2011 13:54:41 +1000
Subject: [PATCH] powerpc: simpleboot: Allow for passing an alternative DTB via r3 at boot

In certain circumstances, particularly under QEMU emulation where certain
devices are removed from the DTB, it is useful to pass a custom DTB via r3
to the simpleboot wrapper.

This fix checks to see if r3 points to a valid DTB, and uses that if so.

Otherwise, the linked-in DTB is used, as per previous behaviour.

Signed-off-by: John Williams <john.williams@petalogix.com>
---
 arch/powerpc/boot/simpleboot.c |   23 ++++++++++++++---------
 1 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/arch/powerpc/boot/simpleboot.c b/arch/powerpc/boot/simpleboot.c
index 21cd480..50122bb 100644
--- a/arch/powerpc/boot/simpleboot.c
+++ b/arch/powerpc/boot/simpleboot.c
@@ -31,28 +31,33 @@ void platform_init(unsigned long r3, unsigned long r4, unsigned long r5,
 	const u32 *na, *ns, *reg, *timebase;
 	u64 memsize64;
 	int node, size, i;
+	void *the_dtb = _dtb_start;
+
+	/* See if we were passed a DTB in the regs.  If so, use that instead */
+	if (fdt_check_header((void *)r3) == 0)
+		the_dtb = (void *)r3;
 
 	/* Make sure FDT blob is sane */
-	if (fdt_check_header(_dtb_start) != 0)
+	if (fdt_check_header(the_dtb) != 0)
 		fatal("Invalid device tree blob\n");
 
 	/* Find the #address-cells and #size-cells properties */
-	node = fdt_path_offset(_dtb_start, "/");
+	node = fdt_path_offset(the_dtb, "/");
 	if (node < 0)
 		fatal("Cannot find root node\n");
-	na = fdt_getprop(_dtb_start, node, "#address-cells", &size);
+	na = fdt_getprop(the_dtb, node, "#address-cells", &size);
 	if (!na || (size != 4))
 		fatal("Cannot find #address-cells property");
-	ns = fdt_getprop(_dtb_start, node, "#size-cells", &size);
+	ns = fdt_getprop(the_dtb, node, "#size-cells", &size);
 	if (!ns || (size != 4))
 		fatal("Cannot find #size-cells property");
 
 	/* Find the memory range */
-	node = fdt_node_offset_by_prop_value(_dtb_start, -1, "device_type",
+	node = fdt_node_offset_by_prop_value(the_dtb, -1, "device_type",
 					     "memory", sizeof("memory"));
 	if (node < 0)
 		fatal("Cannot find memory node\n");
-	reg = fdt_getprop(_dtb_start, node, "reg", &size);
+	reg = fdt_getprop(the_dtb, node, "reg", &size);
 	if (size < (*na+*ns) * sizeof(u32))
 		fatal("cannot get memory range\n");
 
@@ -69,11 +74,11 @@ void platform_init(unsigned long r3, unsigned long r4, unsigned long r5,
 		memsize64 = 0xffffffff;
 
 	/* finally, setup the timebase */
-	node = fdt_node_offset_by_prop_value(_dtb_start, -1, "device_type",
+	node = fdt_node_offset_by_prop_value(the_dtb, -1, "device_type",
 					     "cpu", sizeof("cpu"));
 	if (!node)
 		fatal("Cannot find cpu node\n");
-	timebase = fdt_getprop(_dtb_start, node, "timebase-frequency", &size);
+	timebase = fdt_getprop(the_dtb, node, "timebase-frequency", &size);
 	if (timebase && (size == 4))
 		timebase_period_ns = 1000000000 / *timebase;
 
@@ -81,7 +86,7 @@ void platform_init(unsigned long r3, unsigned long r4, unsigned long r5,
 	simple_alloc_init(_end, memsize64 - (unsigned long)_end, 32, 64);
 
 	/* prepare the device tree and find the console */
-	fdt_init(_dtb_start);
+	fdt_init(the_dtb);
 
 	if (platform_specific_init)
 		platform_specific_init();
-- 
1.7.0.4

