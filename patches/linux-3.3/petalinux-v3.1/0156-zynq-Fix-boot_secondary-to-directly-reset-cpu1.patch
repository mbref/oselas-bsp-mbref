From 61746d965796f88e3bfc49da2267cea006471269 Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Mon, 16 Apr 2012 09:54:47 +0200
Subject: [PATCH] zynq: Fix boot_secondary to directly reset cpu1

Do not use any expectations from bootloader setup.
Reset cpu1 directly via SLCR registers which must
be separately mapped because SLCR driver is probed
later.
Also map 0x0-0x0xb addresses for jump trampoline.

Based on the patch
ARM: SMP: use a timing out completion for cpu hotplug
(sha1: 75349086923783f02f79f978b9d3b32510681bd1)

is possible to remove all timing code from Zynq smp bootup code.
Generic code will be responsible for.

If cpu is already released cpu_down returns EBUSY.

Signed-off-by: Michal Simek <monstr@monstr.eu>
---
 arch/arm/mach-zynq/include/mach/system.h |    2 +-
 arch/arm/mach-zynq/platsmp.c             |  107 ++++++++++++++++++++++--------
 drivers/remoteproc/Kconfig               |    1 +
 drivers/remoteproc/zynq_remoteproc.c     |   31 +++++++--
 4 files changed, 108 insertions(+), 33 deletions(-)

diff --git a/arch/arm/mach-zynq/include/mach/system.h b/arch/arm/mach-zynq/include/mach/system.h
index d597efc..1daa48e 100644
--- a/arch/arm/mach-zynq/include/mach/system.h
+++ b/arch/arm/mach-zynq/include/mach/system.h
@@ -20,6 +20,6 @@ static inline void arch_idle(void)
 	cpu_do_idle();
 }
 
-extern void zynq_cpu1_start(u32 status, u32 addr);
+extern int zynq_cpu1_start(u32 address);
 
 #endif
diff --git a/arch/arm/mach-zynq/platsmp.c b/arch/arm/mach-zynq/platsmp.c
index 93da503..7f3ae25 100644
--- a/arch/arm/mach-zynq/platsmp.c
+++ b/arch/arm/mach-zynq/platsmp.c
@@ -48,8 +48,6 @@ void __cpuinit platform_secondary_init(unsigned int cpu)
 	/* Indicate to the primary core that the secondary is up and running.
 	 * Let the write buffer drain.
 	 */
-	__raw_writel(BOOT_STATUS_CPU1_UP, OCM_HIGH_BASE + BOOT_STATUS_OFFSET);
-	wmb();
 
 	/*
 	 * Synchronise with the boot thread.
@@ -58,27 +56,75 @@ void __cpuinit platform_secondary_init(unsigned int cpu)
 	spin_unlock(&boot_lock);
 }
 
-void zynq_cpu1_start(u32 status, u32 addr)
-{
-	/* Initialize the boot status and give the secondary core
-	 * the start address of the kernel, let the write buffer drain
-	 */
-	__raw_writel(status, OCM_HIGH_BASE + BOOT_STATUS_OFFSET);
+/* Store pointer to ioremap area which points to address 0x0 */
+static u8 *zero;
 
-	__raw_writel(addr, OCM_HIGH_BASE + BOOT_ADDR_OFFSET);
+/*
+ * Store pointer to SLCR registers. SLCR driver can't be used because
+ * it is not initialized yet and this code is used for bootup the second CPU
+ */
+#define SLCR_UNLOCK	0xDF0D
+#define SLCR_LOCK	0x767B
 
-	wmb();
+static u8 *slcr;
 
-	/*
-	 * Send an event to wake the secondary core from WFE state.
-	 */
-	sev();
+int zynq_cpu1_start(u32 address)
+{
+	if (!slcr) {
+		printk(KERN_INFO "Map SLCR registers\n");
+		/* Remap the SLCR registers to be able to work with cpu1 */
+		slcr = ioremap(0xF8000000, PAGE_SIZE);
+		if (!slcr) {
+			printk(KERN_WARNING
+				"!!!! SLCR jump vectors can't be used !!!!\n");
+			return -1;
+		}
+	}
+
+	/* MS: Expectation that SLCR are directly map and accessible */
+	/* Not possible to jump to non aligned address */
+	if (!(address & 3) && (!address || (address >= 0xC))) {
+		__raw_writel(SLCR_UNLOCK, slcr + 0x8); /* UNLOCK SLCR */
+		__raw_writel(0x22, slcr + 0x244); /* stop CLK and reset CPU1 */
+	
+		/*
+		 * This is elegant way how to jump to any address
+		 * 0x0: Load address at 0x8 to r0
+		 * 0x4: Jump by mov instruction
+		 * 0x8: Jumping address
+		 */
+		if (address && address >= 0xC) {
+			if (!zero) {
+				printk(KERN_WARNING
+					"BOOTUP jump vectors is not mapped!\n");
+				return -1;
+			}
+			__raw_writel(0xe59f0000, zero + 0x0);/* 0:ldr r0, [8] */
+			__raw_writel(0xe1a0f000, zero + 0x4);/* 4:mov pc, r0 */
+			__raw_writel(address, zero + 0x8);/* 8:.word address */
+		}
+	
+		flush_cache_all();
+		outer_flush_all();
+		wmb();
+	
+		__raw_writel(0x20, slcr + 0x244); /* enable CPU1 */
+		__raw_writel(0x0, slcr + 0x244); /* enable CLK for CPU1 */
+		__raw_writel(SLCR_LOCK, slcr + 0x4); /* LOCK SLCR */
+
+		return 0;
+	}
+
+	printk(KERN_WARNING "Can't start CPU1: Wrong starting address %x\n",
+								address);
+
+	return -1;
 }
 EXPORT_SYMBOL(zynq_cpu1_start);
 
 int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 {
-	unsigned long timeout;
+	int ret;
 
 	/*
 	 * set synchronisation state between this boot processor
@@ -86,16 +132,9 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 	 */
 	spin_lock(&boot_lock);
 
-	zynq_cpu1_start(0, virt_to_phys(secondary_startup));
-
-	/*
-	 * Wait for the other CPU to boot, but timeout if it doesn't
-	 */
-	timeout = jiffies + (1 * HZ);
-	while ((__raw_readl(OCM_HIGH_BASE + BOOT_STATUS_OFFSET) !=
-				BOOT_STATUS_CPU1_UP) &&
-				(time_before(jiffies, timeout)))
-		rmb();
+	ret = zynq_cpu1_start(virt_to_phys(secondary_startup));
+	if (ret)
+		return -1;
 
 	/*
 	 * now the secondary core is starting up let it run its
@@ -127,6 +166,15 @@ void __init platform_smp_prepare_cpus(unsigned int max_cpus)
 	int i;
 
 	/*
+	 * Remap the first three addresses at zero which are used
+	 * for 32bit long jump for SMP. Look at zynq_cpu1_start()
+	 */
+	zero = ioremap(0, 12);
+	if (!zero)
+		printk(KERN_WARNING
+			"!!!! BOOTUP jump vectors can't be used !!!!\n");
+
+	/*
 	 * Initialise the present map, which describes the set of CPUs
 	 * actually populated at the present time.
 	 */
@@ -139,7 +187,9 @@ void __init platform_smp_prepare_cpus(unsigned int max_cpus)
 /* hotplug part */
 int platform_cpu_kill(unsigned int cpu)
 {
-        return 1;
+	printk(KERN_DEBUG "%s cpu %d %d\n", __func__, cpu, smp_processor_id());
+
+	return 1;
 }
 
 /*
@@ -150,15 +200,18 @@ void platform_cpu_die(unsigned int cpu)
 {
 	flush_cache_all();
 
+	printk(KERN_DEBUG "%s cpu %d %d\n", __func__, cpu, smp_processor_id());
+
 	while(1);
 }
 
 int platform_cpu_disable(unsigned int cpu)
 {
+	printk(KERN_DEBUG "%s cpu %d %d\n", __func__, cpu, smp_processor_id());
+
         /*
          * we don't allow CPU 0 to be shutdown (it is still too special
          * e.g. clock tick interrupts)
          */
         return cpu == 0 ? -EPERM : 0;
 }
-
diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index e4d4242..74456d9 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -44,6 +44,7 @@ config ZYNQ_REMOTEPROC
 	select REMOTEPROC
 	select RPMSG
 	select SMP
+	select HOTPLUG_CPU
 	default m
 	help
 	  Say y here to support Xilinx ZynQ remote processors (the second
diff --git a/drivers/remoteproc/zynq_remoteproc.c b/drivers/remoteproc/zynq_remoteproc.c
index 4ddd69a..fec42a7 100644
--- a/drivers/remoteproc/zynq_remoteproc.c
+++ b/drivers/remoteproc/zynq_remoteproc.c
@@ -33,6 +33,7 @@
 #include <asm/outercache.h>
 #include <mach/system.h>
 #include <linux/slab.h>
+#include <linux/cpu.h>
 
 #include "remoteproc_internal.h"
 
@@ -80,6 +81,7 @@ static int zynq_rproc_start(struct rproc *rproc)
 {
 	struct platform_device *pdev = to_platform_device(rproc->dev);
 	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+	int ret;
 
 	dev_dbg(rproc->dev, "%s\n", __func__);
 	INIT_WORK(&workqueue, handle_event);
@@ -87,9 +89,9 @@ static int zynq_rproc_start(struct rproc *rproc)
 	outer_flush_range(local->mem_start, local->mem_end);
 
 	remoteprocdev = pdev;
-	zynq_cpu1_start(0, 0);
+	ret = zynq_cpu1_start(0);
 
-	return 0;
+	return ret;
 }
 
 /* kick a firmware */
@@ -154,9 +156,16 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 	int ret = 0;
 	struct irq_list *tmp;
 	int count;
+	struct zynq_rproc_pdata *local;
+
+	ret = cpu_down(1);
+	/* EBUSY means CPU is already released */
+	if (ret && (ret != -EBUSY)) {
+		dev_err(&pdev->dev, "Can't release cpu1\n");
+		return -ENOMEM;
+	}
 
-	struct zynq_rproc_pdata *local = kzalloc(
-				sizeof(struct zynq_rproc_pdata), GFP_KERNEL);
+	local = kzalloc(sizeof(struct zynq_rproc_pdata), GFP_KERNEL);
 	if (!local) {
 		dev_err(&pdev->dev, "Unable to alloc private data\n");
 		return -ENOMEM;
@@ -280,6 +289,7 @@ irq_fault:
 static int __devexit zynq_remoteproc_remove(struct platform_device *pdev)
 {
 	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+	u32 ret;
 
 	dev_info(&pdev->dev, "%s\n", __func__);
 
@@ -288,7 +298,18 @@ static int __devexit zynq_remoteproc_remove(struct platform_device *pdev)
 	clear_ipi_handler(local->ipino);
 	clear_irq(pdev);
 
-	return rproc_unregister(local->rproc);
+	ret = rproc_unregister(local->rproc);
+	if (ret) {
+		dev_err(&pdev->dev, "Can't unregistered rproc\n");
+		return -1;
+	}
+
+	/* Cpu can't be power on - for example in nosmp mode */
+	ret = cpu_up(1);
+	if (ret)
+		dev_err(&pdev->dev, "Can't power on cpu1 %d\n", ret);
+
+	return 0;
 }
 
 /* Match table for OF platform binding */
-- 
1.7.0.4

