From b02dd15e0f13c82034cd8e87109cd2f62a901d79 Mon Sep 17 00:00:00 2001
From: John Linn <john.linn@xilinx.com>
Date: Wed, 4 Jan 2012 15:09:45 -0800
Subject: [PATCH] Xilinx: AXI EMAC: Additional MDIO clock functionality

The MDIO clock was previously hard coded and it is now
calculated thanks to a patch from the community.

Modify the Xilinx patch to get the clock frequency from
the connected AXI bus instead of the CPU.

Signed-off-by: Wendy Liang <wendy.liang@petalogix.com>

Signed-off-by: Nico Augustijn <Nico.Augustijn@Adeas.nl>
---
 drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c |   78 +++++++++++++++++----
 1 files changed, 65 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c b/drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c
index b082bc2..961e688 100755
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c
@@ -4,9 +4,6 @@
  * Copyright (c) 2009 Secret Lab Technologies, Ltd.
  * Copyright (c) 2010 Xilinx, Inc. All rights reserved.
  *
- * TODO:
- * - Fix the clock divisor issue. Currently it is hard-coded in
- *   the function axienet_mdio_setup.
  */
 
 #include <linux/of_address.h>
@@ -14,6 +11,10 @@
 
 #include "xilinx_axienet.h"
 
+#define MAX_MDIO_FREQ	   2500000 /* 2.5 MHz */
+#define CLOCK_FREQ_PROP_NAME    "clock-frequency"
+#define DEFAULT_CLOCK_DIVISOR   29 /* If all else fails, fallback to this */
+
 /* ----------------------------------------------------------------------------
  * MDIO Bus functions
  */
@@ -135,6 +136,7 @@ static int axienet_mdio_write(struct mii_bus *bus, int phy_id, int reg,
  * Sets up the MDIO interface by initializing the MDIO clock and enabling the
  * MDIO interface in hardware. Register the MDIO interface.
  **/
+
 int axienet_mdio_setup(struct axienet_local *lp, struct device_node *np)
 {
 	struct mii_bus *bus;
@@ -142,16 +144,66 @@ int axienet_mdio_setup(struct axienet_local *lp, struct device_node *np)
 	struct resource res;
 	u32 clk_div;
 	long end = jiffies + 2;
-	struct device_node *np1 = of_get_parent(lp->phy_node);
-
-	/* Calculate a reasonable divisor for the clock rate. Currently it is
-	 * hard-coded to a value of 29. This means for a clock-frequency of
-	 * 50 MHz, the MDIO clock frequency will be 0.833 MHz, for 100 MHz, it
-	 * would be 1.667 MHz and so on. As per IEEE standards, the max MDIO
-	 * clock can be 2.5 MHz.Hence for a clock frequency of more than
-	 * 125 MHz, this hard-coded value will not work. Ideally the clk
-	 * divisor needs to be calculated at runtime. */
-	clk_div = 29;
+	struct device_node *np1; /* The parent of the device node */
+	struct device_node *npp = 0; /* the ethernet controller device node */
+
+	/* clk_div can be calculated by deriving it from the equation:
+	 * fMDIO = fHOST / ((1 + clk_div) * 2)
+	 *
+	 * Where fMDIO <= 2500000, so we get:
+	 * fHOST / ((1 + clk_div) * 2) <= 2500000
+	 *
+	 * Then we get:
+	 * 1 / ((1 + clk_div) * 2) <= (2500000 / fHOST)
+	 *
+	 * Then we get:
+	 * 1 / (1 + clk_div) <= ((2500000 * 2) / fHOST)
+	 *
+	 * Then we get:
+	 * 1 / (1 + clk_div) <= (5000000 / fHOST)
+	 *
+	 * So:
+	 * (1 + clk_div) >= (fHOST / 5000000)
+	 *
+	 * And finally:
+	 * clk_div >= (fHOST / 5000000) - 1
+	 *
+	 * fHOST can be read from the flattened device tree as property "clock-frequency"
+	 * from the CPU
+	 */
+	np1 = of_get_parent(lp->phy_node);
+	if (np1) {
+		npp = of_get_parent(np1);
+	}
+	if(!npp) {
+		printk(KERN_WARNING "%s(): Could not find ethernet controller device node.", __FUNCTION__);
+		printk(KERN_WARNING "Setting MDIO clock divisor to default %d\n",
+		       DEFAULT_CLOCK_DIVISOR);
+		clk_div = DEFAULT_CLOCK_DIVISOR;
+	} else {
+		u32 *property_p;
+
+		property_p = (uint32_t *)of_get_property(npp, CLOCK_FREQ_PROP_NAME, NULL);
+		if(!property_p) {
+			printk(KERN_WARNING "%s(): Could not find ethernet controller property %s.",
+			       __FUNCTION__, CLOCK_FREQ_PROP_NAME);
+			printk(KERN_WARNING "Setting MDIO clock divisor to default %d\n",
+			       DEFAULT_CLOCK_DIVISOR);
+			clk_div = DEFAULT_CLOCK_DIVISOR;
+		} else {
+			u32 host_clock = be32_to_cpup(property_p);
+
+			clk_div = (host_clock / (MAX_MDIO_FREQ * 2)) - 1;
+
+			/* If there is any remainder from the division of fHOST / (MAX_MDIO_FREQ * 2),
+			 * then we need to add 1 to the clock divisor or we will surely be
+			 * above 2.5 MHz */
+			if(host_clock % (MAX_MDIO_FREQ * 2))
+				clk_div++;
+			printk(KERN_DEBUG "%s(): Setting MDIO clock divisor to %u based on %u Hz host clock.\n",
+			       __FUNCTION__, clk_div, host_clock);
+		}
+	}
 
 	axienet_iow(lp, XAE_MDIO_MC_OFFSET, (((u32)clk_div) |
 						XAE_MDIO_MC_MDIOEN_MASK));
-- 
1.7.0.4

