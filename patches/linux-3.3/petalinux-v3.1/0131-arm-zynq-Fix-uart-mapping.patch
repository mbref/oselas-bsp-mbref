From b69b013e7408a812075905e99d531ccf1bc84769 Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Tue, 13 Mar 2012 13:11:30 +0100
Subject: [PATCH] arm: zynq: Fix uart mapping

ZC702 uses the second uart. We need to consider
to changing this to more flexible state.

Offset 0x800000 is there just because virtual address
should be in vmalloc area.

Signed-off-by: Michal Simek <monstr@monstr.eu>
---
 arch/arm/mach-zynq/common.c                |    4 ++--
 arch/arm/mach-zynq/include/mach/zynq_soc.h |   12 +++++++++---
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-zynq/common.c b/arch/arm/mach-zynq/common.c
index 1b886cd..03bc733 100644
--- a/arch/arm/mach-zynq/common.c
+++ b/arch/arm/mach-zynq/common.c
@@ -105,8 +105,8 @@ static struct map_desc io_desc[] __initdata = {
 	},
 #ifdef CONFIG_DEBUG_LL
 	{
-		.virtual	= UART0_VIRT,
-		.pfn		= __phys_to_pfn(UART0_PHYS),
+		.virtual	= LL_UART_VADDR,
+		.pfn		= __phys_to_pfn(LL_UART_PADDR),
 		.length		= SZ_4K,
 		.type		= MT_DEVICE,
 	},
diff --git a/arch/arm/mach-zynq/include/mach/zynq_soc.h b/arch/arm/mach-zynq/include/mach/zynq_soc.h
index 42a4881..ffd5255 100644
--- a/arch/arm/mach-zynq/include/mach/zynq_soc.h
+++ b/arch/arm/mach-zynq/include/mach/zynq_soc.h
@@ -19,8 +19,14 @@
 
 /* For now, all mappings are flat (physical = virtual)
  */
+
+/* Virtual address must be inside vmalloc area - this is weird - better
+ * to create virtual mapping on the fly */
 #define UART0_PHYS			0xE0000000
-#define UART0_VIRT			UART0_PHYS
+#define UART0_VIRT			UART0_PHYS + 0x800000
+
+#define UART1_PHYS			0xE0001000
+#define UART1_VIRT			UART1_PHYS + 0x800000
 
 #define TTC0_PHYS			0xF8001000
 #define TTC0_VIRT			TTC0_PHYS
@@ -43,8 +49,8 @@
 /*
  * Mandatory for CONFIG_LL_DEBUG, UART is mapped virtual = physical
  */
-#define LL_UART_PADDR	UART0_PHYS
-#define LL_UART_VADDR	UART0_VIRT
+#define LL_UART_PADDR	UART1_PHYS
+#define LL_UART_VADDR	UART1_VIRT
 
 
 /* There are two OCM addresses needed for communication between CPUs in SMP.
-- 
1.7.0.4

