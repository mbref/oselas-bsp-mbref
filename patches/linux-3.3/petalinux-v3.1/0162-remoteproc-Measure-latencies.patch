From 359a5b0b339684a0f6cc27678e5c69e426c1fa04 Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Wed, 11 Apr 2012 13:54:16 +0200
Subject: [PATCH] remoteproc: Measure latencies

Code for measuring latencies. Uncomment LATENCY macro.
It uses TTC and jiffies.

Probe driver with latency=1 for enabling latency measuring.
modprobe rpmsg-server-sample latency=1

Also comment print_hex_dump because it is written to log
buffer and kernel messages can break level and dump will be shown.

Signed-off-by: Michal Simek <monstr@monstr.eu>
---
 drivers/rpmsg/rpmsg_server_sample.c |  112 ++++++++++++++++++++++++++++++----
 drivers/rpmsg/virtio_rpmsg_bus.c    |    8 +-
 2 files changed, 102 insertions(+), 18 deletions(-)

diff --git a/drivers/rpmsg/rpmsg_server_sample.c b/drivers/rpmsg/rpmsg_server_sample.c
index 838b25c..669d9df 100644
--- a/drivers/rpmsg/rpmsg_server_sample.c
+++ b/drivers/rpmsg/rpmsg_server_sample.c
@@ -17,29 +17,94 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/rpmsg.h>
+#include <linux/io.h>
 
 #define MSG		("hello world!")
 #define MSG_LIMIT	100
 
+#define MSG_LAT		("12345678901234567890123456789012345678901234567890"\
+			"12345678901234567890123456789012345678901234567890"\
+			"12345678901234567890123456789012345678901234567890"\
+			"12345678901234567890123456789012345678901234567890"\
+			"12345678901234567890123456789012345678901234567890"\
+			"12345678901234567890123456789012345678901234567890"\
+			"12345678901234567890123456789012345678901234567890"\
+			"12345678901234567890123456789012345678901234567890"\
+			"12345678901234567890123456789012345678901234567890"\
+			"123456789012345678901234567890123456789012345")
+#define MSG_LAT_LIMIT	100000
+
+u64 start; /* variable for storing jiffies */
+
+/* TTC runs on 133 MHz - (1 / 133000000 = 8 ns) */
+#define TTC_HZ	8
+
+/* ttc ioremap pointer */
+u8 *ttc_base;
+
+/* Enable/disable latency measuring */
+static int latency;
+
 static void rpmsg_sample_cb(struct rpmsg_channel *rpdev, void *data, int len,
 						void *priv, u32 src)
 {
 	int err;
 	static int rx_count;
 
-	dev_info(&rpdev->dev, "incoming msg %d (src: 0x%x)\n", ++rx_count, src);
-
-	print_hex_dump(KERN_DEBUG, __func__, DUMP_PREFIX_NONE, 16, 1,
-		       data, len,  true);
-
-	/* samples should not live forever */
-	if (rx_count >= MSG_LIMIT) {
-		dev_info(&rpdev->dev, "goodbye!\n");
-		return;
+	if (latency) {
+		static u32 min = 0x10000000;
+		static u32 max;
+		static u32 average;
+
+		u32 value = __raw_readl(ttc_base + 0x1c); /* Read value */
+		__raw_writel(0x11, ttc_base + 0x10); /* Stop TTC */
+
+		if (value < min)
+			min = value;
+		if (value > max)
+			max = value;
+
+		average += value;
+		/* count messages */
+		++rx_count;
+
+		if (rx_count >= MSG_LAT_LIMIT) {
+			u64 end = get_jiffies_64();
+			u32 time = end - start;
+			u32 timeps = ((1000000 / MSG_LAT_LIMIT) * time) / HZ;
+
+			printk(KERN_INFO "actual value %d ns, min %d ns, max %d"
+				" ns, average %d ns\n", value * TTC_HZ,
+						min * TTC_HZ, max * TTC_HZ,
+						(average/rx_count) * TTC_HZ);
+			printk(KERN_INFO "Start/end jiffies %llx/%llx, "
+				"messages %d. Time: %d s, "
+				"Messages per second %d\n", end, start,
+				rx_count, time/HZ,
+				1000000 / timeps);
+
+			dev_info(&rpdev->dev, "goodbye!\n");
+			return;
+		}
+
+		__raw_writel(0x10, ttc_base + 0x10); /* Start TTC */
+		/* reply */
+		err = rpmsg_sendto(rpdev, MSG_LAT, strlen(MSG_LAT), src);
+	} else {
+		dev_info(&rpdev->dev, "incoming msg %d (src: 0x%x)\n",
+							++rx_count, src);
+		print_hex_dump(KERN_DEBUG, __func__, DUMP_PREFIX_NONE, 16, 1,
+			data, len,  true);
+
+		/* samples should not live forever */
+		if (rx_count >= MSG_LIMIT) {
+			dev_info(&rpdev->dev, "goodbye!\n");
+			return;
+		}
+
+		err = rpmsg_sendto(rpdev, MSG, strlen(MSG), src); /* reply */
 	}
 
-	/* reply */
-	err = rpmsg_sendto(rpdev, MSG, strlen(MSG), src);
 	if (err)
 		pr_err("rpmsg_send failed: %d\n", err);
 }
@@ -48,10 +113,26 @@ static int rpmsg_sample_probe(struct rpmsg_channel *rpdev)
 {
 	int err;
 
-	dev_info(&rpdev->dev, "new channel: 0x%x -> 0x%x!\n",
-			rpdev->src, rpdev->dst);
+	if (latency) {
+		dev_info(&rpdev->dev, "new channel: 0x%x -> 0x%x!, len %d\n",
+				rpdev->src, rpdev->dst, strlen(MSG_LAT));
+
+		ttc_base = ioremap(0xf8002000, PAGE_SIZE); /* TTC base addr */
+		if (!ttc_base) {
+			pr_err("TTC Ioremap failed\n");
+			return -1;
+		}
+		start = get_jiffies_64();
+		__raw_writel(0x10, ttc_base + 0x10); /* Start TTC */
+
+		err = rpmsg_sendto(rpdev, MSG_LAT, strlen(MSG_LAT), 50);
+	} else {
+		dev_info(&rpdev->dev, "new channel: 0x%x -> 0x%x!, len %d\n",
+				rpdev->src, rpdev->dst, strlen(MSG));
+
+		err = rpmsg_sendto(rpdev, MSG, strlen(MSG), 50);
+	}
 
-	err = rpmsg_sendto(rpdev, MSG, strlen(MSG), 50);
 	if (err) {
 		pr_err("rpmsg_send failed: %d\n", err);
 		return err;
@@ -92,5 +173,8 @@ static void __exit fini(void)
 module_init(init);
 module_exit(fini);
 
+module_param(latency, int, 0);
+MODULE_PARM_DESC(latency, "Enable latency measuring code.");
+
 MODULE_DESCRIPTION("Virtio remote processor messaging sample driver");
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/rpmsg/virtio_rpmsg_bus.c b/drivers/rpmsg/virtio_rpmsg_bus.c
index 5facc15..1949d02 100644
--- a/drivers/rpmsg/virtio_rpmsg_bus.c
+++ b/drivers/rpmsg/virtio_rpmsg_bus.c
@@ -730,9 +730,9 @@ int rpmsg_send_offchannel_raw(struct rpmsg_channel *rpdev, u32 src, u32 dst,
 	dev_dbg(dev, "TX From 0x%x, To 0x%x, Len %d, Flags %d, Reserved %d\n",
 					msg->src, msg->dst, msg->len,
 					msg->flags, msg->reserved);
-	print_hex_dump(KERN_DEBUG, "rpmsg_virtio TX: ", DUMP_PREFIX_NONE, 16, 1,
+/*	print_hex_dump(KERN_DEBUG, "rpmsg_virtio TX: ", DUMP_PREFIX_NONE, 16, 1,
 					msg, sizeof(*msg) + msg->len, true);
-
+*/
 	sg_init_one(&sg, msg, sizeof(*msg) + len);
 
 	mutex_lock(&vrp->tx_lock);
@@ -779,9 +779,9 @@ static void rpmsg_recv_done(struct virtqueue *rvq)
 	dev_dbg(dev, "From: 0x%x, To: 0x%x, Len: %d, Flags: %d, Reserved: %d\n",
 					msg->src, msg->dst, msg->len,
 					msg->flags, msg->reserved);
-	print_hex_dump(KERN_DEBUG, "rpmsg_virtio RX: ", DUMP_PREFIX_NONE, 16, 1,
+/*	print_hex_dump(KERN_DEBUG, "rpmsg_virtio RX: ", DUMP_PREFIX_NONE, 16, 1,
 					msg, sizeof(*msg) + msg->len, true);
-
+*/
 	/* use the dst addr to fetch the callback of the appropriate user */
 	mutex_lock(&vrp->endpoints_lock);
 	ept = idr_find(&vrp->endpoints, msg->dst);
-- 
1.7.0.4

