From 5b19fa19d758193edcb3fca287e2d8ddc4213e18 Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xhd-epdswlin32re1.(none)>
Date: Tue, 10 May 2011 16:26:50 +0530
Subject: [PATCH] Xilinx: Axi Ethernet Driver: Added ethtool support

Updated the Axi Ethernet driver with ethtool support. This required adding
several functions to the driver.

Signed-off-by: Anirudha anirudh@xilinx.com
---
 drivers/net/ethernet/xilinx/xilinx_axienet.h      |    9 +
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c |  420 ++++++++++++++++++++-
 2 files changed, 424 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet.h b/drivers/net/ethernet/xilinx/xilinx_axienet.h
index fc00d19..736ddca 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet.h
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet.h
@@ -166,6 +166,7 @@
 #define XAE_UAWU_OFFSET		0x00000024 /* Unicast address word upper */
 #define XAE_TPID0_OFFSET	0x00000028 /* VLAN TPID0 register */
 #define XAE_TPID1_OFFSET	0x0000002C /* VLAN TPID1 register */
+#define XAE_PPST_OFFSET		0x00000030 /* PCS PMA Soft Temac Status Reg */
 #define XAE_RCW0_OFFSET		0x00000400 /* Rx Configuration Word 0 */
 #define XAE_RCW1_OFFSET		0x00000404 /* Rx Configuration Word 1 */
 #define XAE_TC_OFFSET		0x00000408 /* Tx Configuration */
@@ -385,6 +386,8 @@
 #define XAE_FEATURE_FULL_RX_CSUM	(1 << 2)
 #define XAE_FEATURE_FULL_TX_CSUM	(1 << 3)
 
+#define XAE_NO_CSUM_OFFLOAD		0
+
 #define XAE_FULL_CSUM_STATUS_MASK	0x00000038
 #define XAE_IP_UDP_CSUM_VALIDATED	0x00000003
 #define XAE_IP_TCP_CSUM_VALIDATED	0x00000002
@@ -508,6 +511,12 @@ struct axienet_local {
 	int max_frm_size;
 	int jumbo_support;
 
+	int csum_offload_on_tx_path;
+	int csum_offload_on_rx_path;
+
+	u32 coalesce_count_rx;
+	u32 coalesce_count_tx;
+
 };
 
 /**
diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 936d94a..800e76e 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -29,6 +29,7 @@
 #include <linux/skbuff.h>
 #include <linux/spinlock.h>
 #include <linux/phy.h>
+#include <linux/mii.h>
 
 #include "xilinx_axienet.h"
 
@@ -36,6 +37,13 @@
 #define TX_BD_NUM	64
 #define RX_BD_NUM	128
 
+/* Must be shorter than length of ethtool_drvinfo.driver field to fit */
+#define DRIVER_NAME		"xaxienet"
+#define DRIVER_DESCRIPTION	"Xilinx Axi Ethernet driver"
+#define DRIVER_VERSION		"1.00a"
+
+#define AXIENET_REGS_N	32
+
 /* Match table for of_platform binding */
 static struct of_device_id axienet_of_match[] __devinitdata = {
 	{ .compatible = "xlnx,axi-ethernet-1.00.a", },
@@ -296,7 +304,7 @@ static int axienet_dma_bd_init(struct net_device *ndev)
 
 	/* Update the interrupt coalesce count */
 	cr = ((cr & ~XAXIDMA_COALESCE_MASK) |
-		(XAXIDMA_DFT_RX_THRESHOLD << XAXIDMA_COALESCE_SHIFT));
+			((lp->coalesce_count_rx) << XAXIDMA_COALESCE_SHIFT));
 
 	/* Update the delay timer count */
 	cr = ((cr & ~XAXIDMA_DELAY_MASK) |
@@ -313,7 +321,7 @@ static int axienet_dma_bd_init(struct net_device *ndev)
 
 	/* Update the interrupt coalesce count */
 	cr = (((cr & ~XAXIDMA_COALESCE_MASK)) |
-		(XAXIDMA_DFT_TX_THRESHOLD << XAXIDMA_COALESCE_SHIFT));
+			((lp->coalesce_count_tx) << XAXIDMA_COALESCE_SHIFT));
 
 	/* Update the delay timer count */
 	cr = (((cr & ~XAXIDMA_DELAY_MASK)) |
@@ -1215,6 +1223,393 @@ static const struct net_device_ops axienet_netdev_ops = {
 };
 
 /**
+ * axienet_ethtools_get_settings - Get Axi Ethernet settings related to PHY.
+ * @ndev:	Pointer to net_device structure
+ * @ecmd:	Pointer to ethtool_cmd structure
+ *
+ * This implements ethtool command for getting PHY settings. If PHY could
+ * not be found, the function returns -ENODEV. This function calls the
+ * relevant PHY ethtool API to get the PHY settings.
+ * Issue "ethtool ethX" under linux prompt to execute this function.
+ **/
+static int axienet_ethtools_get_settings(struct net_device *ndev,
+						struct ethtool_cmd *ecmd)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+	struct phy_device *phydev = lp->phy_dev;
+
+	if (!phydev)
+		return -ENODEV;
+
+	return phy_ethtool_gset(phydev, ecmd);
+}
+
+/**
+ * axienet_ethtools_set_settings - Set PHY settings as passed in the argument.
+ * @ndev:	Pointer to net_device structure
+ * @ecmd:	Pointer to ethtool_cmd structure
+ *
+ * This implements ethtool command for setting various PHY settings. If PHY
+ * could not be found, the function returns -ENODEV. This function calls the
+ * relevant PHY ethtool API to set the PHY.
+ * Issue e.g. "ethtool -s ethX speed 1000" under linux prompt to execute this
+ * function.
+ **/
+static int axienet_ethtools_set_settings(struct net_device *ndev,
+						struct ethtool_cmd *ecmd)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+	struct phy_device *phydev = lp->phy_dev;
+
+	if (!phydev)
+		return -ENODEV;
+
+	return phy_ethtool_sset(phydev, ecmd);
+}
+
+/**
+ * axienet_ethtools_get_drvinfo - Get various Axi Ethernet driver information.
+ * @ndev:	Pointer to net_device structure
+ * @ed:		Pointer to ethtool_drvinfo structure
+ *
+ * This implements ethtool command for getting the driver information.
+ * Issue "ethtool -i ethX" under linux prompt to execute this function.
+ **/
+static void axienet_ethtools_get_drvinfo(struct net_device *ndev,
+						struct ethtool_drvinfo *ed)
+{
+	memset(ed, 0, sizeof(struct ethtool_drvinfo));
+	strcpy(ed->driver, DRIVER_NAME);
+	strcpy(ed->version, DRIVER_VERSION);
+	ed->regdump_len = (sizeof(u32))*(AXIENET_REGS_N);
+}
+
+/**
+ * axienet_ethtools_get_regs_len - Get the total regs length present in the
+ *				   AxiEthernet core.
+ * @ndev:	Pointer to net_device structure
+ *
+ * This implements ethtool command for getting the total register length
+ * information.
+ **/
+static int axienet_ethtools_get_regs_len(struct net_device *ndev)
+{
+	return AXIENET_REGS_N * sizeof(u32);
+}
+
+/**
+ * axienet_ethtools_get_regs - Dump the contents of all registers present
+ *			       in AxiEthernet core.
+ * @ndev:	Pointer to net_device structure
+ * @regs:	Pointer to ethtool_regs structure
+ * @ret:	Void pointer used to return the contents of the registers.
+ *
+ * This implements ethtool command for getting the Axi Ethernet register dump.
+ * Issue "ethtool -d ethX" to execute this function.
+ **/
+static void axienet_ethtools_get_regs(struct net_device *ndev,
+					struct ethtool_regs *regs, void *ret)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+	u32 * data = (u32 *) ret;
+
+	regs->version = 0;
+	regs->len = AXIENET_REGS_N * sizeof(u32);
+	memset(ret, 0, AXIENET_REGS_N * sizeof(u32));
+
+	data[0] = axienet_ior(lp, XAE_RAF_OFFSET);
+	data[1] = axienet_ior(lp, XAE_TPF_OFFSET);
+	data[2] = axienet_ior(lp, XAE_IFGP_OFFSET);
+	data[3] = axienet_ior(lp, XAE_IS_OFFSET);
+	data[4] = axienet_ior(lp, XAE_IP_OFFSET);
+	data[5] = axienet_ior(lp, XAE_IE_OFFSET);
+	data[6] = axienet_ior(lp, XAE_TTAG_OFFSET);
+	data[7] = axienet_ior(lp, XAE_RTAG_OFFSET);
+	data[8] = axienet_ior(lp, XAE_UAWL_OFFSET);
+	data[9] = axienet_ior(lp, XAE_UAWU_OFFSET);
+	data[10] = axienet_ior(lp, XAE_TPID0_OFFSET);
+	data[11] = axienet_ior(lp, XAE_TPID1_OFFSET);
+	data[12] = axienet_ior(lp, XAE_PPST_OFFSET);
+	data[13] = axienet_ior(lp, XAE_RCW0_OFFSET);
+	data[14] = axienet_ior(lp, XAE_RCW1_OFFSET);
+	data[15] = axienet_ior(lp, XAE_TC_OFFSET);
+	data[16] = axienet_ior(lp, XAE_FCC_OFFSET);
+	data[17] = axienet_ior(lp, XAE_EMMC_OFFSET);
+	data[18] = axienet_ior(lp, XAE_PHYC_OFFSET);
+	data[19] = axienet_ior(lp, XAE_MDIO_MC_OFFSET);
+	data[20] = axienet_ior(lp, XAE_MDIO_MCR_OFFSET);
+	data[21] = axienet_ior(lp, XAE_MDIO_MWD_OFFSET);
+	data[22] = axienet_ior(lp, XAE_MDIO_MRD_OFFSET);
+	data[23] = axienet_ior(lp, XAE_MDIO_MIS_OFFSET);
+	data[24] = axienet_ior(lp, XAE_MDIO_MIP_OFFSET);
+	data[25] = axienet_ior(lp, XAE_MDIO_MIE_OFFSET);
+	data[26] = axienet_ior(lp, XAE_MDIO_MIC_OFFSET);
+	data[27] = axienet_ior(lp, XAE_UAW0_OFFSET);
+	data[28] = axienet_ior(lp, XAE_UAW1_OFFSET);
+	data[29] = axienet_ior(lp, XAE_FMI_OFFSET);
+	data[30] = axienet_ior(lp, XAE_AF0_OFFSET);
+	data[31] = axienet_ior(lp, XAE_AF1_OFFSET);
+}
+
+/**
+ * axienet_ethtools_get_rx_csum - Get the checksum offload setting on Rx path.
+ * @ndev:	Pointer to net_device structure
+ *
+ * This implements ethtool command for getting the Axi Ethernet checksum
+ * offload setting on Rx path. If the core supports either partial or full
+ * checksum offload, the function returns a non-zero value.
+ * Issue "ethtool -k ethX" under linux prompt to execute this function.
+ **/
+static u32 axienet_ethtools_get_rx_csum(struct net_device *ndev)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	if ((lp->features & XAE_FEATURE_PARTIAL_RX_CSUM) ||
+			(lp->features & XAE_FEATURE_FULL_RX_CSUM))
+		return XAE_FEATURE_PARTIAL_RX_CSUM;
+
+	else
+		return XAE_NO_CSUM_OFFLOAD;
+}
+
+/**
+ * axienet_ethtools_set_rx_csum - Enable checksum offloading on Rx path.
+ * @ndev:	Pointer to net_device structure
+ * @flag:	unsigned long, used to enable/disable checksum offloading.
+ *
+ * This implements ethtool command for enabling Axi Ethernet checksum
+ * offloading. If the core supports full checksum offloading, this function
+ * enables/disables full checksum offloading. Similarly it can enable/disable
+ * partial checksum offloading.
+ * Issue "ethtool -K ethX rx on|off" under linux prompt to execute this
+ * function.
+ **/
+static int axienet_ethtools_set_rx_csum(struct net_device *ndev, u32 flag)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	if (lp->csum_offload_on_rx_path & XAE_FEATURE_PARTIAL_RX_CSUM) {
+		if (flag)
+			lp->features |= XAE_FEATURE_PARTIAL_RX_CSUM;
+		else
+			lp->features &= ~XAE_FEATURE_PARTIAL_RX_CSUM;
+	} else if (lp->csum_offload_on_rx_path & XAE_FEATURE_FULL_RX_CSUM) {
+		if (flag)
+			lp->features |= XAE_FEATURE_FULL_RX_CSUM;
+		else
+			lp->features &= ~XAE_FEATURE_FULL_RX_CSUM;
+	}
+
+	return 0;
+}
+
+/**
+ * axienet_ethtools_get_tx_csum - Get checksum offloading on Tx path.
+ * @ndev:	Pointer to net_device structure
+ *
+ * This implements ethtool command for getting the Axi Ethernet checksum
+ * offload setting on Tx path.
+ * Issue "ethtool -k ethX" under linux prompt to execute this function.
+ **/
+static u32 axienet_ethtools_get_tx_csum(struct net_device *ndev)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	if (lp->features & XAE_FEATURE_PARTIAL_TX_CSUM)
+		return ndev->features & NETIF_F_IP_CSUM;
+	else if (lp->features & XAE_FEATURE_FULL_TX_CSUM)
+		return ndev->features & NETIF_F_HW_CSUM;
+	return 0;
+}
+
+/**
+ * axienet_ethtools_set_tx_csum - Enable checksum offloading on Tx path.
+ * @ndev:	Pointer to net_device structure
+ * @flag:	unsigned long, used to enable/disable checksum offloading.
+ *
+ * This implements ethtool command for setting the Axi Ethernet checksum
+ * offload on Tx path.
+ * Issue "ethtool -K ethX tx on|off" under linux prompt to execute this
+ * function.
+ **/
+static int axienet_ethtools_set_tx_csum(struct net_device *ndev, u32 flag)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	if (lp->csum_offload_on_tx_path & XAE_FEATURE_PARTIAL_TX_CSUM) {
+		if (flag)
+			ndev->features |= NETIF_F_IP_CSUM;
+		else
+			ndev->features &= ~NETIF_F_IP_CSUM;
+	} else if (lp->csum_offload_on_tx_path & XAE_FEATURE_FULL_TX_CSUM) {
+		if (flag)
+			ndev->features |= NETIF_F_HW_CSUM;
+		else
+			ndev->features &= ~NETIF_F_HW_CSUM;
+	}
+
+	return 0;
+}
+
+/**
+ * axienet_ethtools_get_pauseparam - Get the pause parameter setting for
+ *				     Tx and Rx paths.
+ * @ndev:	Pointer to net_device structure
+ * @epauseparm:	Pointer to ethtool_pauseparam structure.
+ *
+ * This implements ethtool command for getting axi ethernet pause frame
+ * setting.
+ * Issue "ethtool -a ethX" to execute this function.
+ **/
+static void axienet_ethtools_get_pauseparam(struct net_device *ndev,
+		struct ethtool_pauseparam *epauseparm)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+	u32 regval;
+
+	epauseparm->autoneg  = 0;
+
+	regval = axienet_ior(lp, XAE_FCC_OFFSET);
+	epauseparm->tx_pause = regval & XAE_FCC_FCTX_MASK;
+	epauseparm->rx_pause = regval & XAE_FCC_FCRX_MASK;
+}
+
+/**
+ * axienet_ethtools_set_pauseparam - Set device pause parameter(flow control)
+ * 				     settings.
+ * @ndev:	Pointer to net_device structure
+ * @epauseparam:Pointer to ethtool_pauseparam structure
+ *
+ * This implements ethtool command for enabling flow control on Rx and Tx
+ * paths.
+ * Issue "ethtool -A ethX tx on|off" under linux prompt to execute this
+ * function.
+ **/
+static int axienet_ethtools_set_pauseparam(struct net_device *ndev,
+		struct ethtool_pauseparam *epauseparm)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+	u32 regval = 0;
+
+	if (netif_running(ndev)) {
+		printk(KERN_ERR
+			"%s: Please stop netif before applying configruation\n",
+			ndev->name);
+		return -EFAULT;
+	}
+
+	regval = axienet_ior(lp, XAE_FCC_OFFSET);
+
+	if (epauseparm->tx_pause)
+		regval |= XAE_FCC_FCTX_MASK;
+	else
+		regval &= ~XAE_FCC_FCTX_MASK;
+
+	if (epauseparm->rx_pause)
+		regval |= XAE_FCC_FCRX_MASK;
+	else
+		regval &= ~XAE_FCC_FCRX_MASK;
+
+	axienet_iow(lp, XAE_FCC_OFFSET, regval);
+	return 0;
+}
+
+/**
+ * axienet_ethtools_get_coalesce - Get DMA interrupt coalescing count.
+ * @ndev:	Pointer to net_device structure
+ * @ecoalesce:	Pointer to ethtool_coalesce structure
+ *
+ * This implements ethtool command for getting the DMA interrupt coalescing
+ * count on Tx and Rx paths.
+ * Issue "ethtool -c ethX" under linux prompt to execute this function.
+ **/
+static int axienet_ethtools_get_coalesce(struct net_device *ndev,
+					struct ethtool_coalesce *ecoalesce)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+	u32 regval = 0;
+
+	regval = axienet_dma_in32(lp, XAXIDMA_RX_CR_OFFSET);
+	ecoalesce->rx_max_coalesced_frames =
+		(regval & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT;
+
+	regval = axienet_dma_in32(lp, XAXIDMA_TX_CR_OFFSET);
+	ecoalesce->tx_max_coalesced_frames =
+		(regval & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT;
+	return 0;
+
+}
+
+/**
+ * axienet_ethtools_set_coalesce - Set DMA interrupt coalescing count.
+ * @ndev:	Pointer to net_device structure
+ * @ecoalesce:	Pointer to ethtool_coalesce structure
+ *
+ * This implements ethtool command for setting the DMA interrupt coalescing
+ * count on Tx and Rx paths.
+ * Issue "ethtool -C ethX rx-frames 5" under linux prompt to execute this
+ * function.
+ **/
+static int axienet_ethtools_set_coalesce(struct net_device *ndev,
+					struct ethtool_coalesce *ecoalesce)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	if (netif_running(ndev)) {
+		printk(KERN_ERR
+			"%s: Please stop netif before applying configruation\n",
+			ndev->name);
+		return -EFAULT;
+	}
+
+	if ((ecoalesce->rx_coalesce_usecs) ||
+		(ecoalesce->rx_coalesce_usecs_irq) ||
+		(ecoalesce->rx_max_coalesced_frames_irq) ||
+		(ecoalesce->tx_coalesce_usecs) ||
+		(ecoalesce->tx_coalesce_usecs_irq) ||
+		(ecoalesce->tx_max_coalesced_frames_irq) ||
+		(ecoalesce->stats_block_coalesce_usecs) ||
+		(ecoalesce->use_adaptive_rx_coalesce) ||
+		(ecoalesce->use_adaptive_tx_coalesce) ||
+		(ecoalesce->pkt_rate_low) ||
+		(ecoalesce->rx_coalesce_usecs_low) ||
+		(ecoalesce->rx_max_coalesced_frames_low) ||
+		(ecoalesce->tx_coalesce_usecs_low) ||
+		(ecoalesce->tx_max_coalesced_frames_low) ||
+		(ecoalesce->pkt_rate_high) ||
+		(ecoalesce->rx_coalesce_usecs_high) ||
+		(ecoalesce->rx_max_coalesced_frames_high) ||
+		(ecoalesce->tx_coalesce_usecs_high) ||
+		(ecoalesce->tx_max_coalesced_frames_high) ||
+		(ecoalesce->rate_sample_interval))
+		return -EOPNOTSUPP;
+	if (ecoalesce->rx_max_coalesced_frames)
+		lp->coalesce_count_rx = ecoalesce->rx_max_coalesced_frames;
+	if (ecoalesce->tx_max_coalesced_frames)
+		lp->coalesce_count_tx = ecoalesce->tx_max_coalesced_frames;
+
+	return 0;
+}
+
+static struct ethtool_ops axienet_ethtool_ops = {
+	.get_settings   = axienet_ethtools_get_settings,
+	.set_settings   = axienet_ethtools_set_settings,
+	.get_drvinfo    = axienet_ethtools_get_drvinfo,
+	.get_regs_len   = axienet_ethtools_get_regs_len,
+	.get_regs       = axienet_ethtools_get_regs,
+	.get_link       = ethtool_op_get_link,       /* ethtool default */
+	.get_rx_csum    = axienet_ethtools_get_rx_csum,
+	.set_rx_csum    = axienet_ethtools_set_rx_csum,
+	.get_tx_csum    = axienet_ethtools_get_tx_csum,
+	.set_tx_csum    = axienet_ethtools_set_tx_csum,
+	.get_sg         = ethtool_op_get_sg,         /* ethtool default */
+	.get_pauseparam = axienet_ethtools_get_pauseparam,
+	.set_pauseparam = axienet_ethtools_set_pauseparam,
+	.get_coalesce   = axienet_ethtools_get_coalesce,
+	.set_coalesce   = axienet_ethtools_set_coalesce,
+};
+
+/**
  * axienet_dma_err_handler - Tasklet handler for Axi DMA Error
  * @data:	Data passed
  *
@@ -1436,6 +1831,7 @@ axienet_of_probe(struct platform_device *op, const struct of_device_id *match)
 	ndev->flags &= ~IFF_MULTICAST;  /* clear multicast */
 	ndev->features = NETIF_F_SG | NETIF_F_FRAGLIST;
 	ndev->netdev_ops = &axienet_netdev_ops;
+	ndev->ethtool_ops = &axienet_ethtool_ops;
 
 	/* Setup Axi Ethernet private info structure */
 	lp = netdev_priv(ndev);
@@ -1458,23 +1854,34 @@ axienet_of_probe(struct platform_device *op, const struct of_device_id *match)
 	if (p) {
 		k = be32_to_cpup(p);
 		if (k == 1) {
+			lp->csum_offload_on_tx_path =
+					XAE_FEATURE_PARTIAL_TX_CSUM;
 			lp->features |= XAE_FEATURE_PARTIAL_TX_CSUM;
 			/* Can checksum TCP/UDP over IPv4. */
 			ndev->features |= NETIF_F_IP_CSUM;
 		} else if (k == 2) {
+			lp->csum_offload_on_tx_path =
+					XAE_FEATURE_FULL_TX_CSUM;
 			lp->features |= XAE_FEATURE_FULL_TX_CSUM;
 			/* Can checksum IP as well as TCP packets. */
 			ndev->features |= NETIF_F_HW_CSUM;
-		}
+		} else
+			lp->csum_offload_on_tx_path = XAE_NO_CSUM_OFFLOAD;
 	}
 
 	p = (__be32 *)of_get_property(op->dev.of_node, "xlnx,rxcsum", NULL);
 	if (p) {
 		k = be32_to_cpup(p);
-		if (k == 1)
+		if (k == 1) {
+			lp->csum_offload_on_rx_path =
+					XAE_FEATURE_PARTIAL_RX_CSUM;
 			lp->features |= XAE_FEATURE_PARTIAL_RX_CSUM;
-		else if (k == 2)
+		} else if (k == 2) {
+			lp->csum_offload_on_rx_path =
+					XAE_FEATURE_FULL_RX_CSUM;
 			lp->features |= XAE_FEATURE_FULL_RX_CSUM;
+		} else
+			lp->csum_offload_on_rx_path = XAE_NO_CSUM_OFFLOAD;
 	}
 
 	/* For supporting jumbo frames, the Axi Ethernet hardware must have
@@ -1534,6 +1941,9 @@ axienet_of_probe(struct platform_device *op, const struct of_device_id *match)
 
 	axienet_set_mac_address(ndev, (void *)addr);
 
+	lp->coalesce_count_rx = XAXIDMA_DFT_RX_THRESHOLD;
+	lp->coalesce_count_tx = XAXIDMA_DFT_TX_THRESHOLD;
+
 	lp->phy_node = of_parse_phandle(op->dev.of_node, "phy-handle", 0);
 	rc = axienet_mdio_setup(lp, op->dev.of_node);
 	if (rc)
-- 
1.7.0.4

