From feffe0e1772e2d65ca49429b9245b9bd12a6c387 Mon Sep 17 00:00:00 2001
From: Stephan Linz <linz@li-pro.net>
Date: Wed, 11 Apr 2012 19:28:24 +0200
Subject: [PATCH] uartlite: Make the number of UARTs registered configurable.

Based on the 8250 code also add the nr_uarts module option
to override this, up to a maximum of SERIAL_UARTLITE_NR_UARTS

This should appease people who complain about a proliferation
of /dev/ttyUL & /sysfs nodes whilst at the same time allowing
a single kernel image to support the rarer occasions of
lots of devices.

So you can avoid related error like:
[    0.804000] uartlite 84000000.serial: ttyUL4 too large
[    0.808000] uartlite: probe of 84000000.serial failed with error -22

Signed-off-by: Stephan Linz <linz@li-pro.net>
---
 drivers/tty/serial/Kconfig    |   21 +++++++++++++++++++++
 drivers/tty/serial/uartlite.c |   18 ++++++++++++++----
 2 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/drivers/tty/serial/Kconfig b/drivers/tty/serial/Kconfig
index 2de9924..acf773e 100644
--- a/drivers/tty/serial/Kconfig
+++ b/drivers/tty/serial/Kconfig
@@ -554,6 +554,27 @@ config SERIAL_UARTLITE_CONSOLE
 	  console (the system console is the device which receives all kernel
 	  messages and warnings and which allows logins in single user mode).
 
+config SERIAL_UARTLITE_NR_UARTS
+	int "Maximum number of uartlite serial ports"
+	depends on SERIAL_UARTLITE
+	default "10"
+	help
+	  Set this to the number of serial ports you want the driver
+	  to support.  This includes any ports discovered via OPB, PLB
+	  or AXI enumeration and any ports that may be added at run-time
+	  via hot-plug (if it is possible).
+
+config SERIAL_UARTLITE_RUNTIME_UARTS
+	int "Number of uartlite serial ports to register at runtime"
+	depends on SERIAL_UARTLITE
+	range 0 SERIAL_UARTLITE_NR_UARTS
+	default "10"
+	help
+	  Set this to the maximum number of serial ports you want
+	  the kernel to register at boot time.  This can be overridden
+	  with the module parameter "nr_uarts", or boot-time parameter
+	  uartlite.nr_uarts
+
 config SERIAL_SUNCORE
 	bool
 	depends on SPARC
diff --git a/drivers/tty/serial/uartlite.c b/drivers/tty/serial/uartlite.c
index 6cd4143..44a645e 100644
--- a/drivers/tty/serial/uartlite.c
+++ b/drivers/tty/serial/uartlite.c
@@ -28,7 +28,9 @@
 #define ULITE_NAME		"ttyUL"
 #define ULITE_MAJOR		204
 #define ULITE_MINOR		187
-#define ULITE_NR_UARTS		4
+#define ULITE_NR_UARTS		CONFIG_SERIAL_UARTLITE_NR_UARTS
+
+static unsigned int nr_uarts = CONFIG_SERIAL_UARTLITE_RUNTIME_UARTS;
 
 /* ---------------------------------------------------------------------
  * Register definitions
@@ -417,7 +419,7 @@ static int __devinit ulite_console_setup(struct console *co, char *options)
 	int parity = 'n';
 	int flow = 'n';
 
-	if (co->index < 0 || co->index >= ULITE_NR_UARTS)
+	if (co->index < 0 || co->index >= nr_uarts)
 		return -EINVAL;
 
 	port = &ulite_ports[co->index];
@@ -454,6 +456,9 @@ static struct console ulite_console = {
 
 static int __init ulite_console_init(void)
 {
+	if (nr_uarts > ULITE_NR_UARTS)
+		nr_uarts = ULITE_NR_UARTS;
+
 	register_console(&ulite_console);
 	return 0;
 }
@@ -494,11 +499,11 @@ static int __devinit ulite_assign(struct device *dev, int id, u32 base, int irq)
 
 	/* if id = -1; then scan for a free id and use that */
 	if (id < 0) {
-		for (id = 0; id < ULITE_NR_UARTS; id++)
+		for (id = 0; id < nr_uarts; id++)
 			if (ulite_ports[id].mapbase == 0)
 				break;
 	}
-	if (id < 0 || id >= ULITE_NR_UARTS) {
+	if (id < 0 || id >= nr_uarts) {
 		dev_err(dev, "%s%i too large\n", ULITE_NAME, id);
 		return -EINVAL;
 	}
@@ -620,6 +625,9 @@ int __init ulite_init(void)
 {
 	int ret;
 
+	if (nr_uarts > ULITE_NR_UARTS)
+		nr_uarts = ULITE_NR_UARTS;
+
 	pr_debug("uartlite: calling uart_register_driver()\n");
 	ret = uart_register_driver(&ulite_uart_driver);
 	if (ret)
@@ -651,3 +659,5 @@ module_exit(ulite_exit);
 MODULE_AUTHOR("Peter Korsgaard <jacmet@sunsite.dk>");
 MODULE_DESCRIPTION("Xilinx uartlite serial driver");
 MODULE_LICENSE("GPL");
+
+module_param(nr_uarts, uint, 0644);
-- 
1.7.0.4

