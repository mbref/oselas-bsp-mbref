From 28b2bfe75dbff50e28bad2af6e4dd3b71a135d07 Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@xilinx.com>
Date: Fri, 19 Oct 2012 18:02:03 +0530
Subject: [PATCH] Xilinx: ARM: USB: Added workaround for DT# 654401.

Added workaround for USB errata described in DT# 654401.
This workaround is applicable to Zynq silicon versions < 3.0.
---
 drivers/usb/gadget/Kconfig            |   13 +++++++++++++
 drivers/usb/gadget/xilinx_usbps_udc.c |   11 +++++++++++
 2 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/drivers/usb/gadget/Kconfig b/drivers/usb/gadget/Kconfig
index e1b6e24..4b2d8df 100644
--- a/drivers/usb/gadget/Kconfig
+++ b/drivers/usb/gadget/Kconfig
@@ -188,6 +188,19 @@ config USB_GADGET_XUSBPS
 	   dynamically linked module called "xilinx_usbps_udc" and
 	   force all gadget drivers to also be dynamically linked.
 
+config XUSBPS_ERRATA_DT654401
+	bool "USB Errata: Adding a dTD to a Primed Endpoint May Not Get Recognized"
+	depends on USB_GADGET_XUSBPS
+	---help---
+	  There is an issue with the add dTD tripwire semaphore (ATDTW bit
+	  in USBCMD register) that can cause the controller to ignore a dTD
+	  that is added to a primed endpoint. When this happens, the software
+	  can read the tripwire bit and the status bit at '1' even though
+	  the endpoint is unprimed.
+
+	  This issue is only applicable for the Zynq silicon revisions < 3.0.
+	  For silicon versions 3.0 and higher, disable this option.
+
 config USB_XUSBPS
 	tristate
 	depends on USB_GADGET_XUSBPS
diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index ae1c52e..0305a07 100644
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -629,7 +629,18 @@ static void xusbps_queue_td(struct xusbps_ep *ep, struct xusbps_req *req)
 			tmp_stat = xusbps_readl(&dr_regs->endptstatus) &
 				bitmask;
 
+#ifdef CONFIG_XUSBPS_ERRATA_DT654401
+			/* Workaround for USB errata DT# 654401 */
+			temp = xusbps_readl(&dr_regs->usbcmd);
+			if (temp & USB_CMD_ATDTW) {
+				udelay(5);
+				if (xusbps_readl(&dr_regs->usbcmd) & USB_CMD_ATDTW)
+					break;
+			}
+		} while (1);
+#else
 		} while (!(xusbps_readl(&dr_regs->usbcmd) & USB_CMD_ATDTW));
+#endif
 
 		/* Write ATDTW bit to 0 */
 		temp = xusbps_readl(&dr_regs->usbcmd);
-- 
1.7.0.4

