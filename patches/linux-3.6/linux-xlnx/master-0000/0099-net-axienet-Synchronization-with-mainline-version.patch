From 55692c06bedfe5129994310ab68ad84d35275284 Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Fri, 12 Oct 2012 14:44:20 +0200
Subject: [PATCH] net: axienet: Synchronization with mainline version

Sync with mainline.

Signed-off-by: Michal Simek <monstr@monstr.eu>
---
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c |   32 +++++++-------------
 1 files changed, 11 insertions(+), 21 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 03276f1..041775e 100755
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -28,15 +28,11 @@
 #include <linux/of_mdio.h>
 #include <linux/of_platform.h>
 #include <linux/of_address.h>
-#include <linux/of.h>
-#include <linux/of_device.h>
 #include <linux/skbuff.h>
 #include <linux/spinlock.h>
 #include <linux/phy.h>
 #include <linux/mii.h>
-#include <linux/dma-mapping.h>
-#include <linux/io.h>
-#include <linux/interrupt.h>
+#include <linux/ethtool.h>
 
 #include "xilinx_axienet.h"
 
@@ -708,10 +704,10 @@ static int axienet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 		cur_p = &lp->tx_bd_v[lp->tx_bd_tail];
 		frag = &skb_shinfo(skb)->frags[ii];
 		cur_p->phys = dma_map_single(ndev->dev.parent,
-			skb_frag_address(frag),
-			frag->size,
-			DMA_TO_DEVICE);
-		cur_p->cntrl = frag->size;
+					     skb_frag_address(frag),
+					     skb_frag_size(frag),
+					     DMA_TO_DEVICE);
+		cur_p->cntrl = skb_frag_size(frag);
 	}
 
 	cur_p->cntrl |= XAXIDMA_BD_CTRL_TXEOF_MASK;
@@ -1067,7 +1063,7 @@ static int axienet_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 		return -EINVAL;
 
 	if (!priv->phy_dev)
-		return -ENODEV;
+		return -EOPNOTSUPP;
 
 	return phy_mii_ioctl(priv->phy_dev, rq, cmd);
 }
@@ -1348,7 +1344,7 @@ static struct ethtool_ops axienet_ethtool_ops = {
 	.get_drvinfo    = axienet_ethtools_get_drvinfo,
 	.get_regs_len   = axienet_ethtools_get_regs_len,
 	.get_regs       = axienet_ethtools_get_regs,
-	.get_link       = ethtool_op_get_link,       /* ethtool default */
+	.get_link       = ethtool_op_get_link,
 	.get_pauseparam = axienet_ethtools_get_pauseparam,
 	.set_pauseparam = axienet_ethtools_set_pauseparam,
 	.get_coalesce   = axienet_ethtools_get_coalesce,
@@ -1605,9 +1601,7 @@ static int __devinit axienet_of_probe(struct platform_device *op)
 	}
 	lp->rx_irq = irq_of_parse_and_map(np, 1);
 	lp->tx_irq = irq_of_parse_and_map(np, 0);
-
-	of_node_put(np); /* Finished with the DMA node; drop the reference */
-
+	of_node_put(np);
 	if ((!lp->rx_irq) || (!lp->tx_irq)) {
 		dev_err(&op->dev, "could not determine irqs\n");
 		ret = -ENOMEM;
@@ -1627,13 +1621,9 @@ static int __devinit axienet_of_probe(struct platform_device *op)
 	lp->coalesce_count_tx = XAXIDMA_DFT_TX_THRESHOLD;
 
 	lp->phy_node = of_parse_phandle(op->dev.of_node, "phy-handle", 0);
-	if (lp->phy_node) {
-		dev_dbg(lp->dev, "using PHY node %s (%p)\n", np->full_name, np);
-
-		rc = axienet_mdio_setup(lp, op->dev.of_node);
-		if (rc)
-			dev_warn(&op->dev, "error registering MDIO bus\n");
-	}
+	ret = axienet_mdio_setup(lp, op->dev.of_node);
+	if (ret)
+		dev_warn(&op->dev, "error registering MDIO bus\n");
 
 	ret = register_netdev(lp->ndev);
 	if (ret) {
-- 
1.7.1

