From dcdc866058554ad1e82d43f0b2494aba150b3dbd Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Mon, 8 Oct 2012 13:37:01 +0200
Subject: [PATCH] input: serio: Remove old ps2 driver

There is new mainline driver which can be used.

Signed-off-by: Michal Simek <monstr@monstr.eu>
---
 drivers/input/serio/Kconfig                 |    6 -
 drivers/input/serio/Makefile                |    1 -
 drivers/input/serio/xilinx_ps2/Makefile     |   13 -
 drivers/input/serio/xilinx_ps2/xps2.c       |  469 --------------------------
 drivers/input/serio/xilinx_ps2/xps2.h       |  262 ---------------
 drivers/input/serio/xilinx_ps2/xps2_i.h     |  113 -------
 drivers/input/serio/xilinx_ps2/xps2_intr.c  |  485 ---------------------------
 drivers/input/serio/xilinx_ps2/xps2_l.c     |  115 -------
 drivers/input/serio/xilinx_ps2/xps2_l.h     |  269 ---------------
 drivers/input/serio/xilinx_ps2/xps2_linux.c |  430 ------------------------
 10 files changed, 0 insertions(+), 2163 deletions(-)
 delete mode 100644 drivers/input/serio/xilinx_ps2/Makefile
 delete mode 100644 drivers/input/serio/xilinx_ps2/xps2.c
 delete mode 100644 drivers/input/serio/xilinx_ps2/xps2.h
 delete mode 100644 drivers/input/serio/xilinx_ps2/xps2_i.h
 delete mode 100644 drivers/input/serio/xilinx_ps2/xps2_intr.c
 delete mode 100644 drivers/input/serio/xilinx_ps2/xps2_l.c
 delete mode 100644 drivers/input/serio/xilinx_ps2/xps2_l.h
 delete mode 100644 drivers/input/serio/xilinx_ps2/xps2_linux.c

diff --git a/drivers/input/serio/Kconfig b/drivers/input/serio/Kconfig
index e43d3e0..55f2c22 100644
--- a/drivers/input/serio/Kconfig
+++ b/drivers/input/serio/Kconfig
@@ -177,12 +177,6 @@ config SERIO_LIBPS2
 	  To compile this driver as a module, choose M here: the
 	  module will be called libps2.
 
-config SERIO_XILINX_XPS_PS2
-	tristate "Xilinx XPS PS/2 Controller Support"
-	depends on XILINX_DRIVERS && SERIO
-	help
-	  This driver supports XPS PS/2 IP from Xilinx EDK.
-
 config SERIO_RAW
 	tristate "Raw access to serio ports"
 	help
diff --git a/drivers/input/serio/Makefile b/drivers/input/serio/Makefile
index bf2f3b2..dbbe376 100644
--- a/drivers/input/serio/Makefile
+++ b/drivers/input/serio/Makefile
@@ -21,7 +21,6 @@ obj-$(CONFIG_SERIO_PCIPS2)	+= pcips2.o
 obj-$(CONFIG_SERIO_PS2MULT)	+= ps2mult.o
 obj-$(CONFIG_SERIO_MACEPS2)	+= maceps2.o
 obj-$(CONFIG_SERIO_LIBPS2)	+= libps2.o
-obj-$(CONFIG_SERIO_XILINX_XPS_PS2)	+= xilinx_ps2.o
 obj-$(CONFIG_SERIO_RAW)		+= serio_raw.o
 obj-$(CONFIG_SERIO_AMS_DELTA)	+= ams_delta_serio.o
 obj-$(CONFIG_SERIO_XILINX_XPS_PS2)	+= xilinx_ps2.o
diff --git a/drivers/input/serio/xilinx_ps2/Makefile b/drivers/input/serio/xilinx_ps2/Makefile
deleted file mode 100644
index 2a83a78..0000000
--- a/drivers/input/serio/xilinx_ps2/Makefile
+++ /dev/null
@@ -1,13 +0,0 @@
-#
-# Makefile for the Xilinx PS/2 driver
-#
-
-EXTRA_CFLAGS		+= -Idrivers/xilinx_common
-
-# The Linux adapter for the Xilinx driver code.
-xilinx_ps2-objs	:= xps2_linux.o
-
-# The Xilinx OS independent code.
-xilinx_ps2-objs	+= xps2.o xps2_intr.o xps2_l.o
-
-obj-$(CONFIG_SERIO_XILINXPS2) += xilinx_ps2.o
diff --git a/drivers/input/serio/xilinx_ps2/xps2.c b/drivers/input/serio/xilinx_ps2/xps2.c
deleted file mode 100644
index 5a7ec5c..0000000
--- a/drivers/input/serio/xilinx_ps2/xps2.c
+++ /dev/null
@@ -1,469 +0,0 @@
-/******************************************************************************
-*
-*     Author: Xilinx, Inc.
-*
-*
-*     This program is free software; you can redistribute it and/or modify it
-*     under the terms of the GNU General Public License as published by the
-*     Free Software Foundation; either version 2 of the License, or (at your
-*     option) any later version.
-*
-*
-*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
-*     COURTESY TO YOU. BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
-*     ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD,
-*     XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE
-*     FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING
-*     ANY THIRD PARTY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
-*     XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
-*     THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY
-*     WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM
-*     CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND
-*     FITNESS FOR A PARTICULAR PURPOSE.
-*
-*
-*     Xilinx hardware products are not intended for use in life support
-*     appliances, devices, or systems. Use in such applications is
-*     expressly prohibited.
-*
-*
-*     (c) Copyright 2002-2005 Xilinx Inc.
-*     All rights reserved.
-*
-*
-*     You should have received a copy of the GNU General Public License along
-*     with this program; if not, write to the Free Software Foundation, Inc.,
-*     675 Mass Ave, Cambridge, MA 02139, USA.
-*
-******************************************************************************/
-/****************************************************************************/
-/**
-*
-* @file xps2.c
-*
-* This file contains the required functions for the PS/2 driver.
-* Refer to the header file xps2.h for more detailed information.
-*
-* <pre>
-* MODIFICATION HISTORY:
-*
-* Ver   Who  Date     Changes
-* ----- ---- -------- -----------------------------------------------
-* 1.00a ch   06/18/02 First release
-* 1.00a rmm  05/14/03 Fixed diab compiler warnings relating to asserts.
-* 1.01a jvb  12/13/05 I changed Initialize() into CfgInitialize(), and made
-*                     CfgInitialize() take a pointer to a config structure
-*                     instead of a device id. I moved Initialize() into
-*                     xgpio_sinit.c, and had Initialize() call CfgInitialize()
-*                     after it retrieved the config structure using the device
-*                     id. I removed include of xparameters.h along with any
-*                     dependencies on xparameters.h and the _g.c config table.
-*
-* </pre>
-*
-*****************************************************************************/
-
-/***************************** Include Files ********************************/
-
-#include "xstatus.h"
-#include "xps2.h"
-#include "xps2_i.h"
-#include "xps2_l.h"
-#include "xio.h"
-
-/************************** Constant Definitions ****************************/
-
-/**************************** Type Definitions ******************************/
-
-/***************** Macros (Inline Functions) Definitions ********************/
-
-/************************** Variable Definitions ****************************/
-
-/************************** Function Prototypes *****************************/
-
-static void XPs2_StubHandler(void *CallBackRef, u32 Event,
-			     unsigned int ByteCount);
-
-/****************************************************************************/
-/**
-*
-* Initializes a specific PS/2 instance such that it is ready to be used.
-* The default operating mode of the driver is polled mode.
-*
-* @param InstancePtr is a pointer to the XPs2 instance to be worked on.
-* @param Config is a reference to a structure containing information about
-*        a specific PS2 device. This function initializes an InstancePtr object
-*        for a specific device specified by the contents of Config. This
-*        function can initialize multiple instance objects with the use of
-*        multiple calls giving different Config information on each call.
-* @param EffectiveAddr is the device base address in the virtual memory address
-*        space. The caller is responsible for keeping the address mapping
-*        from EffectiveAddr to the device physical base address unchanged
-*        once this function is invoked. Unexpected errors may occur if the
-*        address mapping changes after this function is called. If address
-*        translation is not used, use Config->BaseAddress for this parameters,
-*        passing the physical address instead.
-*
-* @return
-*
-* - XST_SUCCESS if initialization was successful
-*
-* @note
-*
-* The Config pointer argument is not used by this function, but is provided
-* to keep the function signature consistent with other drivers.
-*
-*****************************************************************************/
-int XPs2_CfgInitialize(XPs2 * InstancePtr, XPs2_Config * Config,
-			   u32 EffectiveAddr)
-{
-	/*
-	 * Assert validates the input arguments
-	 */
-	XASSERT_NONVOID(InstancePtr != NULL);
-
-	/*
-	 * Setup the data that is from the configuration information
-	 */
-	InstancePtr->BaseAddress = EffectiveAddr;
-
-	/*
-	 * Initialize the instance data to some default values and setup a default
-	 * handler
-	 */
-	InstancePtr->Handler = XPs2_StubHandler;
-
-	InstancePtr->SendBuffer.NextBytePtr = NULL;
-	InstancePtr->SendBuffer.RemainingBytes = 0;
-	InstancePtr->SendBuffer.RequestedBytes = 0;
-
-	InstancePtr->ReceiveBuffer.NextBytePtr = NULL;
-	InstancePtr->ReceiveBuffer.RemainingBytes = 0;
-	InstancePtr->ReceiveBuffer.RequestedBytes = 0;
-
-	/*
-	 * Reset the PS/2 Hardware
-	 */
-	XPs2_mReset(InstancePtr->BaseAddress);
-
-	/*
-	 * Disable all PS/2 interrupts
-	 */
-	XPs2_mDisableIntr(InstancePtr->BaseAddress, XPS2_INT_ALL);
-
-	/*
-	 * Indicate the instance is now ready to use, initialized without error
-	 */
-	InstancePtr->IsReady = XCOMPONENT_IS_READY;
-
-	return XST_SUCCESS;
-}
-
-/****************************************************************************/
-/**
-*
-* This functions sends the specified buffer of data to the PS/2 port in either
-* polled or interrupt driven modes. This function is non-blocking such that it
-* will return before the data has been sent thorugh PS/2. If the port is busy
-* sending data, it will return and indicate zero bytes were sent.
-*
-* In a polled mode, this function will only send 1 byte which is as much data
-* as the transmitter can buffer. The application may need to call it
-* repeatedly to send a buffer.
-*
-* In interrupt mode, this function will start sending the specified buffer and
-* then the interrupt handler of the driver will continue sending data until the
-* buffer has been sent. A callback function, as specified by the application,
-* will be called to indicate the completion of sending the buffer.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-* @param    BufferPtr is pointer to a buffer of data to be sent.
-* @param    NumBytes contains the number of bytes to be sent. A value of zero
-*           will stop a previous send operation that is in progress in interrupt
-*           mode. Any data that was already put into the transmit FIFO will be
-*           sent.
-*
-* @return
-*
-* The number of bytes actually sent.
-*
-* @note
-*
-* The number of bytes is not asserted so that this function may be called with
-* a value of zero to stop an operation that is already in progress.
-* <br><br>
-* This function modifies shared data such that there may be a need for mutual
-* exclusion in a multithreaded environment
-*
-*****************************************************************************/
-unsigned int XPs2_Send(XPs2 * InstancePtr, u8 * BufferPtr,
-		       unsigned int NumBytes)
-{
-	unsigned int BytesSent;
-
-	/*
-	 * Assert validates the input arguments
-	 */
-	XASSERT_NONVOID(InstancePtr != NULL);
-	XASSERT_NONVOID(BufferPtr != NULL);
-	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
-
-	/*
-	 * Enter a critical region by disabling the PS/2 transmit interrupts to
-	 * allow this call to stop a previous operation that may be interrupt
-	 * driven, only stop the transmit interrupt since this critical region is
-	 * not really exited in the normal manner
-	 */
-	XPs2_mDisableIntr(InstancePtr->BaseAddress, XPS2_INT_TX_ALL);
-
-	/*
-	 * Setup the specified buffer to be sent by setting the instance
-	 * variables so it can be sent with polled or interrupt mode
-	 */
-	InstancePtr->SendBuffer.RequestedBytes = NumBytes;
-	InstancePtr->SendBuffer.RemainingBytes = NumBytes;
-	InstancePtr->SendBuffer.NextBytePtr = BufferPtr;
-
-	/*
-	 * Send the buffer and return the number of bytes sent
-	 */
-	BytesSent = XPs2_SendBuffer(InstancePtr);
-
-	/*
-	 * The critical region is not exited in this function because of the way
-	 * the transmit interrupts work. The other function called enables the
-	 * transmit interrupt such that this function can't restore a value to the
-	 * interrupt enable register and does not need to exit the critical region
-	 */
-	return BytesSent;
-}
-
-/****************************************************************************/
-/**
-*
-* This function will attempt to receive a specified number of bytes of data
-* from PS/2 and store it into the specified buffer. This function is
-* designed for either polled or interrupt driven modes. It is non-blocking
-* such that it will return if no data has already received by the PS/2 port.
-*
-* In a polled mode, this function will only receive 1 byte which is as much
-* data as the receiver can buffer. The application may need to call it
-* repeatedly to receive a buffer. Polled mode is the default mode of
-* operation for the driver.
-*
-* In interrupt mode, this function will start receiving and then the interrupt
-* handler of the driver will continue receiving data until the buffer has been
-* received. A callback function, as specified by the application, will be called
-* to indicate the completion of receiving the buffer or when any receive errors
-* or timeouts occur. Interrupt mode must be enabled.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-* @param    BufferPtr is pointer to buffer for data to be received into
-* @param    NumBytes is the number of bytes to be received. A value of zero will
-*           stop a previous receive operation that is in progress in interrupt mode.
-*
-* @return
-*
-* The number of bytes received.
-*
-* @note
-*
-* The number of bytes is not asserted so that this function may be called with
-* a value of zero to stop an operation that is already in progress.
-*
-*****************************************************************************/
-unsigned int XPs2_Recv(XPs2 * InstancePtr, u8 * BufferPtr,
-		       unsigned int NumBytes)
-{
-	unsigned int ReceivedCount;
-
-	/*
-	 * Assert validates the input arguments
-	 */
-	XASSERT_NONVOID(InstancePtr != NULL);
-	XASSERT_NONVOID(BufferPtr != NULL);
-	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
-
-	/*
-	 * Setup the specified buffer to be sent by setting the instance
-	 * variables so it can be sent with polled or interrupt mode
-	 */
-	InstancePtr->ReceiveBuffer.RequestedBytes = NumBytes;
-	InstancePtr->ReceiveBuffer.RemainingBytes = NumBytes;
-	InstancePtr->ReceiveBuffer.NextBytePtr = BufferPtr;
-
-	/*
-	 * Receive the data from PS/2 and return the number of bytes
-	 * received
-	 */
-	ReceivedCount = XPs2_ReceiveBuffer(InstancePtr);
-
-	return ReceivedCount;
-}
-
-/****************************************************************************/
-/**
-*
-* This function sends a buffer that has been previously specified by setting
-* up the instance variables of the instance. This function is designed to be
-* an internal function for the XPs2 component such that it may be called
-* from a shell function that sets up the buffer or from an interrupt handler.
-*
-* This function sends the specified buffer of data to the PS/2 port in either
-* polled or interrupt driven modes. This function is non-blocking such that
-* it will return before the data has been sent.
-*
-* In a polled mode, this function will only send 1 byte which is as much data
-* transmitter can buffer. The application may need to call it repeatedly to
-* send a buffer.
-*
-* In interrupt mode, this function will start sending the specified buffer and
-* then the interrupt handler of the driver will continue until the buffer
-* has been sent. A callback function, as specified by the application, will
-* be called to indicate the completion of sending the buffer.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* NumBytes is the number of bytes actually sent
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-unsigned int XPs2_SendBuffer(XPs2 * InstancePtr)
-{
-	unsigned int SentCount = 0;
-
-	/*
-	 * If the transmitter is empty send one byte of data
-	 */
-	if (!XPs2_mIsTransmitFull(InstancePtr->BaseAddress)) {
-		XPs2_SendByte(InstancePtr->BaseAddress,
-			      InstancePtr->SendBuffer.NextBytePtr[SentCount]);
-
-		SentCount = 1;
-	}
-	/*
-	 * Update the buffer to reflect the bytes that were sent
-	 * from it
-	 */
-	InstancePtr->SendBuffer.NextBytePtr += SentCount;
-	InstancePtr->SendBuffer.RemainingBytes -= SentCount;
-
-	/*
-	 * If interrupts are enabled as indicated by the receive interrupt, then
-	 * enable the transmit interrupt
-	 */
-	if (XPs2_mIsIntrEnabled((InstancePtr->BaseAddress), XPS2_INT_RX_FULL)) {
-		XPs2_mEnableIntr(InstancePtr->BaseAddress, XPS2_INT_TX_ALL |
-				 XPS2_INT_WDT_TOUT);
-	}
-
-	return SentCount;
-}
-
-/****************************************************************************/
-/**
-*
-* This function receives a buffer that has been previously specified by setting
-* up the instance variables of the instance. This function is designed to be
-* an internal function for the XPs2 component such that it may be called
-* from a shell function that sets up the buffer or from an interrupt handler.
-*
-* This function will attempt to receive a specified number of bytes of data
-* from PS/2 and store it into the specified buffer. This function is
-* designed for either polled or interrupt driven modes. It is non-blocking
-* such that it will return if there is no data has already received.
-*
-* In a polled mode, this function will only receive 1 byte which is as much
-* data as the receiver can buffer. The application may need to call it
-* repeatedly to receive a buffer. Polled mode is the default mode of operation
-* for the driver.
-*
-* In interrupt mode, this function will start receiving and then the interrupt
-* handler of the driver will continue until the buffer has been received. A
-* callback function, as specified by the application, will be called to indicate
-* the completion of receiving the buffer or when any receive errors or timeouts
-* occur. Interrupt mode must be enabled using the SetOptions function.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* The number of bytes received.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-unsigned int XPs2_ReceiveBuffer(XPs2 * InstancePtr)
-{
-	unsigned int ReceivedCount = 0;
-
-	/*
-	 * Loop until there is no more date buffered by the PS/2 receiver or the
-	 * specified number of bytes has been received
-	 */
-	while (ReceivedCount < InstancePtr->ReceiveBuffer.RemainingBytes) {
-		/*
-		 * If there is data ready to be read , then put the next byte
-		 * read into the specified buffer
-		 */
-		if (!XPs2_mIsReceiveEmpty(InstancePtr->BaseAddress)) {
-			InstancePtr->ReceiveBuffer.
-			    NextBytePtr[ReceivedCount++] =
-			    XPs2_RecvByte(InstancePtr->BaseAddress);
-		}
-
-		/*
-		 * There is no more data buffered, so exit such that this function does
-		 * not block waiting for data
-		 */
-		else {
-			break;
-		}
-	}
-
-	/*
-	 * Update the receive buffer to reflect the number of bytes that was
-	 * received
-	 */
-	InstancePtr->ReceiveBuffer.NextBytePtr += ReceivedCount;
-	InstancePtr->ReceiveBuffer.RemainingBytes -= ReceivedCount;
-
-	return ReceivedCount;
-}
-
-/****************************************************************************/
-/**
-*
-* This function is a stub handler that is the default handler such that if the
-* application has not set the handler when interrupts are enabled, this
-* function will be called. The function interface has to match the interface
-* specified for a handler even though none of the arguments are used.
-*
-* @param    CallBackRef is unused by this function.
-* @param    Event is unused by this function.
-* @param    ByteCount is unused by this function.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-static void XPs2_StubHandler(void *CallBackRef, u32 Event,
-			     unsigned int ByteCount)
-{
-	/*
-	 * Assert alway occurs since this is a stub and should never be called
-	 */
-	XASSERT_VOID_ALWAYS();
-}
diff --git a/drivers/input/serio/xilinx_ps2/xps2.h b/drivers/input/serio/xilinx_ps2/xps2.h
deleted file mode 100644
index e9e8f79..0000000
--- a/drivers/input/serio/xilinx_ps2/xps2.h
+++ /dev/null
@@ -1,262 +0,0 @@
-/******************************************************************************
-*
-*     Author: Xilinx, Inc.
-*
-*
-*     This program is free software; you can redistribute it and/or modify it
-*     under the terms of the GNU General Public License as published by the
-*     Free Software Foundation; either version 2 of the License, or (at your
-*     option) any later version.
-*
-*
-*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
-*     COURTESY TO YOU. BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
-*     ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD,
-*     XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE
-*     FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING
-*     ANY THIRD PARTY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
-*     XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
-*     THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY
-*     WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM
-*     CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND
-*     FITNESS FOR A PARTICULAR PURPOSE.
-*
-*
-*     Xilinx hardware products are not intended for use in life support
-*     appliances, devices, or systems. Use in such applications is
-*     expressly prohibited.
-*
-*
-*     (c) Copyright 2002-2005 Xilinx Inc.
-*     All rights reserved.
-*
-*
-*     You should have received a copy of the GNU General Public License along
-*     with this program; if not, write to the Free Software Foundation, Inc.,
-*     675 Mass Ave, Cambridge, MA 02139, USA.
-*
-******************************************************************************/
-/*****************************************************************************/
-/**
-*
-* @file xps2.h
-*
-* This driver supports the following features:
-*
-* - Polled mode
-* - Interrupt driven mode
-*
-* <b>Interrupts</b>
-*
-* The device does not have any way to disable the receiver such that the
-* receiver may contain unwanted data. The IP is reset driver is initialized,
-*
-* The driver defaults to no interrupts at initialization such that interrupts
-* must be enabled if desired. An interrupt is generated for any of the following
-* conditions.
-*
-* - Data in the receiver
-* - Any receive status error detected
-* - Data byte transmitted
-* - Any transmit status error detected
-*
-* The application can control which interrupts are enabled using the SetOptions
-* function.
-*
-* In order to use interrupts, it is necessary for the user to connect the
-* driver interrupt handler, XPs2_InterruptHandler(), to the interrupt system of
-* the application. This function does not save and restore the processor
-* context such that the user must provide it. A handler must be set for the
-* driver such that the handler is called when interrupt events occur. The
-* handler is called from interrupt context and is designed to allow application
-*  specific processing to be performed.
-*
-* The functions, XPs2_Send() and Ps2_Recv(), are provided in the driver to
-* allow data to be sent and received. They are designed to be used in polled
-* or interrupt modes.
-*
-* <b>Initialization & Configuration</b>
-*
-* The XPs2_Config structure is used by the driver to configure itself. This
-* configuration structure is typically created by the tool-chain based on HW
-* build properties.
-*
-* To support multiple runtime loading and initialization strategies employed
-* by various operating systems, the driver instance can be initialized in one
-* of the following ways:
-*
-*   - XPs2_Initialize(InstancePtr, DeviceId) - The driver looks up its own
-*     configuration structure created by the tool-chain based on an ID provided
-*     by the tool-chain.
-*
-*   - XPs2_CfgInitialize(InstancePtr, CfgPtr, EffectiveAddr) - Uses a
-*     configuration structure provided by the caller. If running in a system
-*     with address translation, the provided virtual memory base address
-*     replaces the physical address present in the configuration structure.
-*
-* @note
-*
-* None.
-*
-* <pre>
-* MODIFICATION HISTORY:
-*
-* Ver   Who  Date     Changes
-* ----- ---- -------- -----------------------------------------------
-* 1.00a ch   06/18/02 First release
-* 1.01a jvb  12/14/05 I separated dependency on the static config table and
-*                     xparameters.h from the driver initialization by moving
-*                     _Initialize and _LookupConfig to _sinit.c. I also added
-*                     the new _CfgInitialize routine.
-* </pre>
-*
-******************************************************************************/
-
-#ifndef XPS2_H			/* prevent circular inclusions */
-#define XPS2_H			/* by using protection macros */
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/***************************** Include Files ********************************/
-
-#include "xbasic_types.h"
-#include "xstatus.h"
-#include "xps2_l.h"
-
-/************************** Constant Definitions ****************************/
-
-/*
- * These constants specify the handler events that are passed to
- * a handler from the driver. These constants are not bit masks suuch that
- * only one will be passed at a time to the handler
- */
-#define XPS2_EVENT_RECV_DATA    1
-#define XPS2_EVENT_RECV_ERROR   2
-#define XPS2_EVENT_RECV_OVF     3
-#define XPS2_EVENT_SENT_DATA    4
-#define XPS2_EVENT_SENT_NOACK   5
-#define XPS2_EVENT_TIMEOUT      6
-
-/*
- * These constants specify the errors  that may be retrieved from the driver
- * using the XPs2_GetLastErrors function. All of them are bit masks, except
- * no error, such that multiple errors may be specified.
- */
-#define XPS2_ERROR_NONE            0x00
-#define XPS2_ERROR_WDT_TOUT_MASK   0x01
-#define XPS2_ERROR_TX_NOACK_MASK   0x02
-#define XPS2_ERROR_RX_OVF_MASK     0x08
-#define XPS2_ERROR_RX_ERR_MASK     0x10
-
-/**************************** Type Definitions ******************************/
-
-/*
- * This typedef contains configuration information for the device
- */
-	typedef struct {
-		u16 DeviceId;	/* Unique ID  of device */
-		u32 BaseAddress;	/* Base address of device */
-	} XPs2_Config;
-
-/*
- * The following data type is used to manage the buffers that are handled
- * when sending and receiving data in the interrupt mode
- */
-	typedef struct {
-		u8 *NextBytePtr;
-		unsigned int RequestedBytes;
-		unsigned int RemainingBytes;
-	} XPs2Buffer;
-
-/*
- * This data type defines a handler which the application must define
- * when using interrupt mode.  The handler will be called from the driver in an
- * interrupt context to handle application specific processing.
- *
- * @param CallBackRef is a callback reference passed in by the upper layer
- *        when setting the handler, and is passed back to the upper layer when
- *        the handler is called.
- * @param Event contains one of the event constants indicating why the handler
- *        is being called.
- * @param EventData contains the number of bytes sent or received at the time
-*         of the call.
-*/
-	typedef void (*XPs2_Handler) (void *CallBackRef, u32 Event,
-				      unsigned int EventData);
-/*
- * PS/2 statistics
- */
-	typedef struct {
-		u16 TransmitInterrupts;
-		u16 ReceiveInterrupts;
-		u16 CharactersTransmitted;
-		u16 CharactersReceived;
-		u16 ReceiveErrors;
-		u16 ReceiveOverflowErrors;
-		u16 TransmitErrors;
-	} XPs2Stats;
-
-/*
- * The PS/2 driver instance data. The user is required to allocate a
- * variable of this type for every PS/2 device in the system.
- * If the last byte of a message was received then call the application
- * handler, this code should not use an else from the previous check of
- * the number of bytes to receive because the call to receive the buffer
- * updates the bytes to receive
- * A pointer to a variable of this type is then passed to the driver API
- * functions
- */
-	typedef struct {
-		XPs2Stats Stats;	/* Component Statistics */
-		u32 BaseAddress;	/* Base address of device (IPIF) */
-		u32 IsReady;	/* Device is initialized and ready */
-		u8 LastErrors;	/* the accumulated errors */
-
-		XPs2Buffer SendBuffer;
-		XPs2Buffer ReceiveBuffer;
-
-		XPs2_Handler Handler;
-		void *CallBackRef;	/* Callback reference for control handler */
-	} XPs2;
-
-/***************** Macros (Inline Functions) Definitions ********************/
-
-/************************** Function Prototypes *****************************/
-
-/*
- * Initialization functions in xps2_sinit.c
- */
-	int XPs2_Initialize(XPs2 * InstancePtr, u16 DeviceId);
-	XPs2_Config *XPs2_LookupConfig(u16 DeviceId);
-
-/*
- * required functions is xps2.c
- */
-	int XPs2_CfgInitialize(XPs2 * InstancePtr, XPs2_Config * Config,
-				   u32 EffectiveAddr);
-	unsigned int XPs2_Send(XPs2 * InstancePtr, u8 * BufferPtr,
-			       unsigned int NumBytes);
-	unsigned int XPs2_Recv(XPs2 * InstancePtr, u8 * BufferPtr,
-			       unsigned int NumBytes);
-
-/*
- * options functions in xps2_options.c
- */
-	u8 XPs2_GetLastErrors(XPs2 * InstancePtr);
-	u32 XPs2_IsSending(XPs2 * InstancePtr);
-
-/*
- * interrupt functions in xps2_intr.c
- */
-	void XPs2_SetHandler(XPs2 * InstancePtr, XPs2_Handler FuncPtr,
-			     void *CallBackRef);
-	void XPs2_InterruptHandler(XPs2 * InstancePtr);
-	void XPs2_EnableInterrupt(XPs2 * InstancePtr);
-	void XPs2_DisableInterrupt(XPs2 * InstancePtr);
-
-#ifdef __cplusplus
-}
-#endif
-#endif				/* end of protection macro */
diff --git a/drivers/input/serio/xilinx_ps2/xps2_i.h b/drivers/input/serio/xilinx_ps2/xps2_i.h
deleted file mode 100644
index 5344769..0000000
--- a/drivers/input/serio/xilinx_ps2/xps2_i.h
+++ /dev/null
@@ -1,113 +0,0 @@
-/******************************************************************************
-*
-*     Author: Xilinx, Inc.
-*
-*
-*     This program is free software; you can redistribute it and/or modify it
-*     under the terms of the GNU General Public License as published by the
-*     Free Software Foundation; either version 2 of the License, or (at your
-*     option) any later version.
-*
-*
-*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
-*     COURTESY TO YOU. BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
-*     ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD,
-*     XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE
-*     FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING
-*     ANY THIRD PARTY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
-*     XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
-*     THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY
-*     WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM
-*     CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND
-*     FITNESS FOR A PARTICULAR PURPOSE.
-*
-*
-*     Xilinx hardware products are not intended for use in life support
-*     appliances, devices, or systems. Use in such applications is
-*     expressly prohibited.
-*
-*
-*     (c) Copyright 2002 Xilinx Inc.
-*     All rights reserved.
-*
-*
-*     You should have received a copy of the GNU General Public License along
-*     with this program; if not, write to the Free Software Foundation, Inc.,
-*     675 Mass Ave, Cambridge, MA 02139, USA.
-*
-******************************************************************************/
-/****************************************************************************/
-/**
-*
-* @file xps2_i.h
-*
-* This header file contains internal identifiers, which are those shared
-* between the files of the driver. It is intended for internal use only.
-*
-* <pre>
-* MODIFICATION HISTORY:
-*
-* Ver   Who  Date     Changes
-* ----- ---- -------- -----------------------------------------------
-* 1.00a ch   06/18/02 First release
-* </pre>
-*
-******************************************************************************/
-#ifndef XPS2_I_H		/* prevent circular inclusions */
-#define XPS2_I_H		/* by using protection macros */
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/***************************** Include Files ********************************/
-
-#include "xps2.h"
-
-/************************** Constant Definitions ****************************/
-
-/**************************** Type Definitions ******************************/
-
-/***************** Macros (Inline Functions) Definitions ********************/
-
-/****************************************************************************
-*
-* This macro clears the statistics of the component instance. The purpose of
-* this macro is to allow common processing between the modules of the
-* component with less overhead than a function in the required module.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* Signature: void XPs2_mClearStats(XPs2 *InstancePtr)
-*
-*****************************************************************************/
-#define XPs2_mClearStats(InstancePtr)                             \
-{                                                                       \
-    InstancePtr->Stats.TransmitInterrupts = 0UL;                        \
-    InstancePtr->Stats.ReceiveInterrupts = 0UL;                         \
-    InstancePtr->Stats.CharactersTransmitted = 0UL;                     \
-    InstancePtr->Stats.CharactersReceived = 0UL;                        \
-    InstancePtr->Stats.ReceiveErrors = 0UL;                             \
-    InstancePtr->Stats.ReceiveOverflowErrors = 0UL;                     \
-    InstancePtr->Stats.TransmitErrors = 0UL;                            \
-}
-
-/************************** Variable Definitions ****************************/
-
-	extern XPs2_Config XPs2_ConfigTable[];
-
-/************************** Function Prototypes *****************************/
-
-	unsigned int XPs2_SendBuffer(XPs2 * InstancePtr);
-	unsigned int XPs2_ReceiveBuffer(XPs2 * InstancePtr);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
diff --git a/drivers/input/serio/xilinx_ps2/xps2_intr.c b/drivers/input/serio/xilinx_ps2/xps2_intr.c
deleted file mode 100644
index 72dee74..0000000
--- a/drivers/input/serio/xilinx_ps2/xps2_intr.c
+++ /dev/null
@@ -1,485 +0,0 @@
-/******************************************************************************
-*
-*     Author: Xilinx, Inc.
-*
-*
-*     This program is free software; you can redistribute it and/or modify it
-*     under the terms of the GNU General Public License as published by the
-*     Free Software Foundation; either version 2 of the License, or (at your
-*     option) any later version.
-*
-*
-*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
-*     COURTESY TO YOU. BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
-*     ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD,
-*     XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE
-*     FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING
-*     ANY THIRD PARTY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
-*     XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
-*     THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY
-*     WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM
-*     CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND
-*     FITNESS FOR A PARTICULAR PURPOSE.
-*
-*
-*     Xilinx hardware products are not intended for use in life support
-*     appliances, devices, or systems. Use in such applications is
-*     expressly prohibited.
-*
-*
-*     (c) Copyright 2002 Xilinx Inc.
-*     All rights reserved.
-*
-*
-*     You should have received a copy of the GNU General Public License along
-*     with this program; if not, write to the Free Software Foundation, Inc.,
-*     675 Mass Ave, Cambridge, MA 02139, USA.
-*
-******************************************************************************/
-/****************************************************************************/
-/**
-*
-* @file xps2_intr.c
-*
-* This file contains the functions that are related to interrupt processing
-* for the PS/2 driver.
-*
-* <pre>
-* MODIFICATION HISTORY:
-*
-* Ver   Who  Date     Changes
-* ----- ---- -------- -----------------------------------------------
-* 1.00a ch   06/18/02 First release
-* </pre>
-*
-*****************************************************************************/
-/***************************** Include Files ********************************/
-
-#include "xps2.h"
-#include "xps2_i.h"
-#include "xio.h"
-
-/************************** Constant Definitions ****************************/
-
-/**************************** Type Definitions ******************************/
-
-/***************** Macros (Inline Functions) Definitions ********************/
-
-/************************** Variable Definitions ****************************/
-
-typedef void (*Handler) (XPs2 * InstancePtr);
-
-/************************** Function Prototypes *****************************/
-
-static void ReceiveDataHandler(XPs2 * InstancePtr);
-static void ReceiveErrorHandler(XPs2 * InstancePtr);
-static void ReceiveOverflowHandler(XPs2 * InstancePtr);
-static void SendDataHandler(XPs2 * InstancePtr);
-static void SendErrorHandler(XPs2 * InstancePtr);
-static void TimeoutHandler(XPs2 * InstancePtr);
-
-/****************************************************************************/
-/**
-*
-* This function sets the handler that will be called when an event (interrupt)
-* occurs in the driver. The purpose of the handler is to allow application
-* specific processing to be performed.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-* @param    FuncPtr is the pointer to the callback function.
-* @param    CallBackRef is the upper layer callback reference passed back when
-*           the callback function is invoked.
-*
-* @return
-*
-* None.
-*
-* @notes
-*
-* There is no assert on the CallBackRef since the driver doesn't know what it
-* is (nor should it)
-*
-*****************************************************************************/
-void XPs2_SetHandler(XPs2 * InstancePtr, XPs2_Handler FuncPtr,
-		     void *CallBackRef)
-{
-	/*
-	 * Assert validates the input arguments
-	 * CallBackRef not checked, no way to know what is valid
-	 */
-	XASSERT_VOID(InstancePtr != NULL);
-	XASSERT_VOID(FuncPtr != NULL);
-	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
-
-	InstancePtr->Handler = FuncPtr;
-	InstancePtr->CallBackRef = CallBackRef;
-}
-
-/****************************************************************************/
-/**
-*
-* This function is the interrupt handler for the PS/2 driver.
-* It must be connected to an interrupt system by the user such that it is
-* called when an interrupt for any PS/2 port occurs. This function does 
-* not save or restore the processor context such that the user must
-* ensure this occurs.
-*
-* @param    InstancePtr contains a pointer to the instance of the PS/2 port
-*           that the interrupt is for.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-******************************************************************************/
-void XPs2_InterruptHandler(XPs2 * InstancePtr)
-{
-	u8 IntrStatus;
-
-	XASSERT_VOID(InstancePtr != NULL);
-
-	/*
-	 * Read the interrupt status register to determine which
-	 * interrupt is active
-	 */
-	IntrStatus = XPs2_mGetIntrStatus(InstancePtr->BaseAddress);
-
-	if (IntrStatus & XPS2_INT_WDT_TOUT) {
-		TimeoutHandler(InstancePtr);
-	}
-
-	if (IntrStatus & XPS2_INT_RX_ERR) {
-		ReceiveErrorHandler(InstancePtr);
-	}
-
-	if (IntrStatus & XPS2_INT_RX_OVF) {
-		ReceiveOverflowHandler(InstancePtr);
-	}
-
-	if (IntrStatus & XPS2_INT_TX_NOACK) {
-		SendErrorHandler(InstancePtr);
-	}
-
-	if (IntrStatus & XPS2_INT_RX_FULL) {
-		ReceiveDataHandler(InstancePtr);
-	}
-
-	if (IntrStatus & XPS2_INT_TX_ACK) {
-		SendDataHandler(InstancePtr);
-	}
-}
-
-/****************************************************************************/
-/**
-*
-* This function enables the PS/2 interrupts.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-void XPs2_EnableInterrupt(XPs2 * InstancePtr)
-{
-	/*
-	 * ASSERT the arguments
-	 */
-	XASSERT_VOID(InstancePtr != NULL);
-	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
-
-	/*
-	 * Enable all receiver interrupts (RX_FULL, RX_ERR, RX_OVF)
-	 * transmitter interrupts are enabled when sending data.
-	 */
-	XPs2_mEnableIntr(InstancePtr->BaseAddress, XPS2_INT_RX_ALL);
-}
-
-/****************************************************************************/
-/**void XPs2_DisableInterrupt
-*
-* This function disables the PS/2 interrupts.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-void XPs2_DisableInterrupt(XPs2 * InstancePtr)
-{
-	/*
-	 * ASSERT the arguments
-	 */
-	XASSERT_VOID(InstancePtr != NULL);
-	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
-
-	/*
-	 * Disable all interrupts.
-	 */
-	XPs2_mDisableIntr(InstancePtr->BaseAddress, XPS2_INT_ALL);
-}
-
-/****************************************************************************/
-/**
-*
-* This function handles the interrupt when data is received.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-static void ReceiveDataHandler(XPs2 * InstancePtr)
-{
-	XPs2_mClearIntr(InstancePtr->BaseAddress, XPS2_INT_RX_FULL);
-
-	/*
-	 * If there are bytes still to be received in the specified buffer
-	 * go ahead and receive them
-	 */
-	if (InstancePtr->ReceiveBuffer.RemainingBytes != 0) {
-		XPs2_ReceiveBuffer(InstancePtr);
-	}
-
-	/*
-	 * If the last byte of a message was received then call the application
-	 * handler, this code should not use an else from the previous check of
-	 * the number of bytes to receive because the call to receive the buffer
-	 * updates the bytes to receive
-	 */
-	if (InstancePtr->ReceiveBuffer.RemainingBytes == 0) {
-		InstancePtr->Handler(InstancePtr->CallBackRef,
-				     XPS2_EVENT_RECV_DATA,
-				     InstancePtr->ReceiveBuffer.RequestedBytes -
-				     InstancePtr->ReceiveBuffer.RemainingBytes);
-	}
-
-	/*
-	 * Update the receive stats to reflect the receive interrupt
-	 */
-	InstancePtr->Stats.ReceiveInterrupts++;
-}
-
-/****************************************************************************/
-/**
-*
-* This function handles the receive error interrupt.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-static void ReceiveErrorHandler(XPs2 * InstancePtr)
-{
-	XPs2_mClearIntr(InstancePtr->BaseAddress, XPS2_INT_RX_ERR);
-
-	/*
-	 * Call the application handler with an error code
-	 */
-	InstancePtr->Handler(InstancePtr->CallBackRef, XPS2_EVENT_RECV_ERROR,
-			     InstancePtr->ReceiveBuffer.RequestedBytes -
-			     InstancePtr->ReceiveBuffer.RemainingBytes);
-
-	/*
-	 * Update the LastError variable
-	 */
-	InstancePtr->LastErrors |= XPS2_ERROR_RX_ERR_MASK;
-
-	/*
-	 * Update the receive stats to reflect the receive error interrupt
-	 */
-	InstancePtr->Stats.ReceiveErrors++;
-}
-
-/****************************************************************************/
-/**
-*
-* This function handles the receive overflow interrupt.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-static void ReceiveOverflowHandler(XPs2 * InstancePtr)
-{
-	XPs2_mClearIntr(InstancePtr->BaseAddress, XPS2_INT_RX_OVF);
-
-	/*
-	 * Call the application handler with an error code
-	 */
-	InstancePtr->Handler(InstancePtr->CallBackRef, XPS2_EVENT_RECV_OVF,
-			     InstancePtr->ReceiveBuffer.RequestedBytes -
-			     InstancePtr->ReceiveBuffer.RemainingBytes);
-
-	/*
-	 * Update the LastError variable
-	 */
-	InstancePtr->LastErrors |= XPS2_ERROR_RX_OVF_MASK;
-
-	/*
-	 * Update the receive stats to reflect the receive interrupt
-	 */
-	InstancePtr->Stats.ReceiveOverflowErrors++;
-}
-
-/****************************************************************************/
-/**
-*
-* This function handles the interrupt when data has been sent, the transmit
-* transmitter holding register is empty.
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-static void SendDataHandler(XPs2 * InstancePtr)
-{
-	XPs2_mClearIntr(InstancePtr->BaseAddress, XPS2_INT_TX_ACK);
-
-	/*
-	 * If there are no bytes to be sent from the specified buffer then disable
-	 * the transmit interrupt
-	 */
-	if (InstancePtr->SendBuffer.RemainingBytes == 0) {
-		XPs2_mDisableIntr(InstancePtr->BaseAddress, XPS2_INT_TX_ALL);
-
-		/*
-		 * Call the application handler to indicate the data has been sent
-		 */
-		InstancePtr->Handler(InstancePtr->CallBackRef,
-				     XPS2_EVENT_SENT_DATA,
-				     InstancePtr->SendBuffer.RequestedBytes -
-				     InstancePtr->SendBuffer.RemainingBytes);
-	}
-
-	/*
-	 * Otherwise there is still more data to send in the specified buffer
-	 * so go ahead and send it
-	 */
-	else {
-		XPs2_SendBuffer(InstancePtr);
-	}
-
-	/*
-	 * Update the transmit stats to reflect the transmit interrupt
-	 */
-	InstancePtr->Stats.TransmitInterrupts++;
-}
-
-/****************************************************************************/
-/**
-*
-* This function handles the interrupt when a transmit is not acknowledged
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-static void SendErrorHandler(XPs2 * InstancePtr)
-{
-	XPs2_mClearIntr(InstancePtr->BaseAddress, XPS2_INT_TX_NOACK);
-
-	/*
-	 * Call the application handler
-	 */
-	InstancePtr->Handler(InstancePtr->CallBackRef, XPS2_EVENT_SENT_NOACK,
-			     InstancePtr->SendBuffer.RequestedBytes -
-			     InstancePtr->SendBuffer.RemainingBytes);
-
-	/*
-	 * Update the LastError variable
-	 */
-	InstancePtr->LastErrors |= XPS2_ERROR_TX_NOACK_MASK;
-
-	/*
-	 * Update the transmit stats to reflect the transmit interrupt
-	 */
-	InstancePtr->Stats.TransmitErrors++;
-}
-
-/****************************************************************************/
-/**
-*
-* This function handles the interrupt when timeout occurrs
-*
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-*
-* @return
-*
-* None.
-*
-* @note
-*
-* None.
-*
-*****************************************************************************/
-static void TimeoutHandler(XPs2 * InstancePtr)
-{
-	XPs2_mClearIntr(InstancePtr->BaseAddress, XPS2_INT_WDT_TOUT);
-
-	/*
-	 * Call the application handler
-	 */
-	InstancePtr->Handler(InstancePtr->CallBackRef, XPS2_EVENT_TIMEOUT,
-			     InstancePtr->SendBuffer.RequestedBytes -
-			     InstancePtr->SendBuffer.RemainingBytes);
-
-	/*
-	 * Update the LastError variable
-	 */
-	InstancePtr->LastErrors |= XPS2_ERROR_WDT_TOUT_MASK;
-
-	/*
-	 * Update the transmit stats to reflect the transmit interrupt
-	 */
-	InstancePtr->Stats.TransmitErrors++;
-}
diff --git a/drivers/input/serio/xilinx_ps2/xps2_l.c b/drivers/input/serio/xilinx_ps2/xps2_l.c
deleted file mode 100644
index de81d5b..0000000
--- a/drivers/input/serio/xilinx_ps2/xps2_l.c
+++ /dev/null
@@ -1,115 +0,0 @@
-/******************************************************************************
-*
-*     Author: Xilinx, Inc.
-*
-*
-*     This program is free software; you can redistribute it and/or modify it
-*     under the terms of the GNU General Public License as published by the
-*     Free Software Foundation; either version 2 of the License, or (at your
-*     option) any later version.
-*
-*
-*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
-*     COURTESY TO YOU. BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
-*     ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD,
-*     XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE
-*     FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING
-*     ANY THIRD PARTY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
-*     XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
-*     THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY
-*     WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM
-*     CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND
-*     FITNESS FOR A PARTICULAR PURPOSE.
-*
-*
-*     Xilinx hardware products are not intended for use in life support
-*     appliances, devices, or systems. Use in such applications is
-*     expressly prohibited.
-*
-*
-*     (c) Copyright 2002 Xilinx Inc.
-*     All rights reserved.
-*
-*
-*     You should have received a copy of the GNU General Public License along
-*     with this program; if not, write to the Free Software Foundation, Inc.,
-*     675 Mass Ave, Cambridge, MA 02139, USA.
-*
-******************************************************************************/
-/*****************************************************************************/
-/**
-*
-* @file xps2_l.c
-*
-* This file contains low-level driver functions that can be used to access the
-* device.  The user should refer to the hardware device specification for more
-* details of the device operation.
-*
-* <pre>
-* MODIFICATION HISTORY:
-*
-* Ver   Who  Date     Changes
-* ----- ---- -------- -----------------------------------------------
-* 1.00a ch   06/18/02 First release
-* </pre>
-*
-******************************************************************************/
-
-/***************************** Include Files *********************************/
-
-#include "xps2_l.h"
-
-/************************** Constant Definitions *****************************/
-
-/**************************** Type Definitions *******************************/
-
-/***************** Macros (Inline Functions) Definitions *********************/
-
-/************************** Function Prototypes ******************************/
-
-/************************** Variable Definitions *****************************/
-
-/****************************************************************************/
-/**
-*
-* This function sends a data byte to PS/2. This function operates in the
-* polling mode and blocks until the data has been put into the transmit
-* holding register.
-*
-* @param    BaseAddress contains the base address of the PS/2 port.
-* @param    Data contains the data byte to be sent.
-*
-* @return   None.
-*
-* @note     None.
-*
-*****************************************************************************/
-
-void XPs2_SendByte(u32 BaseAddress, u8 Data)
-{
-	while (XPs2_mIsTransmitFull(BaseAddress)) {
-	}
-
-	XIo_Out8(BaseAddress + XPS2_TX_REG_OFFSET, Data);
-}
-
-/****************************************************************************/
-/**
-*
-* This function receives a byte from PS/2. It operates in the polling mode
-* and blocks until a byte of data is received.
-*
-* @param    BaseAddress contains the base address of the PS/2 port.
-*
-* @return   The data byte received by PS/2.
-*
-* @note     None.
-*
-*****************************************************************************/
-u8 XPs2_RecvByte(u32 BaseAddress)
-{
-	while (XPs2_mIsReceiveEmpty(BaseAddress)) {
-	}
-
-	return (u8) XIo_In8(BaseAddress + XPS2_RX_REG_OFFSET);
-}
diff --git a/drivers/input/serio/xilinx_ps2/xps2_l.h b/drivers/input/serio/xilinx_ps2/xps2_l.h
deleted file mode 100644
index 24fff93..0000000
--- a/drivers/input/serio/xilinx_ps2/xps2_l.h
+++ /dev/null
@@ -1,269 +0,0 @@
-/******************************************************************************
-*
-*     Author: Xilinx, Inc.
-*
-*
-*     This program is free software; you can redistribute it and/or modify it
-*     under the terms of the GNU General Public License as published by the
-*     Free Software Foundation; either version 2 of the License, or (at your
-*     option) any later version.
-*
-*
-*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
-*     COURTESY TO YOU. BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
-*     ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD,
-*     XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE
-*     FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING
-*     ANY THIRD PARTY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
-*     XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
-*     THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY
-*     WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM
-*     CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND
-*     FITNESS FOR A PARTICULAR PURPOSE.
-*
-*
-*     Xilinx hardware products are not intended for use in life support
-*     appliances, devices, or systems. Use in such applications is
-*     expressly prohibited.
-*
-*
-*     (c) Copyright 2002 Xilinx Inc.
-*     All rights reserved.
-*
-*
-*     You should have received a copy of the GNU General Public License along
-*     with this program; if not, write to the Free Software Foundation, Inc.,
-*     675 Mass Ave, Cambridge, MA 02139, USA.
-*
-******************************************************************************/
-/*****************************************************************************/
-/**
-*
-* @file xps2_l.h
-*
-* This header file contains identifiers and low-level driver functions (or
-* macros) that can be used to access the device.  The user should refer to the
-* hardware device specification for more details of the device operation.
-* High-level driver functions are defined in xps2.h.
-*
-* <pre>
-* MODIFICATION HISTORY:
-*
-* Ver   Who  Date     Changes
-* ----- ---- -------- -----------------------------------------------
-* 1.00a ch   06/18/02 First release
-* </pre>
-*
-******************************************************************************/
-
-#ifndef XPS2_L_H		/* prevent circular inclusions */
-#define XPS2_L_H		/* by using protection macros */
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/***************************** Include Files ********************************/
-
-#include "xbasic_types.h"
-#include "xio.h"
-
-/************************** Constant Definitions ****************************/
-
-/* PS/2 register offsets */
-#define XPS2_RESET_OFFSET            0	/* reset register, write only */
-#define XPS2_STATUS_OFFSET           4	/* status register, read only */
-#define XPS2_RX_REG_OFFSET           8	/* receive register, read only */
-#define XPS2_TX_REG_OFFSET           12	/* transmit register, write only */
-#define XPS2_INTSTA_REG_OFFSET       16	/* int status register, read only */
-#define XPS2_INTCLR_REG_OFFSET       20	/* int clear register, write only */
-#define XPS2_INTMSET_REG_OFFSET      24	/* mask set register, read/write */
-#define XPS2_INTMCLR_REG_OFFSET      28	/* mask clear register, write only */
-
-/* reset register bit positions */
-#define XPS2_CLEAR_RESET             0x00
-#define XPS2_RESET                   0x01
-
-/* status register bit positions */
-#define XPS2_ST_RX_FULL              0x01
-#define XPS2_ST_TX_FULL              0x02
-
-/* interrupt register bit positions */
-/* used for the INTSTA, INTCLR, INTMSET, INTMCLR register */
-#define XPS2_INT_WDT_TOUT            0x01
-#define XPS2_INT_TX_NOACK            0x02
-#define XPS2_INT_TX_ACK              0x04
-#define XPS2_INT_TX_ALL              0x06
-#define XPS2_INT_RX_OVF              0x08
-#define XPS2_INT_RX_ERR              0x10
-#define XPS2_INT_RX_FULL             0x20
-#define XPS2_INT_RX_ALL              0x38
-#define XPS2_INT_ALL                 0x3f
-
-/**************************** Type Definitions ******************************/
-
-/***************** Macros (Inline Functions) Definitions ********************/
-
-/*****************************************************************************
-*
-* Low-level driver macros.  The list below provides signatures to help the
-* user use the macros.
-*
-* void XPs2_mReset(u32 BaseAddress)
-* u8 XPs2_mGetStatus(u32 BaseAddress)
-*
-* u8 XPs2_mGetIntrStatus(u32 BaseAddress)
-* void XPs2_mClearIntr(u32 BaseAddress, u8 ClearMask)
-* u32 XPs2_mIsIntrEnabled(u32 BaseAddress, u8 EnabledMask)
-* void XPs2_mEnableIntr(u32 BaseAddress, u8 EnableMask)
-* void XPs2_mDisableIntr(u32 BaseAddress, u8 DisableMask)
-*
-* u32 XPs2_mIsReceiveEmpty(u32 BaseAddress)
-* u32 XPs2_mIsTransmitFull(u32 BaseAddress)
-*
-*****************************************************************************/
-
-/****************************************************************************/
-/**
-* Reset the PS/2 port.
-*
-* @param    BaseAddress contains the base address of the device.
-*
-* @return   None.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mReset(BaseAddress) \
-            XIo_Out8(((BaseAddress) + XPS2_RESET_OFFSET), XPS2_RESET); \
-            XIo_Out8(((BaseAddress) + XPS2_RESET_OFFSET), XPS2_CLEAR_RESET)
-
-/****************************************************************************/
-/**
-* Read the PS/2 status register.
-*
-* @param    BaseAddress contains the base address of the device.
-*
-* @return   The value read from the register.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mGetStatus(BaseAddress) \
-            (XIo_In8((BaseAddress) + XPS2_STATUS_OFFSET))
-
-/****************************************************************************/
-/**
-* Read the interrupt status register.
-*
-* @param    BaseAddress contains the base address of the device.
-*
-* @return   The value read from the register.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mGetIntrStatus(BaseAddress) \
-            (XIo_In8((BaseAddress) + XPS2_INTSTA_REG_OFFSET))
-
-/****************************************************************************/
-/**
-* Clear pending interrupts.
-*
-* @param    BaseAddress contains the base address of the device.
-*           Bitmask for interrupts to be cleared. A "1" clears the interrupt.
-*
-* @return   None.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mClearIntr(BaseAddress, ClearMask) \
-            XIo_Out8((BaseAddress) + XPS2_INTCLR_REG_OFFSET, (ClearMask))
-
-/****************************************************************************/
-/**
-* Check for enabled interrupts.
-*
-* @param    BaseAddress contains the base address of the device.
-*           Bitmask for interrupts to be checked.
-*
-* @return   TRUE if the interrupt is enabled, FALSE otherwise.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mIsIntrEnabled(BaseAddress, EnabledMask) \
-            (XIo_In8((BaseAddress) + XPS2_INTMSET_REG_OFFSET) & (EnabledMask))
-
-/****************************************************************************/
-/**
-* Enable Interrupts.
-*
-* @param    BaseAddress contains the base address of the device.
-*           Bitmask for interrupts to be enabled.
-*
-* @return   None.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mEnableIntr(BaseAddress, EnableMask) \
-            XIo_Out8((BaseAddress) + XPS2_INTMSET_REG_OFFSET, (EnableMask))
-
-/****************************************************************************/
-/**
-* Disable Interrupts.
-*
-* @param    BaseAddress contains the base address of the device.
-*           Bitmask for interrupts to be disabled.
-*
-* @return   None.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mDisableIntr(BaseAddress, DisableMask) \
-            XIo_Out8((BaseAddress) + XPS2_INTMCLR_REG_OFFSET, (DisableMask))
-
-/****************************************************************************/
-/**
-* Determine if there is receive data in the receiver.
-*
-* @param    BaseAddress contains the base address of the device.
-*
-* @return   TRUE if there is receive data, FALSE otherwise.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mIsReceiveEmpty(BaseAddress) \
-            (!(XPs2_mGetStatus(BaseAddress) & XPS2_ST_RX_FULL))
-
-/****************************************************************************/
-/**
-* Determine if a byte of data can be sent with the transmitter.
-*
-* @param    BaseAddress contains the base address of the device.
-*
-* @return   TRUE if a byte can be sent, FALSE otherwise.
-*
-* @note     None.
-*
-******************************************************************************/
-#define XPs2_mIsTransmitFull(BaseAddress) \
-            (XPs2_mGetStatus(BaseAddress) & XPS2_ST_TX_FULL)
-
-/************************** Variable Definitions ****************************/
-
-/************************** Function Prototypes *****************************/
-
-	void XPs2_SendByte(u32 BaseAddress, u8 Data);
-	u8 XPs2_RecvByte(u32 BaseAddress);
-
-/****************************************************************************/
-
-#ifdef __cplusplus
-}
-#endif
-#endif
diff --git a/drivers/input/serio/xilinx_ps2/xps2_linux.c b/drivers/input/serio/xilinx_ps2/xps2_linux.c
deleted file mode 100644
index 3385dfb..0000000
--- a/drivers/input/serio/xilinx_ps2/xps2_linux.c
+++ /dev/null
@@ -1,430 +0,0 @@
-/*
- * xps2_linux.c
- *
- * Xilinx PS/2 driver to interface PS/2 component to Linux
- *
- * Author: MontaVista Software, Inc.
- *         source@mvista.com
- *
- * 2005 (c)MontaVista Software, Inc. This file is licensed under
- * the terms of the GNU General Public License version 2. This program
- * is licensed "as is" without any warranty of any kind, whether express
- * or implied.
- */
-
-/*
- * This driver is a bit unusual in that it is composed of two logical
- * parts where one part is the OS independent code and the other part is
- * the OS dependent code.  Xilinx provides their drivers split in this
- * fashion.  This file represents the Linux OS dependent part known as
- * the Linux adapter.  The other files in this directory are the OS
- * independent files as provided by Xilinx with no changes made to them.
- * The names exported by those files begin with XPs2_.  All functions
- * in this file that are called by Linux have names that begin with
- * xps2_.  Any other functions are static helper functions.
- */
-
-#include <linux/platform_device.h>
-#include <linux/module.h>
-#include <linux/serio.h>
-#include <linux/interrupt.h>
-#include <linux/errno.h>
-#include <linux/init.h>
-#include <linux/list.h>
-#include <linux/xilinx_devices.h>
-#include <asm/io.h>
-
-#ifdef CONFIG_OF
-// For open firmware.
-#include <linux/of_device.h>
-#include <linux/of_platform.h>
-#endif
-
-#include "xps2.h"
-
-#define DRIVER_NAME		"xilinx_ps2"
-#define DRIVER_DESCRIPTION	"Xilinx PS/2 driver"
-
-#define XPS2_NAME_DESC		"Xilinx PS/2 Port #%d"
-#define XPS2_PHYS_DESC		"xilinxps2/serio%d"
-
-struct xps2data {
-	int irq;
-	u32 phys_addr;
-	u32 remap_size;
-	struct pt_regs *saved_regs;
-	spinlock_t lock;
-	u8 rxb;			/* Rx buffer */
-	unsigned long tx_end;
-	unsigned int dfl;
-	/*
-	 * The underlying OS independent code needs space as well.  A
-	 * pointer to the following XPs2 structure will be passed to
-	 * any XPs2_ function that requires it.  However, we treat the
-	 * data as an opaque object in this file (meaning that we never
-	 * reference any of the fields inside of the structure).
-	 */
-	XPs2 ps2;
-	/*
-	 * serio
-	 */
-	struct serio serio;
-};
-
-/*******************************************************************************
- * This configuration stuff should become unnecessary after EDK version 8.x is
- * released.
- ******************************************************************************/
-
-static DECLARE_MUTEX(cfg_sem);
-
-/*********************/
-/* Interrupt handler */
-/*********************/
-
-static irqreturn_t xps2_interrupt(int irq, void *dev_id)
-{
-	struct xps2data *drvdata = (struct xps2data *)dev_id;
-
-	/* Call EDK handler */
-	XPs2_InterruptHandler(&drvdata->ps2);
-
-	return IRQ_HANDLED;
-}
-
-static void sxps2_handler(void *CallbackRef, u32 Event, unsigned int EventData)
-{
-	struct xps2data *drvdata = (struct xps2data *)CallbackRef;
-	u8 c;
-
-	switch (Event) {
-	case XPS2_EVENT_RECV_OVF:
-		printk(KERN_ERR "%s: receive overrun error.\n",
-		       drvdata->serio.name);
-	case XPS2_EVENT_RECV_ERROR:
-		drvdata->dfl |= SERIO_PARITY;
-		break;
-	case XPS2_EVENT_SENT_NOACK:
-	case XPS2_EVENT_TIMEOUT:
-		drvdata->dfl |= SERIO_TIMEOUT;
-		break;
-	case XPS2_EVENT_RECV_DATA:
-		if (EventData > 0) {
-			if (EventData != 1) {
-				printk(KERN_ERR
-				       "%s: wrong rcvd byte count (%d).\n",
-				       drvdata->serio.name, EventData);
-			}
-			c = drvdata->rxb;
-
-			XPs2_Recv(&drvdata->ps2, &drvdata->rxb, 1);
-			serio_interrupt(&drvdata->serio, c, drvdata->dfl);
-			drvdata->dfl = 0;
-		}
-		break;
-	case XPS2_EVENT_SENT_DATA:
-		break;
-	default:
-		printk(KERN_ERR "%s: unrecognized event %u.\n",
-		       drvdata->serio.name, Event);
-	}
-}
-
-/*******************/
-/* serio callbacks */
-/*******************/
-
-/*
- * sxps2_write() sends a byte out through the PS/2 interface.
- *
- * The sole purpose of drvdata->tx_end is to prevent the driver
- * from locking up in the do {} while; loop when nothing is connected
- * to the given PS/2 port. That's why we do not try to recover
- * from the transmission failure.
- * drvdata->tx_end needs not to be initialized to some "far in the
- * future" value, as the very first attempt to XPs2_Send() a byte
- * is always successfull, and drvdata->tx_end will be set to a proper
- * value at that moment - before the 1st use in the comparison.
- */
-static int sxps2_write(struct serio *pserio, unsigned char c)
-{
-	struct xps2data *drvdata = pserio->port_data;
-	unsigned long flags;
-	int retval;
-
-	do {
-		spin_lock_irqsave(&drvdata->lock, flags);
-		retval = XPs2_Send(&drvdata->ps2, &c, 1);
-		spin_unlock_irqrestore(&drvdata->lock, flags);
-
-		if (retval == 1) {
-			drvdata->tx_end = jiffies + HZ;
-			return 0;	/* success */
-		}
-	} while (!time_after(jiffies, drvdata->tx_end));
-
-	return 1;		/* transmission is frozen */
-}
-
-/*
- * sxps2_open() is called when a port is open by the higher layer.
- */
-
-static int sxps2_open(struct serio *pserio)
-{
-	struct xps2data *drvdata = pserio->port_data;
-	int retval;
-
-	retval = request_irq(drvdata->irq, &xps2_interrupt, 0,
-			     "xilinx_ps2", drvdata);
-	if (retval) {
-		printk(KERN_ERR
-		       "%s: Couldn't allocate interrupt %d.\n",
-		       drvdata->serio.name, drvdata->irq);
-		return retval;
-	}
-
-	/* start receiption */
-	XPs2_EnableInterrupt(&drvdata->ps2);
-	XPs2_Recv(&drvdata->ps2, &drvdata->rxb, 1);
-
-	return 0;		/* success */
-}
-
-/*
- * sxps2_close() frees the interrupt.
- */
-
-static void sxps2_close(struct serio *pserio)
-{
-	struct xps2data *drvdata = pserio->port_data;
-
-	XPs2_DisableInterrupt(&drvdata->ps2);
-	free_irq(drvdata->irq, drvdata);
-}
-
-/******************************
- * The platform device driver *
- ******************************/
-
-/** Shared device initialization code */
-static int xps2_setup(
-		struct device *dev,
-		int id,
-		struct resource *r_mem,
-		struct resource *r_irq) {
-	XPs2_Config xps2_cfg;
-	struct xps2data *drvdata;
-	unsigned long remap_size;
-	int retval;
-
-	if (!dev)
-		return -EINVAL;
-
-	drvdata = kzalloc(sizeof(struct xps2data), GFP_KERNEL);
-	if (!drvdata) {
-		dev_err(dev, "Couldn't allocate device private record\n");
-		return -ENOMEM;
-	}
-	spin_lock_init(&drvdata->lock);
-	dev_set_drvdata(dev, (void *)drvdata);
-
-	if (!r_mem || !r_irq) {
-		dev_err(dev, "IO resource(s) not found\n");
-		retval = -EFAULT;
-		goto failed1;
-	}
-	drvdata->irq = r_irq->start;
-
-	remap_size = r_mem->end - r_mem->start + 1;
-	if (!request_mem_region(r_mem->start, remap_size, DRIVER_NAME)) {
-		dev_err(dev, "Couldn't lock memory region at 0x%08x\n",
-				r_mem->start);
-		retval = -EBUSY;
-		goto failed1;
-	}
-
-	/* Fill in cfg data and add them to the list */
-	drvdata->phys_addr = r_mem->start;
-	drvdata->remap_size = remap_size;
-	xps2_cfg.DeviceId = id;
-	xps2_cfg.BaseAddress = (u32) ioremap(r_mem->start, remap_size);
-	if (xps2_cfg.BaseAddress == 0) {
-		dev_err(dev, "Couldn't ioremap memory at 0x%08x\n",
-				r_mem->start);
-		retval = -EFAULT;
-		goto failed2;
-	}
-
-	/* Tell the Xilinx code to bring this PS/2 interface up. */
-	down(&cfg_sem);
-	if (XPs2_CfgInitialize(&drvdata->ps2, &xps2_cfg, xps2_cfg.BaseAddress)
-	    != XST_SUCCESS) {
-		up(&cfg_sem);
-		dev_err(dev, "Could not initialize device.\n");
-		retval = -ENODEV;
-		goto failed3;
-	}
-	up(&cfg_sem);
-
-	/* Set up the interrupt handler. */
-	XPs2_SetHandler(&drvdata->ps2, sxps2_handler, drvdata);
-
-	dev_info(dev, "Xilinx PS2 at 0x%08X mapped to 0x%08X, irq=%d\n",
-			drvdata->phys_addr,
-			drvdata->ps2.BaseAddress,
-			drvdata->irq);
-
-	drvdata->serio.id.type = SERIO_8042;
-	drvdata->serio.write = sxps2_write;
-	drvdata->serio.open = sxps2_open;
-	drvdata->serio.close = sxps2_close;
-	drvdata->serio.port_data = drvdata;
-	drvdata->serio.dev.parent = dev;
-	snprintf(drvdata->serio.name, sizeof(drvdata->serio.name),
-		 XPS2_NAME_DESC, id);
-	snprintf(drvdata->serio.phys, sizeof(drvdata->serio.phys),
-		 XPS2_PHYS_DESC, id);
-	serio_register_port(&drvdata->serio);
-
-	return 0;		/* success */
-
-      failed3:
-	iounmap((void *)(xps2_cfg.BaseAddress));
-
-      failed2:
-	release_mem_region(r_mem->start, remap_size);
-
-      failed1:
-	kfree(drvdata);
-	dev_set_drvdata(dev, NULL);
-
-	return retval;
-}
-
-static int xps2_probe(struct device *dev)
-{
-	struct resource *r_irq = NULL;	/* Interrupt resources */
-	struct resource *r_mem = NULL;	/* IO mem resources */
-	struct platform_device *pdev = to_platform_device(dev);
-
-	/* param check */
-	if (!pdev) {
-		dev_err(dev, "Probe called with NULL param.\n");
-		return -ENODEV;
-	}
-
-	/* Find irq number, map the control registers in */
-	r_irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
-	r_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!r_irq || !r_mem) {
-		dev_err(dev, "IO resource(s) not found.\n");
-		return -ENODEV;
-	}
-
-        return xps2_setup(dev, pdev->id, r_mem, r_irq);
-}
-
-static int xps2_remove(struct device *dev)
-{
-	struct xps2data *drvdata;
-
-	if (!dev)
-		return -EINVAL;
-
-	drvdata = (struct xps2data *)dev_get_drvdata(dev);
-
-	serio_unregister_port(&drvdata->serio);
-
-	iounmap((void *)(drvdata->ps2.BaseAddress));
-
-	release_mem_region(drvdata->phys_addr, drvdata->remap_size);
-
-	kfree(drvdata);
-	dev_set_drvdata(dev, NULL);
-
-	return 0;		/* success */
-}
-
-static struct device_driver xps2_driver = {
-	.name = DRIVER_NAME,
-	.bus = &platform_bus_type,
-	.probe = xps2_probe,
-	.remove = xps2_remove
-};
-
-#ifdef CONFIG_OF
-static int __devinit xps2_of_probe(struct of_device *ofdev, const struct of_device_id *match)
-{
-	struct resource r_irq_struct;
-	struct resource r_mem_struct;
-	struct resource *r_irq = &r_irq_struct;	/* Interrupt resources */
-	struct resource *r_mem = &r_mem_struct;	/* IO mem resources */
-	int rc = 0;
-	const unsigned int *id;
-
-	printk(KERN_INFO "Device Tree Probing \'%s\'\n",
-                        ofdev->node->name);
-
-	/* Get iospace for the device */
-	rc = of_address_to_resource(ofdev->node, 0, r_mem);
-	if(rc) {
-		dev_warn(&ofdev->dev, "invalid address\n");
-		return rc;
-	}
-
-	/* Get IRQ for the device */
-	rc = of_irq_to_resource(ofdev->node, 0, r_irq);
-	if(rc == NO_IRQ) {
-		dev_warn(&ofdev->dev, "no IRQ found.\n");
-		return rc;
-	}
-
-	id = of_get_property(ofdev->node, "port-number", NULL);
-        return xps2_setup(&ofdev->dev, id ? *id : -1, r_mem, r_irq);
-}
-
-static int __devexit xps2_of_remove(struct of_device *dev)
-{
-	return xps2_remove(&dev->dev);
-}
-
-static struct of_device_id xps2_of_match[] = {
-	{ .compatible = "xlnx,opb-ps2-dual-ref-1.00.a", },
-	{ .compatible = "xlnx,xps-ps2-1.00.a", },
-	{ /* end of list */ },
-};
-
-MODULE_DEVICE_TABLE(of, xps2_of_match);
-
-static struct of_platform_driver xps2_of_driver = {
-	.name		= DRIVER_NAME,
-	.match_table	= xps2_of_match,
-	.probe		= xps2_of_probe,
-	.remove		= __devexit_p(xps2_of_remove),
-};
-#endif
-
-static int __init xps2_init(void)
-{
-	int status = driver_register(&xps2_driver);
-#ifdef CONFIG_OF
-	status |= platform_driver_register(&xps2_of_driver);
-#endif
-        return status;
-}
-
-static void __exit xps2_cleanup(void)
-{
-	driver_unregister(&xps2_driver);
-#ifdef CONFIG_OF
-	platform_driver_unregister(&xps2_of_driver);
-#endif
-}
-
-module_init(xps2_init);
-module_exit(xps2_cleanup);
-
-MODULE_AUTHOR("MontaVista Software, Inc. <source@mvista.com>");
-MODULE_DESCRIPTION(DRIVER_DESCRIPTION);
-MODULE_LICENSE("GPL");
-- 
1.7.0.4

