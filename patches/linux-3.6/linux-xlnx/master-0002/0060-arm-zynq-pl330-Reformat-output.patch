From ed67c85a7c163734165d900d05f7cdbf0bee4744 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Wed, 12 Dec 2012 10:52:09 -0800
Subject: [PATCH] arm: zynq: pl330: Reformat output

Replacing 'printk(*' with 'pr_*' or 'dev_*' macros.
Continue long strings using pr_cont.
Avoiding linebreaks in strings where possible.
Fix indentation.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 arch/arm/mach-zynq/pl330.c |  341 ++++++++++++++++++++------------------------
 1 files changed, 157 insertions(+), 184 deletions(-)

diff --git a/arch/arm/mach-zynq/pl330.c b/arch/arm/mach-zynq/pl330.c
index f4edcda..9c6c677 100644
--- a/arch/arm/mach-zynq/pl330.c
+++ b/arch/arm/mach-zynq/pl330.c
@@ -101,13 +101,6 @@
 #define PL330_OPTIMIZE_ICACHE
 #define PL330_DEFAULT_BURST_SIZE 4
 
-#undef PDEBUG
-#ifdef PL330_DEBUG
-#	define PDEBUG(fmt, args...) printk(KERN_INFO fmt, ## args)
-#else
-#	define PDEBUG(fmt, args...)
-#endif
-
 #ifndef PL330_MAX_WAIT
 #define PL330_MAX_WAIT 40000
 #endif
@@ -411,8 +404,8 @@ inline int pl330_instr_dmaend(char *dma_prog)
 inline int pl330_instr_dmago(char *dma_prog, unsigned int cn,
 			     u32 imm, unsigned int ns)
 {
-	PDEBUG("entering pl330_instru_dmago(%#x, %d, %#x, %d)\n",
-	       (unsigned int)dma_prog, cn, imm, ns);
+	pr_debug("entering pl330_instru_dmago(%#x, %d, %#x, %d)\n",
+			(unsigned int)dma_prog, cn, imm, ns);
 	/*
 	 * DMAGO encoding:
 	 * 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
@@ -766,13 +759,13 @@ static u32 pl330_to_ccr_value(struct pl330_bus_des *src_bus_des,
 		| (src_burst_size << 1)
 		| (src_inc_bit);
 
-	PDEBUG("CCR: es %x\n", es);
-	PDEBUG("CCR: dca %x, dpr %x, dbl %x, dbs %x, di %x\n",
-	       dst_cache_ctrl, dst_prot_ctrl,
-	       dst_burst_len, dst_burst_size, dst_inc_bit);
-	PDEBUG("CCR: sca %x, spr %x, sbl %x, sbs %x, si %x\n",
-	       src_cache_ctrl, src_prot_ctrl,
-	       src_burst_len,  src_burst_size, src_inc_bit);
+	pr_debug("CCR: es %x\n", es);
+	pr_debug("CCR: dca %x, dpr %x, dbl %x, dbs %x, di %x\n",
+			dst_cache_ctrl, dst_prot_ctrl, dst_burst_len,
+			dst_burst_size, dst_inc_bit);
+	pr_debug("CCR: sca %x, spr %x, sbl %x, sbs %x, si %x\n", src_cache_ctrl,
+			src_prot_ctrl, src_burst_len,
+			src_burst_size, src_inc_bit);
 
 	return ccr_value;
 }
@@ -800,7 +793,7 @@ static int pl330_construct_single_loop(char *dma_prog_start,
 	int num_nops;
 	char *dma_prog_buf = dma_prog_loop_start;
 
-	PDEBUG("Contructing single loop: loop count %d\n", loop_count);
+	pr_debug("Contructing single loop: loop count %d\n", loop_count);
 
 	dma_prog_buf += pl330_instr_dmalp(dma_prog_buf, 0, loop_count);
 
@@ -861,8 +854,8 @@ static int pl330_construct_nested_loop(char *dma_prog_start,
 	char *inner_loop_start;
 	char *dma_prog_buf = dma_prog_loop_start;
 
-	PDEBUG("Contructing nested loop outer %d, inner %d\n",
-	       loop_count_outer, loop_count_inner);
+	pr_debug("Contructing nested loop outer %d, inner %d\n",
+			loop_count_outer, loop_count_inner);
 
 	dma_prog_buf += pl330_instr_dmalp(dma_prog_buf, 1, loop_count_outer);
 	inner_loop_start = dma_prog_buf;
@@ -1070,8 +1063,7 @@ static int pl330_build_dma_prog(struct prog_build_args *build_args)
 						   PL330_MOV_CCR,
 						   ccr_value);
 
-		PDEBUG("unaligned head count %d\n",
-		       unaligned_count);
+		pr_debug("unaligned head count %d\n", unaligned_count);
 		for (i = 0; i < unaligned_count; i++) {
 			dma_prog_buf += pl330_instr_dmald(dma_prog_buf);
 			dma_prog_buf += pl330_instr_dmast(dma_prog_buf);
@@ -1101,17 +1093,16 @@ static int pl330_build_dma_prog(struct prog_build_args *build_args)
 	if (loop_count > 256) {
 		loop_count1 = loop_count / 256;
 		if (loop_count1 > 256) {
-			printk(KERN_ERR
-			       "DMA operation cannot fit in a 2-level loop "
-			       "for channel %d, please reduce the DMA length "
-			       "or increase the burst size or length",
-			       channel);
+			pr_err("DMA operation cannot fit in a 2-level loop ");
+			pr_cont("for channel %d, please reduce the ", channel);
+			pr_cont("DMA length or increase the burst size or ");
+			pr_cont("length");
 			BUG();
 			return 0;
 		}
 		loop_residue = loop_count % 256;
 
-		PDEBUG("loop count %d is greater than 256\n", loop_count);
+		pr_debug("loop count %d is greater than 256\n", loop_count);
 		if (loop_count1 > 1)
 			dma_prog_buf +=
 				pl330_construct_nested_loop(dma_prog_start,
@@ -1133,7 +1124,7 @@ static int pl330_build_dma_prog(struct prog_build_args *build_args)
 	}
 
 	if (loop_count > 0) {
-		PDEBUG("now loop count is %d\n", loop_count);
+		pr_debug("now loop count is %d\n", loop_count);
 		dma_prog_buf += pl330_construct_single_loop(dma_prog_start,
 							    cache_length,
 							    dma_prog_buf,
@@ -1146,7 +1137,7 @@ static int pl330_build_dma_prog(struct prog_build_args *build_args)
 		tail_bytes = tail_bytes % mem_bus_des->burst_size;
 
 		if (tail_words) {
-			PDEBUG("tail words is %d\n", tail_words);
+			pr_debug("tail words is %d\n", tail_words);
 			/*
 			 * if we can transfer the tail in words, we will
 			 * transfer words as much as possible
@@ -1199,7 +1190,7 @@ static int pl330_build_dma_prog(struct prog_build_args *build_args)
 						   PL330_MOV_CCR,
 						   ccr_value);
 
-			PDEBUG("tail bytes is %d\n", tail_bytes);
+			pr_debug("tail bytes is %d\n", tail_bytes);
 			dma_prog_buf +=
 				pl330_construct_single_loop(dma_prog_start,
 							    cache_length,
@@ -1246,9 +1237,8 @@ static int pl330_exec_dmakill(unsigned int dev_id,
 
 	if (wait_count >= PL330_MAX_WAIT) {
 		/* wait time out */
-		printk(KERN_ERR
-		       "PL330 device %d debug status busy time out\n",
-		       dev_id);
+		pr_err("PL330 device %d debug status busy time out\n",
+				dev_id);
 
 		return -1;
 	}
@@ -1308,8 +1298,8 @@ static irqreturn_t pl330_done_isr(int irq, void *dev)
 	struct pl330_channel_data *channel_data =
 		driver_data.channel_data + channel;
 
-	PDEBUG("Entering PL330 Done irq on channel %d\n",
-	       channel_static_data->channel);
+	pr_debug("Entering PL330 Done irq on channel %d\n",
+			channel_static_data->channel);
 	/*
 	 * clear channel interrupt status
 	 */
@@ -1330,8 +1320,8 @@ static irqreturn_t pl330_done_isr(int irq, void *dev)
 					    channel_data->done_callback_data);
 	}
 
-	PDEBUG("Handled PL330 Done irq on channel %d\n",
-	       channel_static_data->channel);
+	pr_debug("Handled PL330 Done irq on channel %d\n",
+			channel_static_data->channel);
 
 	return IRQ_HANDLED;
 }
@@ -1364,7 +1354,7 @@ static irqreturn_t pl330_fault_isr(int irq, void *dev)
 
 	unsigned long spin_flags;
 
-	PDEBUG("Handling PL330 Fault irq on device %d\n", dev_id);
+	pr_debug("Handling PL330 Fault irq on device %d\n", dev_id);
 
 	fsm = pl330_readreg(base, PL330_FSM_OFFSET) & 0x01;
 	fsc = pl330_readreg(base, PL330_FSC_OFFSET) & 0xFF;
@@ -1377,9 +1367,8 @@ static irqreturn_t pl330_fault_isr(int irq, void *dev)
 		fault_type = pl330_readreg(base, PL330_FTM_OFFSET);
 		pc = pl330_readreg(base, PL330_DPC_OFFSET);
 
-		printk(KERN_ERR
-		       "PL330 device %d fault with type: %x at PC %x\n",
-		       device_data->dev_id, fault_type, pc);
+		pr_err("PL330 device %d fault with type: %x at PC %x\n",
+				device_data->dev_id, fault_type, pc);
 
 		/* kill the DMA manager thread */
 		spin_lock_irqsave(&device_data->lock, spin_flags);
@@ -1392,19 +1381,18 @@ static irqreturn_t pl330_fault_isr(int irq, void *dev)
 	 */
 	for (dev_chan = 0; dev_chan < device_data->channels; dev_chan++) {
 		if (fsc & (0x01 << dev_chan)) {
-			PDEBUG("pl330_fault_isr: channel %d device %d\n",
-			       dev_chan, device_data->dev_id);
+			pr_debug("pl330_fault_isr: channel %d device %d\n",
+					dev_chan, device_data->dev_id);
 			fault_type =
 				pl330_readreg(base,
 					      PL330_FTCn_OFFSET(dev_chan));
 			pc = pl330_readreg(base, PL330_CPCn_OFFSET(dev_chan));
-			PDEBUG("pl330_fault_isr: fault type %#x pc %#x\n",
-			       fault_type, pc);
+			pr_debug("pl330_fault_isr: fault type %#x pc %#x\n",
+					fault_type, pc);
 
 			/* kill the channel thread */
-			PDEBUG("pl330_fault_isr: "
-			       "killing channel %d for device %d\n",
-			       dev_chan, device_data->dev_id);
+			pr_debug("pl330_fault_isr: killing channel ch:%d id:%d",
+				dev_chan, device_data->dev_id);
 			spin_lock_irqsave(&device_data->lock, spin_flags);
 			pl330_exec_dmakill(dev_id, base, dev_chan, 1);
 			spin_unlock_irqrestore(&device_data->lock, spin_flags);
@@ -1451,7 +1439,7 @@ static int pl330_request_irq(unsigned int dev_id)
 
 	int status;
 
-	PDEBUG("PL330 requesting irq for device %d\n", dev_id);
+	pr_debug("PL330 requesting irq for device %d\n", dev_id);
 
 	channel_static_data = driver_data.channel_static_data
 		+ device_data->starting_channel;
@@ -1463,11 +1451,11 @@ static int pl330_request_irq(unsigned int dev_id)
 			     IRQF_DISABLED, DRIVER_NAME, device_data);
 
 	if (status) {
-		printk(KERN_ERR "PL330 request fault irq %d failed %d\n",
-		       irq, status);
+		pr_err("PL330 request fault irq %d failed %d\n",
+				irq, status);
 		return -1;
 	} else {
-		PDEBUG("PL330 request fault irq %d successful\n", irq);
+		pr_debug("PL330 request fault irq %d successful\n", irq);
 	}
 
 
@@ -1480,14 +1468,13 @@ static int pl330_request_irq(unsigned int dev_id)
 				     channel_static_data);
 
 		if (status) {
-			printk(KERN_ERR
-			       "PL330 request done irq %d failed %d\n",
-			       irq, status);
+			pr_err("PL330 request done irq %d failed %d\n",
+					irq, status);
 			goto req_done_irq_failed;
 		} else {
 			channel_static_data->irq = irq;
 
-			PDEBUG("PL330 request done irq %d successful\n", irq);
+			pr_debug("PL330 request done irq %d successful\n", irq);
 		}
 
 		channel_static_data++;
@@ -1502,14 +1489,13 @@ static int pl330_request_irq(unsigned int dev_id)
 				     channel_static_data);
 
 		if (status) {
-			printk(KERN_ERR
-			       "PL330 request done irq %d failed %d\n",
-			       irq, status);
+			pr_err("PL330 request done irq %d failed %d\n",
+					irq, status);
 			goto req_done_irq1_failed;
 		} else {
 			channel_static_data->irq = irq;
 
-			PDEBUG("PL330 request done irq %d successful\n", irq);
+			pr_debug("PL330 request done irq %d successful\n", irq);
 		}
 
 		channel_static_data++;
@@ -1547,7 +1533,7 @@ static void pl330_free_irq(unsigned int dev_id)
 	struct pl330_device_data *device_data =
 		driver_data.device_data + dev_id;
 
-	PDEBUG("PL330 freeing irq for device %d\n", dev_id);
+	pr_debug("PL330 freeing irq for device %d\n", dev_id);
 
 	channel_static_data = driver_data.channel_static_data
 		+ device_data->starting_channel;
@@ -1595,16 +1581,17 @@ static void pl330_init_device_data(unsigned int dev_id,
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
-		printk(KERN_ERR "get_resource for MEM resource for dev %d "
-		       "failed\n", dev_id);
+		dev_err(&pdev->dev,
+			    "get_resource for MEM resource for dev %d failed\n",
+			    dev_id);
 		return;
 	} else {
-		PDEBUG("pl330 device %d actual base is %x\n",
-		       dev_id, (unsigned int)res->start);
+		pr_debug("pl330 device %d actual base is %x\n",
+				dev_id, (unsigned int)res->start);
 	}
 
 	if (!request_mem_region(res->start, 0x1000, "pl330")) {
-		printk(KERN_ERR "memory request failue for base %x\n",
+		dev_err(&pdev->dev, "memory request failue for base %x\n",
 		       (unsigned int)res->start);
 		return;
 	}
@@ -1612,28 +1599,28 @@ static void pl330_init_device_data(unsigned int dev_id,
 	spin_lock_init(&device_data->lock);
 
 	device_data->base = ioremap(res->start, SZ_4K);
-	PDEBUG("pl330 dev %d ioremap to %#x\n",
-	       dev_id, (unsigned int)device_data->base);
+	pr_debug("pl330 dev %d ioremap to %#x\n", dev_id,
+			(unsigned int)device_data->base);
 	if (!device_data->base) {
-		printk(KERN_ERR "ioremap failure for base %#x\n",
-		       (unsigned int)res->start);
+		dev_err(&pdev->dev, "ioremap failure for base %#x\n",
+				(unsigned int)res->start);
 		release_mem_region(res->start, SZ_4K);
 		return;
 	}
-	PDEBUG("virt_to_bus(base) is %#08x\n",
-	       (u32)virt_to_bus(device_data->base));
-	PDEBUG("page_to_phys(base) is %#08x\n",
-	       (u32)page_to_phys(virt_to_page(device_data->base)));
+	pr_debug("virt_to_bus(base) is %#08x\n",
+			(u32)virt_to_bus(device_data->base));
+	pr_debug("page_to_phys(base) is %#08x\n",
+			(u32)page_to_phys(virt_to_page(device_data->base)));
 
 	for (pid = 0, i = 0; i < 4; i++)
 		pid |= (pl330_readreg(device_data->base, 0xFE0 + i * 4) & 0xFF)
 			<< (i * 8);
-	PDEBUG("Periperal ID is %#08x\n", pid);
+	pr_debug("Periperal ID is %#08x\n", pid);
 
 	for (cid = 0, i = 0; i < 4; i++)
 		cid |= (pl330_readreg(device_data->base, 0xFF0 + i * 4) & 0xFF)
 			<< (i * 8);
-	PDEBUG("PrimeCell ID is %#08x\n", cid);
+	pr_debug("PrimeCell ID is %#08x\n", cid);
 
 	/* store the PL330 id. The device id starts from zero.
 	 * The last one is MAX_DMA_DEVICES - 1
@@ -1647,29 +1634,29 @@ static void pl330_init_device_data(unsigned int dev_id,
 	pl330_config = (struct pl330_platform_config *)dev->platform_data;
 	device_data->channels = pl330_config->channels;
 	device_data->starting_channel = pl330_config->starting_channel;
-	PDEBUG("pl330 device %d starting channel %d, channels %d\n",
-	       dev_id,
-	       device_data->starting_channel,
-	       device_data->channels);
+	pr_debug("pl330 device %d starting channel %d, channels %d\n", dev_id,
+			device_data->starting_channel, device_data->channels);
 
 	/* now get the irq configurations */
 
 	/* The 1st IRQ resource is for fault irq */
 	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
 	if (!res)
-		printk(KERN_ERR "get_resource for IRQ resource for dev %d "
-		       "failed\n", dev_id);
+		dev_err(&pdev->dev,
+			    "get_resource for IRQ resource for dev %d failed\n",
+			    dev_id);
 
 	if (res->start != res->end)
-		printk(KERN_ERR "the first IRQ resource for dev %d should "
+		dev_err(&pdev->dev, "the first IRQ resource for dev %d should "
 		       "be a single IRQ for FAULT\n", dev_id);
 	device_data->fault_irq = res->start;
 
 	/* The 2nd IRQ resource is for 1st half of channel IRQ */
 	res = platform_get_resource(pdev, IORESOURCE_IRQ, 1);
 	if (!res) {
-		printk(KERN_ERR "get_resource for IRQ resource %d for dev %d "
-		       "failed\n", 1, dev_id);
+		dev_err(&pdev->dev,
+			 "get_resource for IRQ resource %d for dev %d failed\n",
+			 1, dev_id);
 
 		device_data->starting_irq = 0;
 		device_data->ending_irq = 0;
@@ -1678,16 +1665,16 @@ static void pl330_init_device_data(unsigned int dev_id,
 		device_data->ending_irq = res->end;
 	}
 
-	PDEBUG("pl330 device %d 1st half starting irq %d, ending irq %d\n",
-	       dev_id,
-	       device_data->starting_irq,
-	       device_data->ending_irq);
+	pr_debug("pl330 device %d 1st half starting irq %d, ending irq %d\n",
+			dev_id, device_data->starting_irq,
+			device_data->ending_irq);
 
 	/* The 3rd IRQ resource is for 2nd half of channel IRQ */
 	res = platform_get_resource(pdev, IORESOURCE_IRQ, 2);
 	if (!res) {
-		printk(KERN_ERR "get_resource for IRQ resource %d for dev %d "
-		       "failed\n", 2, dev_id);
+		dev_err(&pdev->dev,
+			 "get_resource for IRQ resource %d for dev %d failed\n",
+			 2, dev_id);
 		device_data->starting_irq1 = 0;
 		device_data->ending_irq1 = 0;
 	} else {
@@ -1695,10 +1682,9 @@ static void pl330_init_device_data(unsigned int dev_id,
 		device_data->ending_irq1 = res->end;
 	}
 
-	PDEBUG("pl330 device %d 2nd half starting irq %d, ending irq %d\n",
-	       dev_id,
-	       device_data->starting_irq1,
-	       device_data->ending_irq1);
+	pr_debug("pl330 device %d 2nd half starting irq %d, ending irq %d\n",
+			dev_id, device_data->starting_irq1,
+			device_data->ending_irq1);
 
 #ifdef PL330_OPTIMIZE_ICACHE
 	/*
@@ -1733,7 +1719,7 @@ static int pl330_setspeed_dma(unsigned int channel,
 			      struct dma_struct *indexed_dma_chan,
 			      int cycle_ns)
 {
-	PDEBUG("PL330::pl330_setspeed_dma(), doing nothing\n");
+	pr_debug("PL330::pl330_setspeed_dma(), doing nothing\n");
 	return 0;
 }
 
@@ -1776,7 +1762,7 @@ static int pl330_request_dma(unsigned int channel, dma_t *indexed_dma_chan)
 	struct pl330_channel_data *channel_data =
 		driver_data.channel_data + channel;
 
-	PDEBUG("PL330::pl330_request_dma() ...\n");
+	pr_debug("PL330::pl330_request_dma() ...\n");
 
 	memset(channel_data, 0, sizeof(struct pl330_channel_data));
 
@@ -1824,14 +1810,14 @@ static void print_pl330_bus_des(struct pl330_bus_des *bus_des)
 {
 
 	if (!bus_des) {
-		PDEBUG("NULL\n");
+		pr_debug("NULL\n");
 		return;
 	}
 
-	PDEBUG("  .burst_size = %d\n", bus_des->burst_size);
-	PDEBUG("  .burst_len = %d\n", bus_des->burst_len);
-	PDEBUG("  .prot_ctrl = %d\n", bus_des->prot_ctrl);
-	PDEBUG("  .cache_ctrl = %d\n", bus_des->cache_ctrl);
+	pr_debug("  .burst_size = %d\n", bus_des->burst_size);
+	pr_debug("  .burst_len = %d\n", bus_des->burst_len);
+	pr_debug("  .prot_ctrl = %d\n", bus_des->prot_ctrl);
+	pr_debug("  .cache_ctrl = %d\n", bus_des->cache_ctrl);
 
 	return;
 }
@@ -1859,35 +1845,33 @@ static int pl330_exec_dmago(unsigned int dev_id,
 
 	int wait_count;
 
-	PDEBUG("pl330_exec_dmago: entering\n");
+	pr_debug("pl330_exec_dmago: entering\n");
 
 	pl330_instr_dmago(dma_go_prog, dev_chan, dma_prog, 0);
 
 	dbginst0 = PL330_DBGINST0(*(dma_go_prog + 1), *dma_go_prog, 0, 0);
 	dbginst1 = (u32)dma_prog;
 
-	PDEBUG("inside pl330_exec_dmago: base %x, dev_chan %d, dma_prog %x\n",
-	       (u32)base, dev_chan, dma_prog);
+	pr_debug("inside pl330_exec_dmago: base %x, dev_chan %d, dma_prog %x\n",
+			(u32)base, dev_chan, dma_prog);
 
 	/* wait while debug status is busy */
 	wait_count = 0;
 	while (pl330_readreg(base, PL330_DBGSTATUS_OFFSET)
 	       & PL330_DBGSTATUS_BUSY
 	       && wait_count < PL330_MAX_WAIT) {
-		PDEBUG("dbgstatus %x\n",
-		       pl330_readreg(base, PL330_DBGSTATUS_OFFSET));
+		pr_debug("dbgstatus %x\n",
+				pl330_readreg(base, PL330_DBGSTATUS_OFFSET));
 
 		wait_count++;
 	}
 
 	if (wait_count >= PL330_MAX_WAIT) {
-		printk(KERN_ERR
-		       "PL330 device %d debug status busy time out\n",
-		       dev_id);
+		pr_err("PL330 device %d debug status busy time out\n", dev_id);
 		return -1;
 	}
 
-	PDEBUG("dbgstatus idle\n");
+	pr_debug("dbgstatus idle\n");
 
 	/* write debug instruction 0 */
 	pl330_writereg(dbginst0, base, PL330_DBGINST0_OFFSET);
@@ -1900,21 +1884,18 @@ static int pl330_exec_dmago(unsigned int dev_id,
 	while ((pl330_readreg(base, PL330_DS_OFFSET) & PL330_DS_DMA_STATUS)
 	       != PL330_DS_DMA_STATUS_STOPPED
 	       && wait_count <= PL330_MAX_WAIT) {
-		PDEBUG("ds %x\n",
-		       pl330_readreg(base, PL330_DS_OFFSET));
+		pr_debug("ds %x\n", pl330_readreg(base, PL330_DS_OFFSET));
 		wait_count++;
 	}
 
 	if (wait_count >= PL330_MAX_WAIT) {
-		printk(KERN_ERR
-		       "PL330 device %d debug status busy time out\n",
-		       dev_id);
+		pr_err("PL330 device %d debug status busy time out\n", dev_id);
 		return -1;
 	}
 
 	/* run the command in dbginst0 and dbginst1 */
 	pl330_writereg(0, base, PL330_DBGCMD_OFFSET);
-	PDEBUG("pl330_exec_dmago done\n");
+	pr_debug("pl330_exec_dmago done\n");
 
 	return 0;
 }
@@ -1966,9 +1947,7 @@ static void pl330_enable_dma(unsigned int channel,
 	client_data = driver_data.channel_data[channel].client_data;
 
 	if (!client_data) {
-		printk(KERN_ERR
-		       "client data is not set for DMA channel %d\n",
-		       channel);
+		pr_err("client data is not set for DMA channel %d\n", channel);
 		BUG();
 		return;
 	}
@@ -1977,7 +1956,7 @@ static void pl330_enable_dma(unsigned int channel,
 	 * find out which one is source which one is destination
 	 */
 	if (dma->dma_mode == DMA_MODE_READ) {
-		PDEBUG("dma_mode is DMA_MODE_READ\n");
+		pr_debug("dma_mode is DMA_MODE_READ\n");
 
 		src_bus_des = &client_data->dev_bus_des;
 		dst_bus_des = &client_data->mem_bus_des;
@@ -1988,7 +1967,7 @@ static void pl330_enable_dma(unsigned int channel,
 		src_inc = channel_data->incr_dev_addr;
 		dst_inc = 1;
 	} else if (dma->dma_mode == DMA_MODE_WRITE) {
-		PDEBUG("dma_mode is DMA_MODE_WRITE\n");
+		pr_debug("dma_mode is DMA_MODE_WRITE\n");
 
 		src_bus_des = &client_data->mem_bus_des;
 		dst_bus_des = &client_data->dev_bus_des;
@@ -1998,35 +1977,31 @@ static void pl330_enable_dma(unsigned int channel,
 		src_inc = 1;
 		dst_inc = channel_data->incr_dev_addr;
 	} else {
-		printk(KERN_ERR "Error: mode %x is not supported\n",
-		       dma->dma_mode);
+		pr_err("Error: mode %x is not supported\n", dma->dma_mode);
 
 		return;
 	}
 
 	if (dma->count == 0) {
-		printk(KERN_ERR "Error: DMA count for channel %d is zero",
-		       channel);
+		pr_err("Error: DMA count for channel %d is zero", channel);
 		return;
 	}
 
 	/* print some debugging messages */
-	PDEBUG("count is %ld\n", dma->count);
+	pr_debug("count is %ld\n", dma->count);
 
-	PDEBUG("dev_addr = %x\n",  (unsigned int)client_data->dev_addr);
+	pr_debug("dev_addr = %x\n", (unsigned int)client_data->dev_addr);
 
-	PDEBUG("dev_bus_des = {\n");
+	pr_debug("dev_bus_des = {\n");
 	print_pl330_bus_des(&client_data->dev_bus_des);
-	PDEBUG("}\n");
+	pr_debug("}\n");
 
-	PDEBUG("mem_bus_des = {\n");
+	pr_debug("mem_bus_des = {\n");
 	print_pl330_bus_des(&client_data->mem_bus_des);
-	PDEBUG("}\n");
+	pr_debug("}\n");
 
-	PDEBUG("endian_swap_size = %d\n",
-	       client_data->endian_swap_size);
-	PDEBUG("incr_dev_addr = %d\n",
-	       channel_data->incr_dev_addr);
+	pr_debug("endian_swap_size = %d\n", client_data->endian_swap_size);
+	pr_debug("incr_dev_addr = %d\n", channel_data->incr_dev_addr);
 
 	dma_prog = channel_data->dma_program;
 
@@ -2037,7 +2012,7 @@ static void pl330_enable_dma(unsigned int channel,
 		 * if the DMA program is not set by a user,
 		 * construct the dma program
 		 */
-		PDEBUG("constructing DMA program\n");
+		pr_debug("constructing DMA program\n");
 		if (!channel_data->dma_prog_buf) {
 			/* allocate the dma prog buffer */
 			channel_data->dma_prog_buf =
@@ -2046,10 +2021,9 @@ static void pl330_enable_dma(unsigned int channel,
 						   &channel_data->dma_prog_phy,
 						   GFP_KERNEL);
 		}
-		PDEBUG("channel %d DMA program: vir %#08x, phy %#08x\n",
-		       channel,
-		       (u32)channel_data->dma_prog_buf,
-		       (u32)channel_data->dma_prog_phy);
+		pr_debug("channel %d DMA program: vir %#08x, phy %#08x\n",
+				channel, (u32)channel_data->dma_prog_buf,
+				(u32)channel_data->dma_prog_phy);
 
 		dma_prog_buf = (char *)channel_data->dma_prog_buf;
 
@@ -2079,21 +2053,21 @@ static void pl330_enable_dma(unsigned int channel,
 
 		channel_data->dma_prog_len = dma_prog_bytes;
 
-		PDEBUG("DMA program constructed\n");
+		pr_debug("DMA program constructed\n");
 	} else {
-		PDEBUG("channel %d user defined DMA program %#08x\n",
-		       channel, (u32)dma_prog);
+		pr_debug("channel %d user defined DMA program %#08x\n", channel,
+				(u32)dma_prog);
 	}
 
-	PDEBUG("enable_dma: spin_lock_irqsave\n");
+	pr_debug("enable_dma: spin_lock_irqsave\n");
 	spin_lock_irqsave(&device_data->lock, spin_flags);
 
 	/* enable the interrupt */
-	PDEBUG("enable_dma: enabling interrupt\n");
+	pr_debug("enable_dma: enabling interrupt\n");
 	inten = pl330_readreg(device_data->base, PL330_INTEN_OFFSET);
 	inten |= 0x01 << dev_chan; /* set the correpsonding bit */
 	pl330_writereg(inten, device_data->base, PL330_INTEN_OFFSET);
-	PDEBUG("pl330 interrupt enabled for channel %d\n", channel);
+	pr_debug("pl330 interrupt enabled for channel %d\n", channel);
 
 	pl330_exec_dmago(device_data->dev_id,
 			 device_data->base,
@@ -2212,8 +2186,9 @@ static void pl330_release_io(struct platform_device *pdev, int dev_id)
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res)
-		printk(KERN_ERR "get_resource for MEM resource for dev %d "
-		       "failed\n", dev_id);
+		dev_err(&pdev->dev,
+			    "get_resource for MEM resource for dev %d failed\n",
+			    dev_id);
 
 	if (res)
 		release_mem_region(res->start, SZ_4K);
@@ -2235,7 +2210,7 @@ static int __devinit pl330_platform_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
-	PDEBUG("pl330 driver probing dev_id %d\n", pdev->id);
+	pr_debug("pl330 driver probing dev_id %d\n", pdev->id);
 
 	pdev_id = 0;
 	if (pdev->id < 0) {
@@ -2262,7 +2237,7 @@ static int __devinit pl330_platform_probe(struct platform_device *pdev)
 		return -1;
 	}
 
-	printk(KERN_INFO "pl330 dev %d probe success\n", pdev->id);
+	dev_info(&pdev->dev, "pl330 dev %d probe success\n", pdev->id);
 
 	return 0;
 }
@@ -2283,7 +2258,7 @@ static int pl330_platform_remove(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
-	PDEBUG("pl330 driver removing %d\n", pdev->id);
+	pr_debug("pl330 driver removing %d\n", pdev->id);
 
 	pdev_id = 0;
 	if (pdev->id < 0) {
@@ -2322,7 +2297,7 @@ static void pl330_driver_init(void)
 {
 	unsigned int i;
 
-	PDEBUG("inside pl330_driver_init, dma_chan is %x\n",
+	pr_debug("inside pl330_driver_init, dma_chan is %x\n",
 	       (unsigned int)dma_chan);
 
 	driver_data.dma_chan = dma_chan;
@@ -2385,14 +2360,14 @@ int set_pl330_client_data(unsigned int channel,
 		return -EINVAL;
 
 	if (!dma->lock) {
-		printk(KERN_ERR "trying to set pl330_client_data on a "
-		       "free channel %d\n", channel);
+		pr_err("trying to set pl330_client_data on a free channel %d\n",
+				channel);
 		return -EINVAL;
 	}
 
 	if (dma->active) {
-		printk(KERN_ERR "trying to set pl330_client_data on an active "
-		       "channel %d\n", channel);
+		pr_err("trying to set pl330_client_data on an active channel ");
+		pr_cont("%d\n", channel);
 		return -EBUSY;
 	}
 
@@ -2426,13 +2401,11 @@ int set_pl330_client_data(unsigned int channel,
 
 	if (dev_bus_des->burst_size * dev_bus_des->burst_len
 	    != mem_bus_des->burst_size * mem_bus_des->burst_len) {
-		printk(KERN_ERR
-		       "DMA channel %d has unmatched burst for device"
-		       " and memory, device burst %d bytes,"
-		       " memory busrt %d bytes\n",
-		       channel,
-		       dev_bus_des->burst_size * dev_bus_des->burst_len,
-		       mem_bus_des->burst_size * mem_bus_des->burst_len);
+		pr_err("DMA channel %d has unmatched burst for ", channel);
+		pr_cont("device and memory, device burst %d bytes, ",
+			      dev_bus_des->burst_size * dev_bus_des->burst_len);
+		pr_cont("memory burst %d bytes\n",
+			      mem_bus_des->burst_size * mem_bus_des->burst_len);
 		return -EINVAL;
 	}
 
@@ -2460,14 +2433,14 @@ int set_pl330_dma_prog_addr(unsigned int channel,
 		return -EINVAL;
 
 	if (!dma->lock) {
-		printk(KERN_ERR "trying to set pl330_dma_program on a free "
-		       "channel %d\n", channel);
+		pr_err("trying to set pl330_dma_program on a free channel %d\n",
+				channel);
 		return -EINVAL;
 	}
 
 	if (dma->active) {
-		printk(KERN_ERR "trying to set pl330_dma_program on an active "
-		       "channel %d\n", channel);
+		pr_err("trying to set pl330_dma_program on an active channel ");
+		pr_cont("%d\n", channel);
 		return -EBUSY;
 	}
 
@@ -2495,8 +2468,8 @@ char *get_pl330_dma_program(unsigned int channel,
 		return NULL;
 
 	if (!dma->lock) {
-		printk(KERN_ERR "trying to set pl330_dma_program on a free "
-		       "channel %d\n", channel);
+		pr_err("trying to set pl330_dma_program on a free channel %d\n",
+				channel);
 		return NULL;
 	}
 
@@ -2529,14 +2502,14 @@ int set_pl330_done_callback(unsigned int channel,
 		return -EINVAL;
 
 	if (!dma->lock) {
-		printk(KERN_ERR "Trying to pl330_done_callback on a free "
-		       "channel (%d)\n", channel);
+		pr_err("Trying to pl330_done_callback on a free channel (%d)\n",
+				channel);
 		return -EINVAL;
 	}
 
 	if (dma->active) {
-		printk(KERN_ERR "Trying to set pl330_done_callback on an "
-		       "active channel (%d)\n", channel);
+		pr_err("Trying to set pl330_done_callback on an active ");
+		pr_cont("channel (%d)\n", channel);
 		return -EBUSY;
 	}
 
@@ -2571,14 +2544,14 @@ int set_pl330_fault_callback(unsigned int channel,
 		return -EINVAL;
 
 	if (!dma->lock) {
-		printk(KERN_ERR "trying to set pl330_fault_callback on "
-		       "a free channel %d\n", channel);
+		pr_err("trying to set pl330_fault_callback on a free channel ");
+		pr_cont("%d\n", channel);
 		return -EINVAL;
 	}
 
 	if (dma->active) {
-		printk(KERN_ERR "trying to set pl330_fault_callback on "
-		       "an active channel %d\n", channel);
+		pr_err("trying to set pl330_fault_callback on an active ");
+		pr_cont("channel %d\n", channel);
 		return -EBUSY;
 	}
 
@@ -2610,14 +2583,14 @@ int set_pl330_incr_dev_addr(unsigned int channel,
 		return -EINVAL;
 
 	if (!dma->lock) {
-		printk(KERN_ERR "trying to set pl330_fault_callback on "
-		       "a free channel %d\n", channel);
+		pr_err("trying to set pl330_fault_callback on a free channel ");
+		pr_cont("%d\n", channel);
 		return -EINVAL;
 	}
 
 	if (dma->active) {
-		printk(KERN_ERR "trying to set pl330_fault_callback on "
-		       "an active channel %d\n", channel);
+		pr_err("trying to set pl330_fault_callback on an active ");
+		pr_cont("channel %d\n", channel);
 		return -EBUSY;
 	}
 
@@ -2688,7 +2661,7 @@ static int __init pl330_init(void)
 	pl330_driver_init();
 
 	status = platform_driver_register(&pl330_platform_driver);
-	PDEBUG("platform_driver_register: %d\n", status);
+	pr_debug("platform_driver_register: %d\n", status);
 	return status;
 }
 module_init(pl330_init);
@@ -2703,7 +2676,7 @@ static void __exit pl330_exit(void)
 	 * unregister dma_driver_ops first
 	 */
 	platform_driver_unregister(&pl330_platform_driver);
-	PDEBUG("platform_driver_unregister\n");
+	pr_debug("platform_driver_unregister\n");
 }
 module_exit(pl330_exit);
 
-- 
1.7.1

