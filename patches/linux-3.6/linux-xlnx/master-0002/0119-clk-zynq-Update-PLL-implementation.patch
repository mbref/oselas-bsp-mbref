From b78952d8353484915bd1cc49e70b655efa391cb6 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Thu, 20 Dec 2012 10:53:04 -0800
Subject: [PATCH] clk: zynq: Update PLL implementation

Currently it appears enable/disable is the better mechanism
to unbypass/bypass the PLLs. Therefore, the implementation
is updated accordingly. The set/get parent functions are removed
in favor of enable/disable and is_enabled operations.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
---
 drivers/clk/zynq/pll.c |  110 ++++++++++++++++++++++++++----------------------
 1 files changed, 60 insertions(+), 50 deletions(-)

diff --git a/drivers/clk/zynq/pll.c b/drivers/clk/zynq/pll.c
index cf2f9a9..8b889ea 100644
--- a/drivers/clk/zynq/pll.c
+++ b/drivers/clk/zynq/pll.c
@@ -4,8 +4,8 @@
  * Rate is adjustable by reprogramming the feedback divider.
  * PLLs can be bypassed. When the bypass bit is set the PLL_OUT = PS_CLK
  *
- * The bypass functionality is modelled as mux. The parent clock is the same in
- * both cases, but only in one case the input clock is multiplied by fbdiv.
+ * The PLL is bypassed when its enable count reaches zero, and brought up
+ * when a clock consumer enables the PLL
  * Bypassing the PLL also shuts it down.
  *
  * Functions to set a new rate are provided, though they are only compile
@@ -267,6 +267,9 @@ static unsigned long zynq_pll_recalc_rate(struct clk_hw *hw, unsigned long
 	struct zynq_pll *clk = to_zynq_pll(hw);
 	u32 fbdiv;
 
+	if (clk->bypassed)
+		return parent_rate;
+
 	/* makes probably sense to redundantly save fbdiv in the struct
 	 * zynq_pll to save the IO access. */
 	fbdiv = (readl(clk->pllctrl) & PLLCTRL_FBDIV_MASK) >>
@@ -276,77 +279,84 @@ static unsigned long zynq_pll_recalc_rate(struct clk_hw *hw, unsigned long
 }
 
 /**
- * zynq_pll_set_parent() - Reparent clock
+ * zynq_pll_enable - Enable clock
  * @hw:		Handle between common and hardware-specific interfaces
- * @index:	Index of new parent.
- * Returns 0 on success, negative errno otherwise.
+ * Returns 0 on success
  */
-static int zynq_pll_set_parent(struct clk_hw *hw, u8 index)
+static int zynq_pll_enable(struct clk_hw *hw)
 {
 	unsigned long flags = 0;
 	u32 reg;
 	struct zynq_pll *clk = to_zynq_pll(hw);
 
-	/*
-	 * We assume bypassing is a preparation for sleep mode, thus not only
-	 * set the bypass bit, but also power down the whole PLL.
-	 * For this reason, removing the bypass must do the power up sequence
-	 */
-	switch (index) {
-	case 0:
-		/* Power up PLL and wait for lock before removing bypass */
-		spin_lock_irqsave(clk->lock, flags);
-
-		reg = readl(clk->pllctrl);
-		reg &= ~(PLLCTRL_RESET_MASK | PLLCTRL_PWRDWN_MASK);
-		writel(reg, clk->pllctrl);
-		while (readl(clk->pllstatus) & (1 << clk->lockbit)) ;
+	if (!clk->bypassed)
+		return 0;
 
-		reg = readl(clk->pllctrl);
-		reg &= ~PLLCTRL_BYPASS_MASK;
-		writel(reg, clk->pllctrl);
-
-		spin_unlock_irqrestore(clk->lock, flags);
+	/* Power up PLL and wait for lock before removing bypass */
+	spin_lock_irqsave(clk->lock, flags);
 
-		clk->bypassed = 0;
-		break;
-	case 1:
-		/* Set bypass bit and shut down PLL */
-		spin_lock_irqsave(clk->lock, flags);
+	reg = readl(clk->pllctrl);
+	reg &= ~(PLLCTRL_RESET_MASK | PLLCTRL_PWRDWN_MASK);
+	writel(reg, clk->pllctrl);
+	while (readl(clk->pllstatus) & (1 << clk->lockbit))
+		;
 
-		reg = readl(clk->pllctrl);
-		reg |= PLLCTRL_BYPASS_MASK;
-		writel(reg, clk->pllctrl);
-		reg |= PLLCTRL_RESET_MASK | PLLCTRL_PWRDWN_MASK;
-		writel(reg, clk->pllctrl);
+	reg = readl(clk->pllctrl);
+	reg &= ~PLLCTRL_BYPASS_MASK;
+	writel(reg, clk->pllctrl);
 
-		spin_unlock_irqrestore(clk->lock, flags);
+	spin_unlock_irqrestore(clk->lock, flags);
 
-		clk->bypassed = 1;
-		break;
-	default:
-		/* Is this correct error code? */
-		return -EINVAL;
-	}
+	clk->bypassed = 0;
 
 	return 0;
 }
 
 /**
- * zynq_pll_get_parent() - Reparent clock
+ * zynq_pll_disable - Disable clock
  * @hw:		Handle between common and hardware-specific interfaces
- * Returns the index of the current clock parent.
+ * Returns 0 on success
  */
-static u8 zynq_pll_get_parent(struct clk_hw *hw)
+static void zynq_pll_disable(struct clk_hw *hw)
 {
+	unsigned long flags = 0;
+	u32 reg;
 	struct zynq_pll *clk = to_zynq_pll(hw);
 
-	return clk->bypassed;
+	if (clk->bypassed)
+		return;
+
+	/* Set bypass bit and shut down PLL */
+	spin_lock_irqsave(clk->lock, flags);
+
+	reg = readl(clk->pllctrl);
+	reg |= PLLCTRL_BYPASS_MASK;
+	writel(reg, clk->pllctrl);
+	reg |= PLLCTRL_RESET_MASK | PLLCTRL_PWRDWN_MASK;
+	writel(reg, clk->pllctrl);
+
+	spin_unlock_irqrestore(clk->lock, flags);
+
+	clk->bypassed = 1;
+}
+
+/**
+ * zynq_pll_is_enabled - Check if a clock is enabled
+ * @hw:		Handle between common and hardware-specific interfaces
+ * Returns 1 if the clock is enabled, 0 otherwise.
+ *
+ * Not sure this is a good idea, but since disabled means bypassed for
+ * this clock implementation we say we are always enabled.
+ */
+static int zynq_pll_is_enabled(struct clk_hw *hw)
+{
+	return 1;
 }
 
 static const struct clk_ops zynq_pll_ops = {
-	.set_parent = zynq_pll_set_parent,
-	.get_parent = zynq_pll_get_parent,
+	.enable = zynq_pll_enable,
+	.disable = zynq_pll_disable,
+	.is_enabled = zynq_pll_is_enabled,
 	.set_rate = zynq_pll_set_rate,
 	.round_rate = zynq_pll_round_rate,
 	.recalc_rate = zynq_pll_recalc_rate
@@ -368,12 +378,12 @@ struct clk *clk_register_zynq_pll(const char *name, void __iomem *pllctrl,
 		spinlock_t *lock)
 {
 	struct zynq_pll *clk;
-	const char *pnames[] = {"PS_CLK", "PS_CLK"};
+	const char *pnames[] = {"PS_CLK"};
 	struct clk_init_data initd = {
 		.name = name,
 		.ops = &zynq_pll_ops,
 		.parent_names = pnames,
-		.num_parents = 2,
+		.num_parents = 1,
 		.flags = 0
 	};
 
-- 
1.7.1

