From 38f9d5d30709aedfa1bcc412d79a0d235230fdf5 Mon Sep 17 00:00:00 2001
From: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
Date: Fri, 30 Nov 2012 18:12:10 +1000
Subject: [PATCH] arm: zynq: Generalised cpu starting function

Generalised the secondary boot function to boot the nth CPU
rather than the secondary (CPU1).

Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 arch/arm/mach-zynq/common.h              |    2 +
 arch/arm/mach-zynq/include/mach/system.h |    2 +-
 arch/arm/mach-zynq/platsmp.c             |   39 ++++++++++++++++++++---------
 drivers/remoteproc/zynq_remoteproc.c     |    2 +-
 4 files changed, 31 insertions(+), 14 deletions(-)

diff --git a/arch/arm/mach-zynq/common.h b/arch/arm/mach-zynq/common.h
index 1a79919..1631a45 100644
--- a/arch/arm/mach-zynq/common.h
+++ b/arch/arm/mach-zynq/common.h
@@ -22,6 +22,8 @@
 void __init xttcpss_timer_init(void);
 void platform_device_init(void);
 
+int __cpuinit zynq_cpun_start(u32 address, int cpu);
+
 static inline void xilinx_system_reset(char mode, const char *cmd)
 {
 	xslcr_system_reset();
diff --git a/arch/arm/mach-zynq/include/mach/system.h b/arch/arm/mach-zynq/include/mach/system.h
index a81563f..6760fea 100644
--- a/arch/arm/mach-zynq/include/mach/system.h
+++ b/arch/arm/mach-zynq/include/mach/system.h
@@ -15,7 +15,7 @@
 #ifndef __MACH_SYSTEM_H__
 #define __MACH_SYSTEM_H__
 
-extern int zynq_cpu1_start(u32 address);
+extern int zynq_cpun_start(u32 address, int cpu);
 
 static inline void arch_reset(char mode, const char *cmd)
 {
diff --git a/arch/arm/mach-zynq/platsmp.c b/arch/arm/mach-zynq/platsmp.c
index 672f613..f4ffd5d 100644
--- a/arch/arm/mach-zynq/platsmp.c
+++ b/arch/arm/mach-zynq/platsmp.c
@@ -38,6 +38,13 @@ static u8 __iomem *zero;
 static unsigned int mem_backup[3];
 static unsigned int mem_backup_done;
 
+/*
+ * Store number of cores in the system
+ * Because of scu_get_core_count() must be in __init section and can't
+ * be called from zynq_cpun_start() because it is in __cpuinit section.
+ */
+static int ncores;
+
 /* Secondary CPU kernel startup is a 2 step process. The primary CPU
  * starts the secondary CPU by giving it the address of the kernel and
  * then sending it an event to wake it up. The secondary CPU then
@@ -80,11 +87,19 @@ void __cpuinit platform_secondary_init(unsigned int cpu)
 
 static u8 __iomem *slcr;
 
-int zynq_cpu1_start(u32 address)
+int __cpuinit zynq_cpun_start(u32 address, int cpu)
 {
+	if (cpu > ncores) {
+		pr_warn("CPU No. is not available in the system\n");
+		return -1;
+	}
+
 	if (!slcr) {
 		printk(KERN_INFO "Map SLCR registers\n");
-		/* Remap the SLCR registers to be able to work with cpu1 */
+		/*
+		 * Remap the SLCR registers to be able to work
+		 * with secondary CPUs
+		 */
 		slcr = ioremap(0xF8000000, PAGE_SIZE);
 		if (!slcr) {
 			printk(KERN_WARNING
@@ -98,7 +113,8 @@ int zynq_cpu1_start(u32 address)
 	/* Not possible to jump to non aligned address */
 	if (!(address & 3) && (!address || (address >= 0xC))) {
 		__raw_writel(SLCR_UNLOCK, slcr + 0x8); /* UNLOCK SLCR */
-		__raw_writel(0x22, slcr + 0x244); /* stop CLK and reset CPU1 */
+		/* stop CLK and reset CPUn */
+		__raw_writel(0x11 << cpu, slcr + 0x244);
 
 		/*
 		 * This is elegant way how to jump to any address
@@ -125,8 +141,8 @@ int zynq_cpu1_start(u32 address)
 		outer_flush_all();
 		wmb();
 
-		__raw_writel(0x20, slcr + 0x244); /* enable CPU1 */
-		__raw_writel(0x0, slcr + 0x244); /* enable CLK for CPU1 */
+		__raw_writel(0x10 << cpu, slcr + 0x244); /* enable CPUn */
+		__raw_writel(0x0, slcr + 0x244); /* enable CLK for CPUn */
 
 		/* the SLCR locking/unlocking needs to be re-done, for now
 		 * there is not centralized locking/unlocking so leave it
@@ -138,12 +154,11 @@ int zynq_cpu1_start(u32 address)
 		return 0;
 	}
 
-	printk(KERN_WARNING "Can't start CPU1: Wrong starting address %x\n",
-								address);
+	pr_warn("Can't start CPU%d: Wrong starting address %x\n", cpu, address);
 
 	return -1;
 }
-EXPORT_SYMBOL(zynq_cpu1_start);
+EXPORT_SYMBOL(zynq_cpun_start);
 
 int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 {
@@ -155,7 +170,7 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 	 */
 	spin_lock(&boot_lock);
 
-	ret = zynq_cpu1_start(virt_to_phys(secondary_startup));
+	ret = zynq_cpun_start(virt_to_phys(secondary_startup), cpu);
 	if (ret) {
 		spin_unlock(&boot_lock);
 		return -1;
@@ -176,11 +191,11 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
  */
 void __init smp_init_cpus(void)
 {
-	int i, ncores;
+	int i;
 
 	ncores = scu_get_core_count(SCU_PERIPH_BASE);
 
-	for (i = 0; i < ncores; i++)
+	for (i = 0; i < ncores && i < CONFIG_NR_CPUS; i++)
 		set_cpu_possible(i, true);
 
 	set_smp_cross_call(gic_raise_softirq);
@@ -192,7 +207,7 @@ void __init platform_smp_prepare_cpus(unsigned int max_cpus)
 
 	/*
 	 * Remap the first three addresses at zero which are used
-	 * for 32bit long jump for SMP. Look at zynq_cpu1_start()
+	 * for 32bit long jump for SMP. Look at zynq_cpun_start()
 	 */
 #if defined(CONFIG_PHYS_OFFSET) && (CONFIG_PHYS_OFFSET != 0)
 	zero = ioremap(0, 12);
diff --git a/drivers/remoteproc/zynq_remoteproc.c b/drivers/remoteproc/zynq_remoteproc.c
index 4fd429f..fa63368 100644
--- a/drivers/remoteproc/zynq_remoteproc.c
+++ b/drivers/remoteproc/zynq_remoteproc.c
@@ -93,7 +93,7 @@ static int zynq_rproc_start(struct rproc *rproc)
 	outer_flush_range(local->mem_start, local->mem_end);
 
 	remoteprocdev = pdev;
-	ret = zynq_cpu1_start(0);
+	ret = zynq_cpun_start(0, 1);
 
 	return ret;
 }
-- 
1.7.1

