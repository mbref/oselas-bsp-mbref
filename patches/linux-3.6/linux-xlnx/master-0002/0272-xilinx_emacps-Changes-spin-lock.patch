From c1dfaef6b3d510dc115503033480b51055c54037 Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xilinx.com>
Date: Wed, 3 Apr 2013 23:06:54 +0530
Subject: [PATCH] xilinx_emacps: Changes spin-lock

The existing implementation had a single lock for tx and rx paths.
This resulted in creating dependencies between tx and rx paths. For
example a Rx interrupt had to wait for the start_xmit routine to
finish. This could also result in potential locking issues as
reported by running on Qemu.
This patch uses two locks(one each for tx and rx paths) instead
of a single lock. This patch avoids to the extent possible not to
disable IRQs (avoids spin-lock-irqsave) and instead uses spin-lock-bh.
This effectively makes the Tx and Rx paths independent of each other.
This patch addresses all concerns (because of this new implementation)
related to inadvertent corruption of registers.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   73 ++++++++++++++++-----------
 1 files changed, 44 insertions(+), 29 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index e901d4e..6c5c06a 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -516,7 +516,8 @@ struct net_local {
 
 	u32 tx_bd_freecnt;
 
-	spinlock_t lock;
+	spinlock_t tx_lock;
+	spinlock_t rx_lock;
 
 	struct platform_device *pdev;
 	struct net_device *ndev; /* this device */
@@ -1193,7 +1194,7 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 	int temp_work_done;
 	u32 regval;
 
-
+	spin_lock(&lp->rx_lock);
 	while (work_done < budget) {
 		regval = xemacps_read(lp->baseaddr, XEMACPS_RXSR_OFFSET);
 		xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
@@ -1203,8 +1204,10 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 			break;
 	}
 
-	if (work_done >= budget)
+	if (work_done >= budget) {
+		spin_unlock(&lp->rx_lock);
 		return work_done;
+	}
 
 	napi_complete(napi);
 	/* We disabled RX interrupts in interrupt service
@@ -1212,7 +1215,7 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 	 */
 	xemacps_write(lp->baseaddr,
 		XEMACPS_IER_OFFSET, XEMACPS_IXR_FRAMERX_MASK);
-
+	spin_unlock(&lp->rx_lock);
 	return work_done;
 }
 
@@ -1235,6 +1238,7 @@ static void xemacps_tx_poll(unsigned long data)
 	struct ring_info *rp;
 	struct sk_buff *skb;
 
+	spin_lock(&lp->tx_lock);
 	regval = xemacps_read(lp->baseaddr, XEMACPS_TXSR_OFFSET);
 	xemacps_write(lp->baseaddr, XEMACPS_TXSR_OFFSET, regval);
 	dev_dbg(&lp->pdev->dev, "TX status 0x%x\n", regval);
@@ -1328,6 +1332,7 @@ static void xemacps_tx_poll(unsigned long data)
 tx_poll_out:
 	if (netif_queue_stopped(ndev))
 		netif_start_queue(ndev);
+	spin_unlock(&lp->tx_lock);
 }
 
 /**
@@ -1343,12 +1348,10 @@ static irqreturn_t xemacps_interrupt(int irq, void *dev_id)
 	u32 regisr;
 	u32 regctrl;
 
-	spin_lock(&lp->lock);
 	regisr = xemacps_read(lp->baseaddr, XEMACPS_ISR_OFFSET);
-	if (unlikely(!regisr)) {
-		spin_unlock(&lp->lock);
+	if (unlikely(!regisr))
 		return IRQ_NONE;
-	}
+
 	xemacps_write(lp->baseaddr, XEMACPS_ISR_OFFSET, regisr);
 
 	while (regisr) {
@@ -1373,7 +1376,6 @@ static irqreturn_t xemacps_interrupt(int irq, void *dev_id)
 		regisr = xemacps_read(lp->baseaddr, XEMACPS_ISR_OFFSET);
 		xemacps_write(lp->baseaddr, XEMACPS_ISR_OFFSET, regisr);
 	}
-	spin_unlock(&lp->lock);
 
 	return IRQ_HANDLED;
 }
@@ -1667,10 +1669,12 @@ static void xemacps_resetrx_for_no_rxdata(unsigned long data)
 	struct net_local *lp = (struct net_local *)data;
 	unsigned long regctrl;
 	unsigned long tempcntr;
+	unsigned long flags;
 
-	spin_lock(&lp->lock);
 	tempcntr = xemacps_read(lp->baseaddr, XEMACPS_RXCNT_OFFSET);
 	if ((!tempcntr) && (!(lp->lastrxfrmscntr))) {
+		spin_lock_bh(&lp->tx_lock);
+		spin_lock_irqsave(&lp->rx_lock, flags);
 		regctrl = xemacps_read(lp->baseaddr,
 				XEMACPS_NWCTRL_OFFSET);
 		regctrl &= (~XEMACPS_NWCTRL_RXEN_MASK);
@@ -1679,9 +1683,10 @@ static void xemacps_resetrx_for_no_rxdata(unsigned long data)
 		regctrl = xemacps_read(lp->baseaddr, XEMACPS_NWCTRL_OFFSET);
 		regctrl |= (XEMACPS_NWCTRL_RXEN_MASK);
 		xemacps_write(lp->baseaddr, XEMACPS_NWCTRL_OFFSET, regctrl);
+		spin_unlock_irqrestore(&lp->rx_lock, flags);
+		spin_unlock_bh(&lp->tx_lock);
 	}
 	lp->lastrxfrmscntr = tempcntr;
-	spin_unlock(&lp->lock);
 }
 
 /**
@@ -1851,16 +1856,17 @@ err_free_rings:
 static int xemacps_close(struct net_device *ndev)
 {
 	struct net_local *lp = netdev_priv(ndev);
-	unsigned long flags;
 
 	del_timer(&(lp->gen_purpose_timer));
 	netif_stop_queue(ndev);
 	napi_disable(&lp->napi);
 	tasklet_disable(&lp->tx_bdreclaim_tasklet);
-	spin_lock_irqsave(&lp->lock, flags);
+	spin_lock_bh(&lp->tx_lock);
+	spin_lock(&lp->rx_lock);
 	xemacps_reset_hw(lp);
 	netif_carrier_off(ndev);
-	spin_unlock_irqrestore(&lp->lock, flags);
+	spin_unlock(&lp->rx_lock);
+	spin_unlock_bh(&lp->tx_lock);
 	if (lp->phy_dev)
 		phy_disconnect(lp->phy_dev);
 	xemacps_descriptor_free(lp);
@@ -1884,7 +1890,7 @@ static void xemacps_tx_timeout(struct net_device *ndev)
 		TX_TIMEOUT * 1000UL / HZ);
 	netif_stop_queue(ndev);
 
-	spin_lock(&lp->lock);
+	spin_lock_bh(&lp->tx_lock);
 	napi_disable(&lp->napi);
 	tasklet_disable(&lp->tx_bdreclaim_tasklet);
 	xemacps_reset_hw(lp);
@@ -1895,7 +1901,7 @@ static void xemacps_tx_timeout(struct net_device *ndev)
 	if (rc) {
 		dev_err(&lp->pdev->dev,
 			"Unable to allocate DMA memory, rc %d\n", rc);
-		spin_unlock(&lp->lock);
+		spin_unlock_bh(&lp->tx_lock);
 		return;
 	}
 
@@ -1909,7 +1915,7 @@ static void xemacps_tx_timeout(struct net_device *ndev)
 	napi_enable(&lp->napi);
 	tasklet_enable(&lp->tx_bdreclaim_tasklet);
 
-	spin_unlock(&lp->lock);
+	spin_unlock_bh(&lp->tx_lock);
 	netif_start_queue(ndev);
 }
 
@@ -1958,12 +1964,12 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	struct xemacps_bd *cur_p;
 
 	nr_frags = skb_shinfo(skb)->nr_frags + 1;
-	spin_lock_irq(&lp->lock);
+	spin_lock_bh(&lp->tx_lock);
 
 	cur_p = &(lp->tx_bd[lp->tx_bd_tail]);
 	if (nr_frags >= lp->tx_bd_freecnt) {
 		netif_stop_queue(ndev); /* stop send queue */
-		spin_unlock_irq(&lp->lock);
+		spin_unlock_bh(&lp->tx_lock);
 		return NETDEV_TX_BUSY;
 	}
 	lp->tx_bd_freecnt -= nr_frags;
@@ -2011,7 +2017,7 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	xemacps_write(lp->baseaddr, XEMACPS_NWCTRL_OFFSET,
 			(regval | XEMACPS_NWCTRL_STARTTX_MASK));
 
-	spin_unlock_irq(&lp->lock);
+	spin_unlock_bh(&lp->tx_lock);
 	ndev->trans_start = jiffies;
 	return 0;
 }
@@ -2274,7 +2280,8 @@ xemacps_get_wol(struct net_device *ndev, struct ethtool_wolinfo *ewol)
 	u32 regval;
 
 	ewol->supported = WAKE_MAGIC | WAKE_ARP | WAKE_UCAST | WAKE_MCAST;
-	spin_lock_irqsave(&lp->lock, flags);
+	spin_lock_irqsave(&lp->tx_lock, flags);
+	spin_lock(&lp->rx_lock);
 	regval = xemacps_read(lp->baseaddr, XEMACPS_WOL_OFFSET);
 	if (regval | XEMACPS_WOL_MCAST_MASK)
 		ewol->wolopts |= WAKE_MCAST;
@@ -2284,7 +2291,8 @@ xemacps_get_wol(struct net_device *ndev, struct ethtool_wolinfo *ewol)
 		ewol->wolopts |= WAKE_UCAST;
 	if (regval | XEMACPS_WOL_MAGIC_MASK)
 		ewol->wolopts |= WAKE_MAGIC;
-	spin_unlock_irqrestore(&lp->lock, flags);
+	spin_unlock(&lp->rx_lock);
+	spin_unlock_irqrestore(&lp->tx_lock, flags);
 }
 
 /**
@@ -2307,7 +2315,8 @@ xemacps_set_wol(struct net_device *ndev, struct ethtool_wolinfo *ewol)
 	if (ewol->wolopts & ~(WAKE_MAGIC | WAKE_ARP | WAKE_UCAST | WAKE_MCAST))
 		return -EOPNOTSUPP;
 
-	spin_lock_irqsave(&lp->lock, flags);
+	spin_lock_irqsave(&lp->tx_lock, flags);
+	spin_lock(&lp->rx_lock);
 	regval  = xemacps_read(lp->baseaddr, XEMACPS_WOL_OFFSET);
 	regval &= ~(XEMACPS_WOL_MCAST_MASK | XEMACPS_WOL_ARP_MASK |
 		XEMACPS_WOL_SPEREG1_MASK | XEMACPS_WOL_MAGIC_MASK);
@@ -2322,7 +2331,8 @@ xemacps_set_wol(struct net_device *ndev, struct ethtool_wolinfo *ewol)
 		regval |= XEMACPS_WOL_MCAST_MASK;
 
 	xemacps_write(lp->baseaddr, XEMACPS_WOL_OFFSET, regval);
-	spin_unlock_irqrestore(&lp->lock, flags);
+	spin_unlock(&lp->rx_lock);
+	spin_unlock_irqrestore(&lp->tx_lock, flags);
 
 	return 0;
 }
@@ -2346,10 +2356,12 @@ xemacps_get_pauseparam(struct net_device *ndev,
 	epauseparm->autoneg  = 0;
 	epauseparm->rx_pause = 0;
 
-	spin_lock_irqsave(&lp->lock, flags);
+	spin_lock_irqsave(&lp->tx_lock, flags);
+	spin_lock(&lp->rx_lock);
 	regval = xemacps_read(lp->baseaddr, XEMACPS_NWCFG_OFFSET);
 	epauseparm->tx_pause = regval & XEMACPS_NWCFG_PAUSEEN_MASK;
-	spin_unlock_irqrestore(&lp->lock, flags);
+	spin_unlock(&lp->rx_lock);
+	spin_unlock_irqrestore(&lp->tx_lock, flags);
 }
 
 /**
@@ -2375,7 +2387,8 @@ xemacps_set_pauseparam(struct net_device *ndev,
 		return -EFAULT;
 	}
 
-	spin_lock_irqsave(&lp->lock, flags);
+	spin_lock_irqsave(&lp->tx_lock, flags);
+	spin_lock(&lp->rx_lock);
 	regval = xemacps_read(lp->baseaddr, XEMACPS_NWCFG_OFFSET);
 
 	if (epauseparm->tx_pause)
@@ -2384,7 +2397,8 @@ xemacps_set_pauseparam(struct net_device *ndev,
 		regval &= ~XEMACPS_NWCFG_PAUSEEN_MASK;
 
 	xemacps_write(lp->baseaddr, XEMACPS_NWCFG_OFFSET, regval);
-	spin_unlock_irqrestore(&lp->lock, flags);
+	spin_unlock(&lp->rx_lock);
+	spin_unlock_irqrestore(&lp->tx_lock, flags);
 
 	return 0;
 }
@@ -2542,7 +2556,8 @@ static int __devinit xemacps_probe(struct platform_device *pdev)
 	lp->pdev = pdev;
 	lp->ndev = ndev;
 
-	spin_lock_init(&lp->lock);
+	spin_lock_init(&lp->tx_lock);
+	spin_lock_init(&lp->rx_lock);
 
 	lp->baseaddr = ioremap(r_mem->start, (r_mem->end - r_mem->start + 1));
 	if (!lp->baseaddr) {
-- 
1.7.1

