From 52c255e438108c829bb9a1a78dba83dc2bfc09e2 Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Thu, 29 Nov 2012 17:43:13 +0100
Subject: [PATCH] arm: zynq: Moving to GENERIC_GPIO

There is only one difference in irq_to_gpio function.
The rest is completely the same with GENERIC_GPIO
implementation.

Partial rework based on the patch from Stefan Roese <sr@denx.de>.

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 arch/arm/Kconfig                       |    5 ++-
 arch/arm/mach-zynq/include/mach/gpio.h |   58 --------------------------------
 drivers/gpio/gpio-xilinxps.c           |   46 ++++++++++++++++---------
 3 files changed, 33 insertions(+), 76 deletions(-)
 delete mode 100644 arch/arm/mach-zynq/include/mach/gpio.h

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index bfd2dcd..bddd329 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1,7 +1,7 @@
 config ARM
 	bool
 	default y
-	select ARCH_HAVE_CUSTOM_GPIO_H
+	select ARCH_HAVE_CUSTOM_GPIO_H if (!ARCH_ZYNQ)
 	select HAVE_AOUT
 	select HAVE_DMA_API_DEBUG
 	select HAVE_IDE if PCI || ISA || PCMCIA
@@ -1012,6 +1012,7 @@ config ARCH_ZYNQ
 	bool "Xilinx Zynq ARM Cortex A9 Platform"
 	select CPU_V7
 	select GENERIC_TIME
+	select GENERIC_GPIO
 	select GENERIC_CLOCKEVENTS
 	select CLKDEV_LOOKUP
 	select ARM_GIC
@@ -1629,7 +1630,7 @@ config LOCAL_TIMERS
 
 config ARCH_NR_GPIO
 	int
-	default 1024 if ARCH_SHMOBILE || ARCH_TEGRA
+	default 1024 if ARCH_SHMOBILE || ARCH_TEGRA || ARCH_ZYNQ
 	default 355 if ARCH_U8500
 	default 264 if MACH_H4700
 	default 512 if SOC_OMAP5
diff --git a/arch/arm/mach-zynq/include/mach/gpio.h b/arch/arm/mach-zynq/include/mach/gpio.h
deleted file mode 100644
index d90979a..0000000
--- a/arch/arm/mach-zynq/include/mach/gpio.h
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Xilinx PSS GPIO Header File
- * arch/arm/mach-xilinx/gpio.h
- *
- * 2009 (c) Xilinx, Inc.
- *
- * This program is free software; you can redistribute it and/or modify it under
- * the terms of the GNU General Public License as published by the Free Software
- * Foundation; either version 2 of the License, or (at your option) any later
- * version.
- *
- * You should have received a copy of the GNU General Public License along with
- * this program; if not, write to the Free Software Foundation, Inc., 675 Mass
- * Ave, Cambridge, MA 02139, USA.
- */
-
-#ifndef __ASM_ARCH_GPIO_H
-#define __ASM_ARCH_GPIO_H
-
-
-#define ARCH_NR_GPIOS		256
-#define XGPIOPS_IRQBASE		256
-
-
-extern int gpio_direction_input(unsigned gpio);
-extern int gpio_direction_output(unsigned gpio, int value);
-extern int __gpio_get_value(unsigned gpio);
-extern void __gpio_set_value(unsigned gpio, int value);
-extern int __gpio_cansleep(unsigned gpio);
-
-static inline int gpio_get_value(unsigned gpio)
-{
-	return __gpio_get_value(gpio);
-}
-
-static inline void gpio_set_value(unsigned gpio, int value)
-{
-	__gpio_set_value(gpio, value);
-}
-
-static inline int gpio_cansleep(unsigned int gpio)
-{
-	return __gpio_cansleep(gpio);
-}
-
-#include <asm-generic/gpio.h>
-
-static inline unsigned int gpio_to_irq(unsigned int pin)
-{
-	return pin + XGPIOPS_IRQBASE;
-}
-
-static inline unsigned int irq_to_gpio(unsigned int irq)
-{
-	return irq - XGPIOPS_IRQBASE;
-}
-
-#endif /* __ASM_ARCH_GPIO_H */
diff --git a/drivers/gpio/gpio-xilinxps.c b/drivers/gpio/gpio-xilinxps.c
index f3802e6..908ffa8 100644
--- a/drivers/gpio/gpio-xilinxps.c
+++ b/drivers/gpio/gpio-xilinxps.c
@@ -27,10 +27,13 @@
 #include <linux/pm_wakeup.h>
 #include <linux/slab.h>
 #include <asm/mach/irq.h>
+#include <linux/irqdomain.h>
 
 #define DRIVER_NAME "xgpiops"
 #define XGPIOPS_NR_GPIOS	118
 
+static struct irq_domain *irq_domain;
+
 /* Register offsets for the GPIO device */
 
 #define XGPIOPS_DATA_LSW_OFFSET(BANK)	(0x000 + (8 * BANK)) /* LSW Mask &
@@ -85,6 +88,7 @@ struct xgpiops {
 	struct gpio_chip chip;
 	void __iomem *base_addr;
 	unsigned int irq;
+	unsigned int irq_base;
 	struct clk *clk;
 	spinlock_t gpio_lock;
 };
@@ -232,9 +236,7 @@ static int xgpiops_dir_out(struct gpio_chip *chip, unsigned int pin, int state)
 
 static int xgpiops_to_irq(struct gpio_chip *chip, unsigned offset)
 {
-	if (offset < XGPIOPS_NR_GPIOS)
-		return XGPIOPS_IRQBASE + offset;
-	return -ENODEV;
+	return irq_find_mapping(irq_domain, offset);
 }
 
 /**
@@ -249,7 +251,7 @@ static void xgpiops_irq_ack(struct irq_data *irq_data)
 	struct xgpiops *gpio = (struct xgpiops *)irq_data_get_irq_chip_data(irq_data);
 	unsigned int device_pin_num, bank_num, bank_pin_num;
 
-	device_pin_num = irq_to_gpio(irq_data->irq); /* get pin num within the device */
+	device_pin_num = irq_data->hwirq;
 	xgpiops_get_bank_pin(device_pin_num, &bank_num, &bank_pin_num);
 	xgpiops_writereg(1 << bank_pin_num, gpio->base_addr +
 			(XGPIOPS_INTSTS_OFFSET(bank_num)));
@@ -268,7 +270,7 @@ static void xgpiops_irq_mask(struct irq_data *irq_data)
 	struct xgpiops *gpio = (struct xgpiops *)irq_data_get_irq_chip_data(irq_data);
 	unsigned int device_pin_num, bank_num, bank_pin_num;
 
-	device_pin_num = irq_to_gpio(irq_data->irq); /* get pin num within the device */
+	device_pin_num = irq_data->hwirq;
 	xgpiops_get_bank_pin(device_pin_num, &bank_num, &bank_pin_num);
 	xgpiops_writereg(1 << bank_pin_num,
 			  gpio->base_addr + XGPIOPS_INTDIS_OFFSET(bank_num));
@@ -287,7 +289,7 @@ static void xgpiops_irq_unmask(struct irq_data *irq_data)
 	struct xgpiops *gpio = irq_data_get_irq_chip_data(irq_data);
 	unsigned int device_pin_num, bank_num, bank_pin_num;
 
-	device_pin_num = irq_to_gpio(irq_data->irq); /* get pin num within the device */
+	device_pin_num = irq_data->hwirq;
 	xgpiops_get_bank_pin(device_pin_num, &bank_num, &bank_pin_num);
 	xgpiops_writereg(1 << bank_pin_num,
 			  gpio->base_addr + XGPIOPS_INTEN_OFFSET(bank_num));
@@ -313,7 +315,7 @@ static int xgpiops_set_irq_type(struct irq_data *irq_data, unsigned int type)
 	unsigned int device_pin_num, bank_num, bank_pin_num;
 	unsigned int int_type, int_pol, int_any;
 
-	device_pin_num = irq_to_gpio(irq_data->irq); /* get pin num within the device */
+	device_pin_num = irq_data->hwirq;
 	xgpiops_get_bank_pin(device_pin_num, &bank_num, &bank_pin_num);
 
 	int_type = xgpiops_readreg(gpio->base_addr +
@@ -396,8 +398,8 @@ static struct irq_chip xgpiops_irqchip = {
  */
 static void xgpiops_irqhandler(unsigned int irq, struct irq_desc *desc)
 {
-	int gpio_irq = (int)irq_get_handler_data(irq);
-	struct xgpiops *gpio = (struct xgpiops *)irq_get_chip_data(gpio_irq);
+	struct xgpiops *gpio = (struct xgpiops *)irq_get_handler_data(irq);
+	int gpio_irq = gpio->irq_base;
 	unsigned int int_sts, int_enb, bank_num;
 	struct irq_desc *gpio_irq_desc;
 	struct irq_chip *chip = irq_desc_get_chip(desc);
@@ -602,6 +604,18 @@ static int __devinit xgpiops_probe(struct platform_device *pdev)
 	chip->ngpio = XGPIOPS_NR_GPIOS;
 	chip->can_sleep = 0;
 
+	/* FIXME Setup 0 instead of 256 when PCIe is fixed */
+	gpio->irq_base = irq_alloc_descs(-1, 256, chip->ngpio, 0);
+	if (gpio->irq_base < 0) {
+		dev_err(&pdev->dev, "Couldn't allocate IRQ numbers\n");
+		ret = -ENODEV;
+		goto err_iounmap;
+	}
+
+	irq_domain = irq_domain_add_legacy(pdev->dev.of_node,
+					   chip->ngpio, gpio->irq_base, 0,
+					   &irq_domain_simple_ops, NULL);
+
 	/* report a bug if gpio chip registration fails */
 	ret = gpiochip_add(chip);
 	if (ret < 0) {
@@ -636,16 +650,16 @@ static int __devinit xgpiops_probe(struct platform_device *pdev)
 	 * set the irq chip, handler and irq chip data for callbacks for
 	 * each pin
 	 */
-	gpio_irq = XGPIOPS_IRQBASE;
-	for (pin_num = 0; pin_num < XGPIOPS_NR_GPIOS; pin_num++, gpio_irq++) {
-		irq_set_chip(gpio_irq, &xgpiops_irqchip);
+	for (pin_num = 0; pin_num < min_t(int, XGPIOPS_NR_GPIOS,
+						(int)chip->ngpio); pin_num++) {
+		gpio_irq = irq_find_mapping(irq_domain, pin_num);
+		irq_set_chip_and_handler(gpio_irq, &xgpiops_irqchip,
+							handle_simple_irq);
 		irq_set_chip_data(gpio_irq, (void *)gpio);
-		irq_set_handler(gpio_irq, handle_simple_irq);
-		irq_set_status_flags(gpio_irq, IRQF_VALID);
-		irq_clear_status_flags(gpio_irq, IRQ_NOREQUEST);
+		set_irq_flags(gpio_irq, IRQF_VALID);
 	}
 
-	irq_set_handler_data(irq_num, (void *)(XGPIOPS_IRQBASE));
+	irq_set_handler_data(irq_num, (void *)gpio);
 	irq_set_chained_handler(irq_num, xgpiops_irqhandler);
 
 	xgpiops_pm_runtime_init(pdev);
-- 
1.7.1

