From 53721a951b7ccd35b81ad63d9b7e316c9f7211a7 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Mon, 12 Nov 2012 11:58:46 -0800
Subject: [PATCH] serial: xilinx_uartps: Remove CONFIG_COMMON_CLK conditionals

CONFIG_COMMON_CLK is mandatory for the Zynq platform. For this
reason all conditional compiling regarding this option can be removed.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Acked-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/tty/serial/xilinx_uartps.c |   46 +----------------------------------
 1 files changed, 2 insertions(+), 44 deletions(-)

diff --git a/drivers/tty/serial/xilinx_uartps.c b/drivers/tty/serial/xilinx_uartps.c
index 6a3a052..e97aa8d 100644
--- a/drivers/tty/serial/xilinx_uartps.c
+++ b/drivers/tty/serial/xilinx_uartps.c
@@ -29,10 +29,8 @@
 #include <linux/moduleparam.h>
 #include <linux/module.h>
 #include <linux/kernel.h>
-#ifdef CONFIG_COMMON_CLK
 #include <linux/slab.h>
 #include <linux/clk.h>
-#endif
 
 #define XUARTPS_TTY_NAME	"ttyPS"
 #define XUARTPS_NAME		"xuartps"
@@ -165,7 +163,6 @@ MODULE_PARM_DESC (rx_timeout, "Rx timeout, 1-255");
 #define XUARTPS_SR_TXFULL	0x00000010 /* TX FIFO full */
 #define XUARTPS_SR_RXTRIG	0x00000001 /* Rx Trigger */
 
-#ifdef CONFIG_COMMON_CLK
 struct xuartps {
 	int			uartnum;
 	struct uart_port	*port;
@@ -176,7 +173,6 @@ struct xuartps {
 };
 #define to_xuartps(_nb) container_of(_nb, struct xuartps, clk_rate_change_nb);
 
-#endif
 
 /**
  * xuartps_isr - Interrupt handler
@@ -418,7 +414,6 @@ static unsigned int xuartps_set_baud_rate(struct uart_port *port,
 	return calc_baud;
 }
 
-#ifdef CONFIG_COMMON_CLK
 /*
  * no clue yet how to implement this. i think we need access to the port
  * structure in this function to do the required changes. but i don't know how
@@ -501,7 +496,6 @@ static int xuartps_clk_notifier_cb(struct notifier_block *nb,
 		return NOTIFY_DONE;
 	}
 }
-#endif
 
 /*----------------------Uart Operations---------------------------*/
 
@@ -1241,25 +1235,7 @@ static int __devinit xuartps_probe(struct platform_device *pdev)
 	int ret = 0;
 	int id = 0;
 
-#ifdef CONFIG_COMMON_CLK
 	struct xuartps *xuartps;
-#else
-	const unsigned int *prop;
-
-	prop = of_get_property(pdev->dev.of_node, "clock", NULL);
-	if (prop)
-		clk = be32_to_cpup(prop);
-	else {
-		prop = of_get_property(pdev->dev.of_node, "clock-frequency", NULL);
-		if (prop)
-			clk = be32_to_cpup(prop);
-	}
-
-	if (!clk) {
-		dev_err(&pdev->dev, "no clock specified\n");
-		return -ENODEV;
-	}
-#endif
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res)
@@ -1277,7 +1253,6 @@ static int __devinit xuartps_probe(struct platform_device *pdev)
 	}
 
 	port = xuartps_get_port(id);
-#ifdef CONFIG_COMMON_CLK
 	xuartps = kmalloc(sizeof(*xuartps), GFP_KERNEL);
 	if (res2->start == 59)
 		xuartps->uartnum = 0;
@@ -1320,7 +1295,6 @@ static int __devinit xuartps_probe(struct platform_device *pdev)
 	if (clk_notifier_register(xuartps->devclk,
 				&xuartps->clk_rate_change_nb))
 		dev_warn(&pdev->dev, "Unable to register clock notifier.\n");
-#endif
 
 	/* Initialize the port structure */
 	if (!port) {
@@ -1336,10 +1310,8 @@ static int __devinit xuartps_probe(struct platform_device *pdev)
 		port->irq = res2->start;
 		port->dev = &pdev->dev;
 		port->uartclk = clk;
-#ifdef CONFIG_COMMON_CLK
 		port->private_data = xuartps;
 		xuartps->port = port;
-#endif
 		dev_set_drvdata(&pdev->dev, port);
 		rc = uart_add_one_port(&xuartps_uart_driver, port);
 		if (rc) {
@@ -1347,16 +1319,13 @@ static int __devinit xuartps_probe(struct platform_device *pdev)
 				"uart_add_one_port() failed; err=%i\n", rc);
 			dev_set_drvdata(&pdev->dev, NULL);
 			port->private_data = NULL;
-#ifdef CONFIG_COMMON_CLK
 			xuartps->port = NULL;
 			ret = rc;
-#endif
 			goto err_out_clk_dis;
 		}
 		return 0;
 	}
 err_out_clk_dis:
-#ifdef CONFIG_COMMON_CLK
 	clk_notifier_unregister(xuartps->devclk, &xuartps->clk_rate_change_nb);
 	clk_disable_unprepare(xuartps->devclk);
 err_out_clk_dis_aper:
@@ -1367,7 +1336,6 @@ err_out_clk_put_aper:
 	clk_put(xuartps->aperclk);
 err_out_free:
 	kfree(xuartps);
-#endif
 
 	return ret;
 }
@@ -1382,29 +1350,23 @@ static int __devexit xuartps_remove(struct platform_device *pdev)
 {
 	struct uart_port *port = dev_get_drvdata(&pdev->dev);
 	int rc = 0;
-#ifdef CONFIG_COMMON_CLK
 	struct xuartps *xuartps;
-#endif
 
 	/* Remove the xuartps port from the serial core */
 	if (port) {
-#ifdef CONFIG_COMMON_CLK
 		xuartps = port->private_data;
 		clk_notifier_unregister(xuartps->devclk,
 				&xuartps->clk_rate_change_nb);
 		xuartps->port = NULL;
 		port->private_data = NULL;
-#endif
 		rc = uart_remove_one_port(&xuartps_uart_driver, port);
 		dev_set_drvdata(&pdev->dev, NULL);
 		port->mapbase = 0;
-#ifdef CONFIG_COMMON_CLK
 		clk_disable_unprepare(xuartps->devclk);
 		clk_put(xuartps->devclk);
 		clk_disable_unprepare(xuartps->aperclk);
 		clk_put(xuartps->aperclk);
 		kfree(xuartps);
-#endif
 	}
 	return rc;
 }
@@ -1419,7 +1381,6 @@ static int __devexit xuartps_remove(struct platform_device *pdev)
 static int xuartps_suspend(struct device *device)
 {
 	struct uart_port *port = dev_get_drvdata(device);
-#ifdef CONFIG_COMMON_CLK
 	struct tty_struct *tty;
 	struct device *tty_dev;
 	int may_wake = 0;
@@ -1431,20 +1392,19 @@ static int xuartps_suspend(struct device *device)
 		may_wake = device_may_wakeup(tty_dev);
 		tty_kref_put(tty);
 	}
-#endif
+
 	/*
 	 * Call the API provided in serial_core.c file which handles
 	 * the suspend.
 	 */
 	uart_suspend_port(&xuartps_uart_driver, port);
-#ifdef CONFIG_COMMON_CLK
 	if (console_suspend_enabled && !may_wake) {
 		struct xuartps *xuartps = port->private_data;
 
 		clk_disable(xuartps->devclk);
 		clk_disable(xuartps->aperclk);
 	}
-#endif
+
 	return 0;
 }
 
@@ -1472,12 +1432,10 @@ static int xuartps_resume(struct device *device)
 	}
 
 	if (console_suspend_enabled && !may_wake) {
-#ifdef CONFIG_COMMON_CLK
 		struct xuartps *xuartps = port->private_data;
 
 		clk_enable(xuartps->aperclk);
 		clk_enable(xuartps->devclk);
-#endif
 
 		spin_lock_irqsave(&port->lock, flags);
 
-- 
1.7.0.4

