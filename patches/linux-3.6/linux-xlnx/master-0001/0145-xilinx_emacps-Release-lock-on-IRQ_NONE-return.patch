From 9df5a1c2b2777f8fa0884fc93b4596fa4acc67ef Mon Sep 17 00:00:00 2001
From: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
Date: Tue, 11 Dec 2012 16:22:23 +1000
Subject: [PATCH] xilinx_emacps: Release lock on IRQ_NONE return

There is an unlikely early return path from the interrupt service that was
returning without releasing the global lock. If this return path is taken
the driver will crash as soon as any other activity tries to take the global
lock. Resolved by releasing the lock.

This is a regression introduced by 4a135db6d2d8c101221f32c2453562adf84ae06d

Reported-by: Nathan Rossi <nathan.rossi@xilinx.com>
Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
Tested-by: Wendy Liang <wendy.liang@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |    4 +++-
 1 files changed, 3 insertions(+), 1 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index e04cded..3ddd39d 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1747,8 +1747,10 @@ static irqreturn_t xemacps_interrupt(int irq, void *dev_id)
 
 	spin_lock(&lp->lock);
 	regisr = xemacps_read(lp->baseaddr, XEMACPS_ISR_OFFSET);
-	if (unlikely(!regisr))
+	if (unlikely(!regisr)) {
+		spin_unlock(&lp->lock);
 		return IRQ_NONE;
+	}
 	xemacps_write(lp->baseaddr, XEMACPS_ISR_OFFSET, regisr);
 
 	while (regisr) {
-- 
1.7.1

