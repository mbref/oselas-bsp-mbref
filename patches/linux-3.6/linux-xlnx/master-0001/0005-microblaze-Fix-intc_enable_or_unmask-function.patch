From 57f174269282fb97d7acd0df5385a8af54796995 Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Mon, 5 Nov 2012 11:51:13 +0100
Subject: [PATCH] microblaze: Fix intc_enable_or_unmask function
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Xilinx crs: CR 677091

Intc_enable_or_unmask() is called at the last stage of handle_level_irq().

This function enables the irq first (Write INTC.SIE) and clear ISR next (Write INTC.IAR).

Here¿s the code in arch/microblaze/kernel/intc.c

static void intc_enable_or_unmask(unsigned int irq)
{
                unsigned long mask = 1 << irq;
                pr_debug("enable_or_unmask: %d\n", irq);
                out_be32(INTC_BASE + SIE, mask);

                /* ack level irqs because they can't be acked during
                 * ack function since the handle_level_irq function
                 * acks the irq before calling the interrupt handler
                 */
                if (irq_desc[irq].status & IRQ_LEVEL)
                                out_be32(INTC_BASE + IAR, mask);
}

This would create problems that processor will get into a new interrupt as soon as SIE is written because the previous level interrupt has been captured by INTC.

If the description bring some puzzles, here¿s the details of how interrupt is handled for MicroBlaze after Interrupt signal is detected:
1. disable INTC (INTC.CIE = 1)
2. Acknowledge INTC (INTC.IAR = 1)
3. gets into interrupt source¿s handler, for example, timer¿s handler
4. Timer¿s interrupt handler acknowledge Timer¿s Interrupt Status (Timer.TCSR0[23] = 1), and return
5. Enable INTC (INTC.SIE = 1)
6. Acknowledge INTC (INTC.IAR = 1)

INTC continue to capture source inputs even if INTC is disabled (INTC.IER == 1).
So between the gap of step 2 and step 3, the level interrupt from source makes INTC captures a new interrupt and thus the INTC.ISR = 1 during step 3, 4, and 5.
When INTC is enabled in step 5, INTC¿s interrupt output will go high immediately.

In summary, the driver should issue step 6 before step 5.

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 arch/microblaze/kernel/intc.c |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/arch/microblaze/kernel/intc.c b/arch/microblaze/kernel/intc.c
index 6c54d4d..7b4c644 100644
--- a/arch/microblaze/kernel/intc.c
+++ b/arch/microblaze/kernel/intc.c
@@ -44,7 +44,6 @@ static void intc_enable_or_unmask(struct irq_data *d)
 	unsigned long mask = 1 << d->hwirq;
 
 	pr_debug("enable_or_unmask: %ld\n", d->hwirq);
-	out_be32(INTC_BASE + SIE, mask);
 
 	/* ack level irqs because they can't be acked during
 	 * ack function since the handle_level_irq function
@@ -52,6 +51,8 @@ static void intc_enable_or_unmask(struct irq_data *d)
 	 */
 	if (irqd_is_level_type(d))
 		out_be32(INTC_BASE + IAR, mask);
+
+	out_be32(INTC_BASE + SIE, mask);
 }
 
 static void intc_disable_or_mask(struct irq_data *d)
-- 
1.7.0.4

