From 909c493dfb4623656f94a0edd412b5c5615bdda5 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Thu, 15 Nov 2012 16:15:32 -0800
Subject: [PATCH] arm: zynq: Clean up OPP initialization

Instead of using a fixed set of frequncies for the OPP table, the
frequency operating points are added as following:
1. boot up CPU frequency (F_boot)
2. F_boot / 2
3. F_boot / 3
4. Minium frequency (200 MHz)
The actual frequencies may vary since the HW may not able to generate the exact
frequency.
If any of the frequencies from 2 - 4 fall below the minimum it is not available.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Acked-by: Michal Simek <michal.simek@xilinx.com>
---
 arch/arm/mach-zynq/common.c |   53 +++++++++++-------------------------------
 1 files changed, 14 insertions(+), 39 deletions(-)

diff --git a/arch/arm/mach-zynq/common.c b/arch/arm/mach-zynq/common.c
index 729ce51..0447f1f 100644
--- a/arch/arm/mach-zynq/common.c
+++ b/arch/arm/mach-zynq/common.c
@@ -101,6 +101,11 @@ void __init xilinx_memory_init()
 }
 
 #ifdef CONFIG_CPU_FREQ
+#define CPUFREQ_MIN_FREQ_HZ	200000000
+static unsigned int freq_divs[] __initdata = {
+	2, 3
+};
+
 /**
  * xilinx_opp_init() - Register OPPs
  *
@@ -114,6 +119,7 @@ static void __init xilinx_opp_init(void)
 	int ret = 0;
 	long freq;
 	struct clk *cpuclk = clk_get_sys("CPU_6OR4X_CLK", NULL);
+	int i;
 
 	if (IS_ERR(pdev)) {
 		pr_warn("Xilinx OOP init: No device. DVFS not available.");
@@ -127,47 +133,16 @@ static void __init xilinx_opp_init(void)
 	}
 
 	/* frequency/voltage operating points. For now use f only */
-	/* We need some conditionals to enable the max frequencies for the right
-	 * parts only. */
-	/* -3E(?) max f = 1GHz */
 	freq = clk_get_rate(cpuclk);
 	ret |= opp_add(dev, freq, 0);
-	freq = clk_round_rate(cpuclk, 1000000000);
-	if (abs(1000000000 - freq) < 50000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
-		ret |= opp_add(dev, freq, 0);
-	/* -3 parts max f = 800 MHz */
-	freq = clk_round_rate(cpuclk, 800000000);
-	if (abs(800000000 - freq) < 10000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
-		ret |= opp_add(dev, freq, 0);
-	freq = clk_round_rate(cpuclk, 666666667);
-	if (abs(666666667 - freq) < 10000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
-		ret |= opp_add(dev, freq, 0);
-	freq = clk_round_rate(cpuclk, 555555556);
-	if (abs(555555556 - freq) < 10000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
-		ret |= opp_add(dev, freq, 0);
-	freq = clk_round_rate(cpuclk, 444444444);
-	if (abs(444444444 - freq) < 10000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
-		ret |= opp_add(dev, freq, 0);
-	freq = clk_round_rate(cpuclk, 333333333);
-	if (abs(333333333 - freq) < 10000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
-		ret |= opp_add(dev, freq, 0);
-	freq = clk_round_rate(cpuclk, 222222222);
-	if (abs(222222222 - freq) < 10000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
-		ret |= opp_add(dev, freq, 0);
-	freq = clk_round_rate(cpuclk, 111111111);
-	if (abs(111111111 - freq) < 10000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
-		ret |= opp_add(dev, freq, 0);
-	freq = clk_round_rate(cpuclk, 50000000);
-	if (abs(50000000 - freq) < 5000000 &&
-			IS_ERR(opp_find_freq_exact(dev, freq, 1)))
+	for (i = 0; i < ARRAY_SIZE(freq_divs); i++) {
+		long tmp = clk_round_rate(cpuclk, freq / freq_divs[i]);
+		if (tmp >= CPUFREQ_MIN_FREQ_HZ)
+			ret |= opp_add(dev, tmp, 0);
+	}
+	freq = clk_round_rate(cpuclk, CPUFREQ_MIN_FREQ_HZ);
+	if (freq >= CPUFREQ_MIN_FREQ_HZ && IS_ERR(opp_find_freq_exact(dev, freq,
+				1)))
 		ret |= opp_add(dev, freq, 0);
 
 	if (ret)
-- 
1.7.0.4

