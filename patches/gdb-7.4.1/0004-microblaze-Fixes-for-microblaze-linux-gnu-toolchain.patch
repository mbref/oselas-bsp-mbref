From 9385bffdf9dd0bd2db788638157464d9ddb7dfdf Mon Sep 17 00:00:00 2001
From: David Holsgrove <david.holsgrove@petalogix.com>
Date: Tue, 8 May 2012 17:56:54 +1000
Subject: [PATCH] microblaze: Fixes for microblaze*-*-linux-gnu toolchain

 * Update breakpoint opcode
 * fix segfault on connecting gdbserver
 * add microblaze_linux_memory_remove_breakpoint
 * add set_solib_svr4_fetch_link_map_offsets
 * add set_gdbarch_fetch_tls_load_module_address

Signed-off-by: David Holsgrove <david.holsgrove@petalogix.com>
---
 gdb/configure.host                   |    3 ++
 gdb/gdbserver/configure.srv          |    1 +
 gdb/gdbserver/linux-microblaze-low.c |   65 ++++++++++++++++++++++++++++++---
 gdb/microblaze-linux-tdep.c          |   30 +++++++++++++++-
 gdb/microblaze-tdep.c                |   45 +++++++++++++++++++++--
 gdb/microblaze-tdep.h                |    4 +-
 6 files changed, 135 insertions(+), 13 deletions(-)

diff --git a/gdb/configure.host b/gdb/configure.host
index 531f458..15a3984 100644
--- a/gdb/configure.host
+++ b/gdb/configure.host
@@ -46,6 +46,7 @@ i[34567]86*)		gdb_host_cpu=i386 ;;
 m68*)			gdb_host_cpu=m68k ;;
 m88*)			gdb_host_cpu=m88k ;;
 mips*)			gdb_host_cpu=mips ;;
+microblaze*)		gdb_host_cpu=microblaze ;;
 powerpc* | rs6000)	gdb_host_cpu=powerpc ;;
 sparcv9 | sparc64)	gdb_host_cpu=sparc ;;
 s390*)			gdb_host_cpu=s390 ;;
@@ -122,6 +123,8 @@ mips*-*-netbsd* | mips*-*-knetbsd*-gnu)
 			gdb_host=nbsd ;;
 mips64*-*-openbsd*)	gdb_host=obsd64 ;;
 
+microblaze*-*linux*)	gdb_host=linux ;;
+
 powerpc-*-aix* | rs6000-*-*)
 			gdb_host=aix ;;
 powerpc-*-linux*)	gdb_host=linux ;;
diff --git a/gdb/gdbserver/configure.srv b/gdb/gdbserver/configure.srv
index e0928bc..07c901e 100644
--- a/gdb/gdbserver/configure.srv
+++ b/gdb/gdbserver/configure.srv
@@ -185,6 +185,7 @@ case "${target}" in
   microblaze*-*-linux*)	srv_regobj=reg-microblaze.o
 			srv_tgtobj="linux-low.o linux-osdata.o linux-microblaze-low.o linux-procfs.o linux-ptrace.o"
 			srv_linux_usrregs=yes
+			srv_linux_regsets=yes
 			srv_linux_thread_db=yes
 			;;
   powerpc*-*-linux*)	srv_regobj="powerpc-32l.o"
diff --git a/gdb/gdbserver/linux-microblaze-low.c b/gdb/gdbserver/linux-microblaze-low.c
index 57e5c69..cab11c4 100644
--- a/gdb/gdbserver/linux-microblaze-low.c
+++ b/gdb/gdbserver/linux-microblaze-low.c
@@ -24,6 +24,8 @@
 #include "linux-low.h"
 
 #include <asm/ptrace.h>
+#include <sys/procfs.h>
+#include <sys/ptrace.h>
 
 #include "gdb_proc_service.h"
 
@@ -97,6 +99,40 @@ microblaze_breakpoint_at (CORE_ADDR where)
   return 0;
 }
 
+static CORE_ADDR
+microblaze_reinsert_addr (struct regcache *regcache)
+{
+  unsigned long pc;
+  collect_register_by_name (regcache, "r15", &pc);
+  return pc;
+}
+
+#ifdef HAVE_PTRACE_GETREGS
+
+static void
+microblaze_collect_ptrace_register (struct regcache *regcache, int regno, char *buf)
+{
+  int size = register_size (regno);
+
+  memset (buf, 0, sizeof (long));
+
+  if (size < sizeof (long))
+    collect_register (regcache, regno, buf + sizeof (long) - size);
+  else
+    collect_register (regcache, regno, buf);
+}
+
+static void
+microblaze_supply_ptrace_register (struct regcache *regcache,
+			    int regno, const char *buf)
+{
+  int size = register_size (regno);
+  if (size < sizeof (long))
+    supply_register (regcache, regno, buf + sizeof (long) - size);
+  else
+    supply_register (regcache, regno, buf);
+}
+
 /* Provide only a fill function for the general register set.  ps_lgetregs
    will use this for NPTL support.  */
 
@@ -105,17 +141,28 @@ static void microblaze_fill_gregset (struct regcache *regcache, void *buf)
   int i;
 
   for (i = 0; i < 32; i++)
-    collect_register (regcache, i, (char *) buf + microblaze_regmap[i]);
+    microblaze_collect_ptrace_register (regcache, i, (char *) buf + microblaze_regmap[i]);
 }
 
-static CORE_ADDR
-microblaze_reinsert_addr (struct regcache *regcache)
+static void
+microblaze_store_gregset (struct regcache *regcache, const void *buf)
 {
-  unsigned long pc;
-  collect_register_by_name (regcache, "r15", &pc);
-  return pc;
+  int i;
+
+  for (i = 0; i < 32; i++)
+    supply_register (regcache, i, (char *) buf + microblaze_regmap[i]);
 }
 
+#endif /* HAVE_PTRACE_GETREGS */
+
+struct regset_info target_regsets[] = {
+#ifdef HAVE_PTRACE_GETREGS
+  { PTRACE_GETREGS, PTRACE_SETREGS, 0, sizeof (elf_gregset_t), GENERAL_REGS, microblaze_fill_gregset, microblaze_store_gregset },
+  { 0, 0, 0, -1, -1, NULL, NULL },
+#endif /* HAVE_PTRACE_GETREGS */
+  { 0, 0, 0, -1, -1, NULL, NULL }
+};
+
 struct linux_target_ops the_low_target = {
   init_registers_microblaze,
   microblaze_num_regs,
@@ -131,4 +178,10 @@ struct linux_target_ops the_low_target = {
   microblaze_reinsert_addr,
   0,
   microblaze_breakpoint_at,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  microblaze_collect_ptrace_register,
+  microblaze_supply_ptrace_register,
 };
diff --git a/gdb/microblaze-linux-tdep.c b/gdb/microblaze-linux-tdep.c
index 6935ba5..9462044 100644
--- a/gdb/microblaze-linux-tdep.c
+++ b/gdb/microblaze-linux-tdep.c
@@ -37,6 +37,22 @@
 #include "tramp-frame.h"
 #include "linux-tdep.h"
 
+static int microblaze_debug_flag = 0;
+
+static void
+microblaze_debug (const char *fmt, ...)
+{
+  if (microblaze_debug_flag)
+    {
+       va_list args;
+
+       va_start (args, fmt);
+       printf_unfiltered ("MICROBLAZE LINUX: ");
+       vprintf_unfiltered (fmt, args);
+       va_end (args);
+    }
+}
+
 static int
 microblaze_linux_memory_remove_breakpoint (struct gdbarch *gdbarch, 
 					   struct bp_target_info *bp_tgt)
@@ -46,20 +62,27 @@ microblaze_linux_memory_remove_breakpoint (struct gdbarch *gdbarch,
   int val;
   int bplen;
   gdb_byte old_contents[BREAKPOINT_MAX];
+  struct cleanup *cleanup;
 
   /* Determine appropriate breakpoint contents and size for this address.  */
   bp = gdbarch_breakpoint_from_pc (gdbarch, &addr, &bplen);
   if (bp == NULL)
     error (_("Software breakpoints not implemented for this target."));
 
+  /* Make sure we see the memory breakpoints.  */
+  cleanup = make_show_memory_breakpoints_cleanup (1);
   val = target_read_memory (addr, old_contents, bplen);
 
   /* If our breakpoint is no longer at the address, this means that the
      program modified the code on us, so it is wrong to put back the
      old value.  */
   if (val == 0 && memcmp (bp, old_contents, bplen) == 0)
-    val = target_write_raw_memory (addr, bp_tgt->shadow_contents, bplen);
+  {
+      val = target_write_raw_memory (addr, bp_tgt->shadow_contents, bplen);
+      microblaze_debug ("microblaze_linux_memory_remove_breakpoint writing back to memory at addr 0x%lx\n", addr);
+  }
 
+  do_cleanups (cleanup);
   return val;
 }
 
@@ -135,6 +158,11 @@ microblaze_linux_init_abi (struct gdbarch_info info,
   /* Trampolines.  */
   tramp_frame_prepend_unwinder (gdbarch,
 				&microblaze_linux_sighandler_tramp_frame);
+
+  /* Enable TLS support.  */
+  set_gdbarch_fetch_tls_load_module_address (gdbarch,
+                                             svr4_fetch_objfile_link_map);
+
 }
 
 /* -Wmissing-prototypes */
diff --git a/gdb/microblaze-tdep.c b/gdb/microblaze-tdep.c
index 9ceee25..41db25e 100644
--- a/gdb/microblaze-tdep.c
+++ b/gdb/microblaze-tdep.c
@@ -158,6 +158,39 @@ microblaze_push_dummy_call (struct gdbarch *gdbarch, struct value *function,
   return sp;
 }
 
+static int
+microblaze_linux_memory_remove_breakpoint (struct gdbarch *gdbarch,
+				    struct bp_target_info *bp_tgt)
+{
+  CORE_ADDR addr = bp_tgt->placed_address;
+  const unsigned char *bp;
+  int val;
+  int bplen;
+  gdb_byte old_contents[BREAKPOINT_MAX];
+  struct cleanup *cleanup;
+
+  /* Determine appropriate breakpoint contents and size for this address.  */
+  bp = gdbarch_breakpoint_from_pc (gdbarch, &addr, &bplen);
+  if (bp == NULL)
+    error (_("Software breakpoints not implemented for this target."));
+
+  /* Make sure we see the memory breakpoints.  */
+  cleanup = make_show_memory_breakpoints_cleanup (1);
+  val = target_read_memory (addr, old_contents, bplen);
+
+  /* If our breakpoint is no longer at the address, this means that the
+     program modified the code on us, so it is wrong to put back the
+     old value.  */
+  if (val == 0 && memcmp (bp, old_contents, bplen) == 0)
+  {
+    val = target_write_raw_memory (addr, bp_tgt->shadow_contents, bplen);
+    microblaze_debug ("microblaze_linux_memory_remove_breakpoint writing back to memory at addr 0x%lx\n", addr);
+  }
+
+  do_cleanups (cleanup);
+  return val;
+}
+
 static const gdb_byte *
 microblaze_breakpoint_from_pc (struct gdbarch *gdbarch, CORE_ADDR *pc, 
 			       int *len)
@@ -291,8 +324,8 @@ microblaze_analyze_prologue (struct gdbarch *gdbarch, CORE_ADDR pc,
 
   for (addr = func_addr; addr < stop; addr += INST_WORD_SIZE)
     {
-     //insn = microblaze_fetch_instruction (addr);
-      insn = insn_block[(addr - func_addr) / INST_WORD_SIZE];
+      insn = microblaze_fetch_instruction (addr);
+      //insn = insn_block[(addr - func_addr) / INST_WORD_SIZE];
       op = microblaze_decode_insn (insn, &rd, &ra, &rb, &imm);
       microblaze_debug ("%s %08lx op=%x r%d r%d imm=%d\n", paddress (gdbarch, addr), insn, op, rd, ra, imm);
 
@@ -718,13 +751,15 @@ microblaze_software_single_step (struct frame_info *frame)
 	  rb = get_frame_register_unsigned (frame, lrb);
 	else
 	  rb = 0;
+
 	stepbreaks[1].address = microblaze_get_target_address (insn, immfound, imm, pc, ra, rb, &targetvalid, &unconditionalbranch);
-        microblaze_debug ("single-step uncondbr=%d targetvalid=%d target=%x\n", unconditionalbranch, targetvalid, stepbreaks[1].address);
+	microblaze_debug ("single-step uncondbr=%d targetvalid=%d target=%x\n", unconditionalbranch, targetvalid, stepbreaks[1].address);
+
 	if (unconditionalbranch)
 	  stepbreaks[0].valid = FALSE; /* This is a unconditional branch: will not come to the next address */
 	if (targetvalid && (stepbreaks[0].valid == FALSE ||
 			    (stepbreaks[0].address != stepbreaks[1].address))
-	                && (stepbreaks[1].address != pc)) {
+			&& (stepbreaks[1].address != pc)) {
 	  stepbreaks[1].valid = TRUE;
 	} else {
 	  stepbreaks[1].valid = FALSE;
@@ -825,6 +860,8 @@ microblaze_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
   /* Stack grows downward.  */
   set_gdbarch_inner_than (gdbarch, core_addr_lessthan);
 
+  set_gdbarch_memory_remove_breakpoint (gdbarch, microblaze_linux_memory_remove_breakpoint);
+
   set_gdbarch_breakpoint_from_pc (gdbarch, microblaze_breakpoint_from_pc);
   set_gdbarch_software_single_step (gdbarch, microblaze_software_single_step);
 
diff --git a/gdb/microblaze-tdep.h b/gdb/microblaze-tdep.h
index 4165d03..e2e4f16 100644
--- a/gdb/microblaze-tdep.h
+++ b/gdb/microblaze-tdep.h
@@ -117,7 +117,7 @@ enum microblaze_regnum
 
 /* MICROBLAZE_BREAKPOINT defines the breakpoint that should be used.
    Only used for native debugging.  */
-#define MICROBLAZE_BREAKPOINT {0xb9, 0xcc, 0x00, 0x60}
-#define MICROBLAZE_BREAKPOINT_LE {0x60, 0x00, 0xcc, 0xb9}
+#define MICROBLAZE_BREAKPOINT {0xba, 0x0c, 0x00, 0x18}
+#define MICROBLAZE_BREAKPOINT_LE {0x18, 0x00, 0x0c, 0xba}
 
 #endif /* microblaze-tdep.h */
-- 
1.7.1

