From 6d665e1ba836fa329f37baf0db33df68c9874576 Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Thu, 28 Jul 2011 15:23:37 +0200
Subject: [PATCH] microblaze: Fix access_ok macro

There is the problem with bit OR (|) because for
some combination is addr | size | addr+size equal
to seq.

For standard kernel setting (kernel starts at 0xC0000000)
is seq for user space 0xBFFFFFFF and everything below
this limit is fine.

But even address 0xBFFFFFFF is fine because it
is below kernel space.

Signed-off-by: Michal Simek <monstr@monstr.eu>
---
 arch/microblaze/include/asm/uaccess.h |   20 ++++++++++++--------
 1 files changed, 12 insertions(+), 8 deletions(-)

diff --git a/arch/microblaze/include/asm/uaccess.h b/arch/microblaze/include/asm/uaccess.h
index 5bb95a1..2082d8c 100644
--- a/arch/microblaze/include/asm/uaccess.h
+++ b/arch/microblaze/include/asm/uaccess.h
@@ -89,18 +89,22 @@ static inline int ___range_ok(unsigned long addr, unsigned long size)
 #define access_ok(type, addr, size) (__range_ok((addr), (size)) == 0)
 
 #else
-
 /*
  * Address is valid if:
  *  - "addr", "addr + size" and "size" are all below the limit
+ * Also return 0 for size 0
  */
-#define access_ok(type, addr, size) \
-	(get_fs().seg > (((unsigned long)(addr)) | \
-		(size) | ((unsigned long)(addr) + (size))))
-
-/* || printk("access_ok failed for %s at 0x%08lx (size %d), seg 0x%08x\n",
- type?"WRITE":"READ",addr,size,get_fs().seg)) */
-
+static inline int access_ok(int type, const void __user *addr, unsigned long size)
+{
+	if ((get_fs().seg < (unsigned long)(addr)) ||
+			(get_fs().seg < ((unsigned long)addr + size))) {
+/*		printk("ACCESS failed: %s at 0x%08x (size 0x%x), seg 0x%08x\n",
+			type ? "WRITE" : "READ ", (u32)addr, (u32)size,
+			(u32)get_fs().seg); */
+		return 0;
+	}
+	return 1;
+}
 #endif
 
 #ifdef CONFIG_MMU
-- 
1.7.0.4

