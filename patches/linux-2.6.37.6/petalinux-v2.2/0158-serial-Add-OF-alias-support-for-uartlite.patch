From 76fe21dde479e8161edab03f4fdd33da9d96e105 Mon Sep 17 00:00:00 2001
From: John Williams <john.williams@petalogix.com>
Date: Tue, 8 Nov 2011 17:02:22 +1000
Subject: [PATCH] serial: Add OF alias support for uartlite

Check if uartlite is in alias list, if yes, use this id.
Number of aliases can't extend ULITE_NR_UARTS.

Extend ULITE_NR_UARTS to 10 uarts.

Signed-off-by: John Williams <john.williams@petalogix.com>
Signed-off-by: Michal Simek <monstr@monstr.eu>
---
 drivers/serial/uartlite.c |   30 ++++++++++++++++++++++++++----
 1 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/drivers/serial/uartlite.c b/drivers/serial/uartlite.c
index 261472a..76b5f81 100644
--- a/drivers/serial/uartlite.c
+++ b/drivers/serial/uartlite.c
@@ -38,7 +38,7 @@ MODULE_DEVICE_TABLE(of, ulite_of_match);
 #define ULITE_NAME		"ttyUL"
 #define ULITE_MAJOR		204
 #define ULITE_MINOR		187
-#define ULITE_NR_UARTS		4
+#define ULITE_NR_UARTS		10
 
 /* ---------------------------------------------------------------------
  * Register definitions
@@ -611,7 +611,8 @@ static int __devinit
 ulite_of_probe(struct platform_device *op, const struct of_device_id *match)
 {
 	struct resource res;
-	const unsigned int *id;
+	const unsigned int *idp;
+	int id;
 	int irq, rc;
 
 	dev_dbg(&op->dev, "%s(%p, %p)\n", __func__, op, match);
@@ -627,9 +628,30 @@ ulite_of_probe(struct platform_device *op, const struct of_device_id *match)
 		return -ENODEV;
 	}
 
-	id = of_get_property(op->dev.of_node, "port-number", NULL);
+	/* Look for a serialN alias */
+	id = of_alias_get_id(op->dev.of_node, "serial");
+	if (id < 0) {
+		dev_warn(&op->dev, "failed to get alias id, errno %d\n", id);
+		/* Fall back to old port-number property */
+		idp = of_get_property(op->dev.of_node, "port-number", NULL);
+		if (idp < 0) {
+			dev_warn(&op->dev,
+				"failed to get port-number, errno %d\n", idp);
+			id = -1;
+		} else
+			id = be32_to_cpup(idp);
+	}
+
+
+	/* we can't register ids which are greater than number of uartlites */
+	if (id >= ULITE_NR_UARTS) {
+		dev_warn(&op->dev,
+			"Extern number of allocated uartlite entries "
+			"ULITE_NR_UARTS, id %d\n", id);
+		return -ENODEV;
+	}
 
-	return ulite_assign(&op->dev, id ? be32_to_cpup(id) : -1, res.start, irq);
+	return ulite_assign(&op->dev, id , res.start, irq);
 }
 
 static int __devexit ulite_of_remove(struct platform_device *op)
-- 
1.7.0.4

