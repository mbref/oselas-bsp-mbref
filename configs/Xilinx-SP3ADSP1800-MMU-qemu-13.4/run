#!/bin/bash
#
# For some information about how to work with qemu for MicroBlaze, please
# refer: http://www.monstr.eu/wiki/doku.php?id=qemu:qemu

#
# we need information about the platform
#
if [ ! -e "selected_platformconfig" ]; then
	echo "error: selected_platformconfig does not exist"
	echo "       please use 'ptxdist platform ...' or 'ptxdist --platformconfig=...'"
	exit 1
fi

source selected_platformconfig

if [ -n "${PTXCONF_PLATFORM}" ]; then
	PTXDIST_PLATFORMDIR="./platform-${PTXCONF_PLATFORM}"
else
	PTXDIST_PLATFORMDIR="."
fi

if [ ! -e "${PTXDIST_PLATFORMDIR}/images/u-boot.elf" ]; then
	echo "error: run 'ptxdist go' first"
	exit 1
fi

if [ ! -e "${PTXDIST_PLATFORMDIR}/images/linuximage" ]; then
	echo "error: run 'ptxdist go' first"
	exit 1
fi

if [ ! -e "${PTXDIST_PLATFORMDIR}/images/xilinx.dtb" ]; then
	echo "error: run 'ptxdist go' first"
	exit 1
fi

if [ ! -e "${PTXDIST_PLATFORMDIR}/images/root.squashfs" ]; then
	echo "error: run 'ptxdist images' first"
	exit 1
fi

# the emulator to run
QEMU_EXEC=qemu-system-${PTXCONF_ARCH_STRING}

# disable this, if you want to have some graphics output
QEMU_NOGRAPHIC=--nographic

# Machine to emulate: The default kernel is prepared to run on "microblaze-fdt"
# QEMU_MACHINE=${PTXCONF_PLATFORM}
QEMU_MACHINE=microblaze-fdt

# setup the image you want to emulate:
case ${QEMU_KERNEL} in
	u-boot)	QEMU_KERNEL="${PTXDIST_PLATFORMDIR}/images/u-boot.elf" ;;
	linuximage|\
	*)	QEMU_KERNEL="${PTXDIST_PLATFORMDIR}/images/linuximage" ;;
esac

#
# 'user mode' network related settings
#
# PLATFORM_IP="10.0.2.7"
PLATFORM_IP=""

# the ports a 'ftpd' would connect to (in the emulated sysem)
FTP_DATA_INTERNAL_PORT=20
FTP_CTRL_INTERNAL_PORT=21
# port QEMU opens at the host side to give access to the ${FTP_*_INTERNAL_PORT}
FTP_DATA_EXTERNAL_PORT=4440
FTP_CTRL_EXTERNAL_PORT=4441

# the port a 'telned' would connect to (in the emulated sysem)
TELNET_INTERNAL_PORT=23
# port QEMU opens at the host side to give access to the ${TELNET_INTERNAL_PORT}
TELNET_EXTERNAL_PORT=4444

# the ports a 'ftpd' would connect to (in the emulated sysem)
HTTP_INTERNAL_PORT=80
HTTPS_INTERNAL_PORT=443
# port QEMU opens at the host side to give access to the ${HTTP*_INTERNAL_PORT}
HTTP_EXTERNAL_PORT=5555
HTTPS_EXTERNAL_PORT=5556

# prepare the machine hardware setup with 'mb.dtb'
rm -f ./mb.dtb
ln -s ${PTXDIST_PLATFORMDIR}/images/xilinx.dtb ./mb.dtb

# show hint to terminate the simulator
echo "************************************************************"
echo "***    To exit the emulator, press \"Ctrl+A\" then \"X\".    ***"
echo "************************************************************"
read -p "(wait 10 seconds or press Enter to continue)" -st 10
echo

# do the job
${QEMU_EXEC} ${QEMU_NOGRAPHIC} \
	-M ${QEMU_MACHINE} \
	-no-reboot \
	-net nic,vlan=1 \
	-net user,vlan=1 \
	-redir tcp:${FTP_DATA_EXTERNAL_PORT}:${PLATFORM_IP}:${FTP_DATA_INTERNAL_PORT} \
	-redir tcp:${FTP_CTRL_EXTERNAL_PORT}:${PLATFORM_IP}:${FTP_CTRL_INTERNAL_PORT} \
	-redir tcp:${TELNET_EXTERNAL_PORT}:${PLATFORM_IP}:${TELNET_INTERNAL_PORT} \
	-redir tcp:${HTTP_EXTERNAL_PORT}:${PLATFORM_IP}:${HTTP_INTERNAL_PORT} \
	-redir tcp:${HTTPS_EXTERNAL_PORT}:${PLATFORM_IP}:${HTTPS_INTERNAL_PORT} \
	-kernel ${QEMU_KERNEL} \
	-append "console=ttyUL0,115200"

# cleanup
rm -f ./mb.dtb

